@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
    var maNv = User.Claims.FirstOrDefault(c => c.Type == "MaNV")?.Value;
    if (string.IsNullOrEmpty(maNv))
    {
                        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
                        <script>
                            Swal.fire({
                                icon: 'error',
                                title: 'Lỗi!',
                                text: 'Không tìm thấy mã nhân viên. Vui lòng đăng nhập lại.',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = '/Login';
                            });
                        </script>
        return;
    }
}

<!-- External Styles -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<!-- Custom Styles -->
<style>
    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-left-color: #3b82f6;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        animation: spin 1s linear infinite;
        display: inline-block;
    }

    .tab-link.active {
        background-color: #eff6ff;
        color: #1d4ed8;
        border-bottom: 2px solid #1d4ed8;
    }
    .tab-pane {
        display: none;
    }
    .tab-pane.active {
        display: block;
    }
    table tr:hover {
        background-color: #f9fafb;
    }
</style>

<!-- Main Container -->
<div class="min-h-screen bg-gray-50 p-6">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-4xl font-bold text-gray-900 flex items-center">
                <i class="fas fa-history mr-3 text-blue-600"></i> Lịch Sử Chấm Công
            </h1>
            <p class="text-gray-600 mt-2 text-lg">Xem và lọc lịch sử chấm công, tăng ca, làm bù theo tháng và năm.</p>
        </div>

        <!-- Filter Section -->
        <div class="mb-6 bg-white shadow-md rounded-lg p-4">
            <div class="flex flex-col sm:flex-row sm:items-center sm:space-x-4">
                <div class="flex-1">
                    <label class="text-sm font-medium text-gray-700">Chọn tháng và năm</label>
                    <div class="relative mt-1">
                        <input type="text" id="monthYear" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="Chọn tháng/năm">
                        <i class="fas fa-calendar-alt absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    </div>
                </div>
                <button id="clearFilter" class="mt-4 sm:mt-0 bg-gray-200 text-gray-700 p-3 rounded-lg hover:bg-gray-300">
                    <i class="fas fa-times mr-2"></i> Xóa bộ lọc
                </button>
            </div>
            <div id="selectedFilter" class="mt-2 text-sm text-gray-600 hidden"></div>
        </div>

        <!-- Tabs -->
        <div class="mb-6">
            <ul class="flex border-b border-gray-200">
                <li class="mr-2">
                    <a class="tab-link active inline-block py-3 px-6 text-lg font-semibold rounded-t-lg" href="#pending" data-tab="pending">Chờ Duyệt</a>
                </li>
                <li class="mr-2">
                    <a class="tab-link inline-block py-3 px-6 text-lg font-semibold rounded-t-lg text-gray-600" href="#approved" data-tab="approved">Đã Duyệt</a>
                </li>
                <li class="mr-2">
                    <a class="tab-link inline-block py-3 px-6 text-lg font-semibold rounded-t-lg text-gray-600" href="#rejected" data-tab="rejected">Từ Chối</a>
                </li>
            </ul>
        </div>

        <!-- Tab Content -->
        <div class="tab-content">
            <!-- Pending Tab -->
            <div id="pending" class="tab-pane active">
                <div class="bg-white shadow-md rounded-lg p-6">
                    <h2 class="text-xl font-semibold text-gray-800 mb-4">Danh Sách Chờ Duyệt</h2>
                    <div class="overflow-x-auto">
                        <table class="w-full table-auto border-collapse">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Loại</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Ngày</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Giờ vào</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Giờ ra</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Tổng giờ</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Ghi chú</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Trạng thái</th>
                                </tr>
                            </thead>
                            <tbody id="pendingRecords">
                                <tr><td colspan="7" class="p-4 text-center text-gray-600"><span class="spinner"></span> Đang tải...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Approved Tab -->
            <div id="approved" class="tab-pane">
                <div class="bg-white shadow-md rounded-lg p-6">
                    <h2 class="text-xl font-semibold text-gray-800 mb-4">Danh Sách Đã Duyệt</h2>
                    <div class="overflow-x-auto">
                        <table class="w-full table-auto border-collapse">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Loại</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Ngày</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Giờ vào</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Giờ ra</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">SHIP giờ</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Ghi chú</th>
                                    <th class="p-4 text-left text-sm font-semibold text-gray-700">Trạng thái</th>
                                </tr>
                            </thead>
                            <tbody id="approvedRecords">
                                <tr><td colspan="7" class="p-4 text-center text-gray-600"><span class="spinner"></span> Đang tải...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

           <!-- Rejected Tab -->
                <div id="rejected" class="tab-pane">
                    <div class="bg-white shadow-md rounded-lg p-6">
                        <h2 class="text-xl font-semibold text-gray-800 mb-4">Danh Sách Từ Chối</h2>
                        <div class="overflow-x-auto">
                            <table class="w-full table-auto border-collapse">
                                <thead class="bg-gray-100">
                                    <tr>
                                        <th class="p-4 text-left text-sm font-semibold text-gray-700">Loại</th>
                                        <th class="p-4 text-left text-sm font-semibold text-gray-700">Ngày</th>
                                        <th class="p-4 text-left text-sm font-semibold text-gray-700">Giờ vào</th>
                                        <th class="p-4 text-left text-sm font-semibold text-gray-700">Giờ ra</th>
                                        <th class="p-4 text-left text-sm font-semibold text-gray-700">Tổng giờ</th>
                                        <th class="p-4 text-left text-sm font-semibold text-gray-700">Ghi chú</th>
                                        <th class="p-4 text-left text-sm font-semibold text-gray-700">Trạng thái</th>
                                        <th class="p-4 text-left text-sm font-semibold text-gray-700">Hành động</th> <!-- New Action column -->
                                    </tr>
                                </thead>
                                <tbody id="rejectedRecords">
                                    <tr><td colspan="8" class="p-4 text-center text-gray-600"><span class="spinner"></span> Đang tải...</td></tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
        </div>
    </div>
</div>

<!-- External Scripts -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- JavaScript Logic -->
<script>
    const maNv = '@maNv';
    let selectedMonthYear = null;

    document.addEventListener('DOMContentLoaded', () => {
        console.log('DOM loaded, maNv:', maNv);
        if (!maNv) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Mã nhân viên không hợp lệ.',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.href = '/Login';
            });
            return;
        }

        // Initialize Flatpickr for month/year
        flatpickr("#monthYear", {
            plugins: [new monthSelectPlugin({})],
            dateFormat: "m/Y",
            defaultDate: new Date(),
            onChange: (selectedDates) => {
                if (selectedDates.length === 1) {
                    const date = selectedDates[0];
                    const year = date.getFullYear();
                    const month = date.getMonth() + 1;
                    const firstDay = new Date(year, date.getMonth(), 1);
                    const lastDay = new Date(year, date.getMonth() + 1, 0);
                    selectedMonthYear = {
                        start: formatDateToYMD(firstDay),
                        end: formatDateToYMD(lastDay),
                        display: `Tháng ${month}/${year}`
                    };
                    document.getElementById('selectedFilter').textContent = `Đang hiển thị: ${selectedMonthYear.display}`;
                    document.getElementById('selectedFilter').classList.remove('hidden');
                    refreshCurrentTab();
                }
            }
        });

        // Clear filter button
        document.getElementById('clearFilter')?.addEventListener('click', () => {
            selectedMonthYear = null;
            const monthYearInput = document.getElementById('monthYear');
            if (monthYearInput) monthYearInput.value = '';
            document.getElementById('selectedFilter').classList.add('hidden');
            refreshCurrentTab();
        });

        // Initialize tabs
        const initialTab = document.querySelector('.tab-link[data-tab="pending"]');
        if (initialTab) {
            setActiveTab('pending');
            loadPendingRecords();
        }

        // Tab switching
        document.querySelectorAll('.tab-link').forEach(tab => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                const tabId = tab.dataset.tab;
                console.log('Tab clicked:', tabId);
                setActiveTab(tabId);
                if (tabId === 'pending') loadPendingRecords();
                else if (tabId === 'approved') loadApprovedRecords();
                else if (tabId === 'rejected') loadRejectedRecords();
            });
        });
    });

    function setActiveTab(tabId) {
        document.querySelectorAll('.tab-link').forEach(t => {
            t.classList.remove('active');
            t.classList.add('text-gray-600');
        });
        document.querySelectorAll('.tab-pane').forEach(p => {
            p.classList.remove('active');
        });
        const activeTab = document.querySelector(`.tab-link[data-tab="${tabId}"]`);
        const activePane = document.getElementById(tabId);
        if (activeTab && activePane) {
            activeTab.classList.add('active');
            activeTab.classList.remove('text-gray-600');
            activePane.classList.add('active');
            console.log(`Switched to tab: ${tabId}`);
        }
    }

    function refreshCurrentTab() {
        const activeTab = document.querySelector('.tab-link.active');
        if (activeTab) {
            const tabId = activeTab.dataset.tab;
            console.log('Refreshing tab:', tabId);
            if (tabId === 'pending') loadPendingRecords();
            else if (tabId === 'approved') loadApprovedRecords();
            else if (tabId === 'rejected') loadRejectedRecords();
        }
    }

    function formatDateToYMD(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    async function loadPendingRecords() {
        const tbody = document.getElementById('pendingRecords');
        if (!tbody) {
            console.error('Pending records table body not found');
            return;
        }
        tbody.innerHTML = '<tr><td colspan="7" class="p-4 text-center text-gray-600"><span class="spinner"></span> Đang tải...</td></tr>';
        try {
            let url = '/api/Attendance/GetPendingRecords';
            if (selectedMonthYear) {
                url += `?startDate=${selectedMonthYear.start}&endDate=${selectedMonthYear.end}`;
            }
            console.log('Fetching pending records from:', url);
            const response = await fetch(url, {
                headers: { 'Accept': 'application/json' }
            });
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }
            const result = await response.json();
            console.log('Pending records response:', result);
            tbody.innerHTML = '';
            if (result.success && result.records?.length) {
                result.records.forEach(record => {
                    const row = document.createElement('tr');
                    row.className = 'border-b border-gray-200';
                    row.innerHTML = `
                        <td class="p-4 text-gray-800">${record.loai || '-'}</td>
                        <td class="p-4 text-gray-800">${record.ngay || '-'}</td>
                        <td class="p-4 text-gray-800">${record.gioVao || '-'}</td>
                        <td class="p-4 text-gray-800">${record.gioRa || '-'}</td>
                        <td class="p-4 text-gray-800">${record.tongGio != null ? record.tongGio.toFixed(2) + 'h' : '-'}</td>
                        <td class="p-4 text-gray-800">${record.ghiChu || '-'}</td>
                        <td class="p-4"><span class="text-yellow-600">${formatStatus(record.trangThai)}</span></td>
                    `;
                    tbody.appendChild(row);
                });
            } else {
                tbody.innerHTML = '<tr><td colspan="7" class="p-4 text-center text-gray-600">Không có dữ liệu</td></tr>';
            }
        } catch (error) {
            console.error('Error loading pending records:', error);
            tbody.innerHTML = `<tr><td colspan="7" class="p-4 text-center text-red-600">Lỗi tải dữ liệu: ${error.message}</td></tr>`;
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Không thể tải danh sách chờ duyệt: ' + error.message,
                confirmButtonText: 'OK'
            });
        }
    }

    async function loadApprovedRecords() {
        const tbody = document.getElementById('approvedRecords');
        if (!tbody) {
            console.error('Approved records table body not found');
            return;
        }
        tbody.innerHTML = '<tr><td colspan="7" class="p-4 text-center text-gray-600"><span class="spinner"></span> Đang tải...</td></tr>';
        try {
            let url = '/api/Attendance/GetApprovedRecords';
            if (selectedMonthYear) {
                url += `?startDate=${selectedMonthYear.start}&endDate=${selectedMonthYear.end}`;
            }
            console.log('Fetching approved records from:', url);
            const response = await fetch(url, {
                headers: { 'Accept': 'application/json' }
            });
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }
            const result = await response.json();
            console.log('Approved records response:', result);
            tbody.innerHTML = '';
            if (result.success && result.records?.length) {
                result.records.forEach(record => {
                    const row = document.createElement('tr');
                    row.className = 'border-b border-gray-200';
                    row.innerHTML = `
                        <td class="p-4 text-gray-800">${record.loai || '-'}</td>
                        <td class="p-4 text-gray-800">${record.ngay || '-'}</td>
                        <td class="p-4 text-gray-800">${record.gioVao || '-'}</td>
                        <td class="p-4 text-gray-800">${record.gioRa || '-'}</td>
                        <td class="p-4 text-gray-800">${record.tongGio != null ? record.tongGio.toFixed(2) + 'h' : '-'}</td>
                        <td class="p-4 text-gray-800">${record.ghiChu || '-'}</td>
                        <td class="p-4"><span class="text-green-600">${formatStatus(record.trangThai)}</span></td>
                    `;
                    tbody.appendChild(row);
                });
            } else {
                tbody.innerHTML = '<tr><td colspan="7" class="p-4 text-center text-gray-600">Không có dữ liệu</td></tr>';
            }
        } catch (error) {
            console.error('Error loading approved records:', error);
            tbody.innerHTML = `<tr><td colspan="7" class="p-4 text-center text-red-600">Lỗi tải dữ liệu: ${error.message}</td></tr>`;
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Không thể tải danh sách đã duyệt: ' + error.message,
                confirmButtonText: 'OK'
            });
        }
    }

   async function loadRejectedRecords() {
    const tbody = document.getElementById('rejectedRecords');
    if (!tbody) {
        console.error('Rejected records table body not found');
        return;
    }
    tbody.innerHTML = '<tr><td colspan="8" class="p-4 text-center text-gray-600"><span class="spinner"></span> Đang tải...</td></tr>';
    try {
        let url = '/api/Attendance/GetRejectedRecords';
        if (selectedMonthYear) {
            url += `?startDate=${selectedMonthYear.start}&endDate=${selectedMonthYear.end}`;
        }
        console.log('Fetching rejected records from:', url);
        const response = await fetch(url, {
            headers: { 'Accept': 'application/json' }
        });
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
        }
        const result = await response.json();
        console.log('Rejected records response:', result);
        tbody.innerHTML = '';
        if (result.success && result.records?.length) {
            result.records.forEach(record => {
                const row = document.createElement('tr');
                row.className = 'border-b border-gray-200';
                row.dataset.loai = record.loai;
                row.dataset.ngay = record.ngay;
                row.innerHTML = `
                    <td class="p-4 text-gray-800">${record.loai || '-'}</td>
                    <td class="p-4 text-gray-800">${record.ngay || '-'}</td>
                    <td class="p-4 text-gray-800">${record.gioVao || '-'}</td>
                    <td class="p-4 text-gray-800">${record.gioRa || '-'}</td>
                    <td class="p-4 text-gray-800">${record.tongGio != null ? record.tongGio.toFixed(2) + 'h' : '-'}</td>
                    <td class="p-4 text-gray-800">${record.ghiChu || '-'}</td>
                    <td class="p-4"><span class="text-red-600">${formatStatus(record.trangThai)}</span></td>
                    <td class="p-4">
                        <button class="delete-btn bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600" data-loai="${record.loai}" data-ngay="${record.ngay}">
                            <i class="fas fa-trash mr-1"></i> Xóa
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            // Add event listeners for delete buttons
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', async () => {
                    const loai = button.dataset.loai;
                    const ngay = button.dataset.ngay;
                    Swal.fire({
                        icon: 'warning',
                        title: 'Xác nhận xóa',
                        text: `Bạn có chắc muốn xóa bản ghi ${loai} ngày ${ngay}?`,
                        showCancelButton: true,
                        confirmButtonText: 'Xóa',
                        cancelButtonText: 'Hủy'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch('/api/Attendance/DeleteRejectedRecord', {
                                    method: 'DELETE',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'Accept': 'application/json'
                                    },
                                    body: JSON.stringify({ loai, ngay })
                                });
                                const result = await response.json();
                                if (result.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Thành công!',
                                        text: 'Bản ghi đã được xóa.',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        loadRejectedRecords(); // Refresh the rejected records
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Lỗi!',
                                        text: result.message || 'Không thể xóa bản ghi.',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            } catch (error) {
                                console.error('Error deleting record:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Lỗi!',
                                    text: 'Không thể xóa bản ghi: ' + error.message,
                                    confirmButtonText: 'OK'
                                });
                            }
                        }
                    });
                });
            });
        } else {
            tbody.innerHTML = '<tr><td colspan="8" class="p-4 text-center text-gray-600">Không có dữ liệu</td></tr>';
        }
    } catch (error) {
        console.error('Error loading rejected records:', error);
        tbody.innerHTML = `<tr><td colspan="8" class="p-4 text-center text-red-600">Lỗi tải dữ liệu: ${error.message}</td></tr>`;
        Swal.fire({
            icon: 'error',
            title: 'Lỗi!',
            text: 'Không thể tải danh sách từ chối: ' + error.message,
            confirmButtonText: 'OK'
        });
    }
}

    function formatStatus(status) {
        switch (status) {
            case 'LS1':
            case 'TC1':
            case 'LB1':
                return 'Chờ duyệt';
            case 'CC3':
            case 'TC3':
            case 'LB3':
                return 'Đã duyệt';
            case 'CC4':
            case 'TC4':
            case 'LB4':
                return 'Từ chối';
            default:
                return status || '-';
        }
    }
    document.querySelectorAll('.delete-btn').forEach(button => {
    button.addEventListener('click', async () => {
        const loai = button.dataset.loai;
        const ngay = button.dataset.ngay;
        Swal.fire({
            icon: 'warning',
            title: 'Xác nhận xóa',
            text: `Bạn có chắc muốn xóa bản ghi ${loai} ngày ${ngay}?`,
            showCancelButton: true,
            confirmButtonText: 'Xóa',
            cancelButtonText: 'Hủy'
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch('/api/Attendance/DeleteRejectedRecord', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({ loai, ngay })
                    });
                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Thành công!',
                            text: 'Bản ghi đã được xóa.',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            loadRejectedRecords(); // Refresh the rejected records
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: result.message || 'Không thể xóa bản ghi.',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error deleting record:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Không thể xóa bản ghi: ' + error.message,
                        confirmButtonText: 'OK'
                    });
                }
            }
        });
    });
});
</script>

<!-- Flatpickr Month Select Plugin -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr@4.6.9/dist/plugins/monthSelect/index.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr@4.6.9/dist/plugins/monthSelect/style.css">