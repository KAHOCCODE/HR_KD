@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
@* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"> *@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<div id="attendanceSection" class="dashboard-card bg-white p-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-fingerprint me-2"></i> Chấm công</h5>

    <!-- Chọn ngày làm việc -->
    <div class="row mb-3">
      <div class="col-md-6">
            <label class="form-label">Chọn ngày làm việc</label>
            <input type="text" class="form-control date-range" id="attendanceDateRange" placeholder="Chọn ngày làm việc">
        </div>
        <div class="col-md-6">
             <div id="attendanceCalendar"></div>
         </div>
    </div>

    <!-- Hiển thị các ngày làm việc đã chọn -->
    <div class="mt-3">
        <label class="form-label">Các ngày làm việc đã chọn</label>
        <div id="selectedDates"></div>
    </div>

    <!-- Giờ làm việc -->
    <div class="row mt-3">
        <div class="col-md-6">
            <label class="form-label">Giờ check-in</label>
            <input type="time" class="form-control" id="checkInTime">
        </div>
        <div class="col-md-6">
            <label class="form-label">Giờ check-out</label>
            <input type="time" class="form-control" id="checkOutTime">
        </div>
    </div>

    <!-- Hiển thị tổng số giờ làm -->
    <div class="mt-3">
        <label class="form-label">Tổng số giờ làm trong tuần:</label>
        <input type="text" class="form-control w-50" id="weeklyHours" readonly>
    </div>

    <!-- Ghi chú -->
    <div class="mt-3">
        <label class="form-label">Ghi chú</label>
        <textarea class="form-control" id="attendanceNote" placeholder="Nhập ghi chú (nếu có)"></textarea>
    </div>
     
    <!-- Nút gửi dữ liệu -->
    <button class="btn btn-primary mt-3" id="submitAttendance">Chấm công</button>
<!-- Các nút để chuyển đổi bảng -->
<div class="btn-group" role="group" aria-label="Chọn bảng">
    <button type="button" class="btn btn-primary mt-3" id="showAttendanceRequests">Yêu cầu Chấm Công</button>

    <button type="button" class="btn btn-primary mt-3" id="showAttendance">Chấm Công</button>
</div>

<!-- Bảng Yêu Cầu Chấm Công -->
<table class="table mt-3" id="attendanceRequestsTable" ">
    <thead>
        <tr>
            <th>Ngày Làm Việc</th>
            <th>Giờ Vào Mới</th>
            <th>Giờ Ra Mới</th>
            <th>Lý Do</th>
            <th>Trạng Thái</th>
            <th>Hành Động</th>
        </tr>
    </thead>
    <tbody id="attendancerequestsTableBody">

    </tbody>
</table>

<!-- Bảng Chấm Công -->
<table class="table mt-3" id="attendanceTable" ">
    <thead>
        <tr>
            <th>Ngày làm việc</th>
            <th>Giờ vào</th>
            <th>Giờ ra</th>
            <th>Tổng giờ</th>
            <th>Trạng thái</th>
            <th>Ghi chú</th>
        </tr>
    </thead>
    <tbody id="attendanceTableBody">
        <!-- Dữ liệu chấm công sẽ được chèn vào đây -->
    </tbody>
</table>


</div>

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    // Khi bấm vào nút "Yêu cầu Chấm Công", hiển thị bảng yêu cầu chấm công và ẩn bảng chấm công
document.getElementById("showAttendanceRequests").addEventListener("click", function() {
    document.getElementById("attendanceRequestsTable").style.display = "block";  // Hiển thị bảng yêu cầu chấm công
    document.getElementById("attendanceTable").style.display = "none"; // Ẩn bảng chấm công
});

// Khi bấm vào nút "Chấm Công", hiển thị bảng chấm công và ẩn bảng yêu cầu chấm công
document.getElementById("showAttendance").addEventListener("click", function() {
    document.getElementById("attendanceTable").style.display = "block";  // Hiển thị bảng chấm công
    document.getElementById("attendanceRequestsTable").style.display = "none"; // Ẩn bảng yêu cầu chấm công
});

let selectedWorkDays = new Set();
let attendanceRecords = new Set(); // Chứa danh sách ngày đã chấm công
// Cấu hình Flatpickr
flatpickr("#attendanceDateRange", {
    mode: "multiple",
    dateFormat: "Y-m-d",
    disable: [
        function(date) {
             let today = new Date();
            today.setHours(0, 0, 0, 0);
            return date < today || date.getDay() === 0; // Chặn ngày trong quá khứ và Chủ Nhật
        }
    ],
    locale: {
        firstDayOfWeek: 1 // Đặt Thứ Hai là ngày đầu tuần
    },
    onClose: function(selectedDates) {
        selectedWorkDays = new Set(selectedDates.map(date => {
            let localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
            return localDate.toISOString().split('T')[0];
        }));

        document.getElementById("selectedDates").innerHTML = [...selectedWorkDays].join("<br>");
        updateTotalHours(); // Cập nhật tổng giờ làm
    }
});



// Xử lý gửi dữ liệu chấm công
document.getElementById("submitAttendance").addEventListener("click", function() {
    const checkIn = document.getElementById("checkInTime").value;
    const checkOut = document.getElementById("checkOutTime").value;
    const note = document.getElementById("attendanceNote").value.trim();

    if (selectedWorkDays.size === 0) {
        Swal.fire("Lỗi!", "Vui lòng chọn ít nhất một ngày làm việc.", "error");
        return;
    }
     if (!checkIn || !checkOut) {
        Swal.fire("Lỗi!", "Vui lòng nhập cả giờ check-in và check-out.", "error");
        return;
    }
    let attendanceData = [...selectedWorkDays].map(day => ({
        
        NgayLamViec: day,
        GioVao: checkIn || null,
        GioRa: checkOut || null,
        TongGio: calculateDailyHours(checkIn, checkOut),
        TrangThai: "Chờ duyệt",
        GhiChu: note || null
    }));

    // Ghi log dữ liệu trước khi gửi
    console.log("Dữ liệu gửi đi:", JSON.stringify(attendanceData, null, 2));

    fetch('/api/Attendance/SubmitAttendance', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(attendanceData)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            Swal.fire("Thành công!", "Chấm công đã được ghi nhận.", "success").then(() => {
                resetForm(); // Reset form sau khi gửi thành công
            });
        } else {
            Swal.fire("Lỗi!", "Có lỗi xảy ra khi chấm công.", "error");
        }
    })
    .catch(error => {
        Swal.fire("Lỗi!", "Không thể kết nối đến server.", "error");
    });
});

// Hàm tính số giờ làm
function calculateDailyHours(checkIn, checkOut) {
    if (checkIn && checkOut) {
        const checkInTime = new Date(`2000-01-01T${checkIn}:00`);
        const checkOutTime = new Date(`2000-01-01T${checkOut}:00`);

        if (checkOutTime > checkInTime) {
            return parseFloat(((checkOutTime - checkInTime) / (1000 * 60 * 60)).toFixed(2));
        }
    }
    return 0.00;
}

// Hàm cập nhật tổng số giờ làm
function updateTotalHours() {
    let checkIn = document.getElementById("checkInTime").value;
    let checkOut = document.getElementById("checkOutTime").value;

    let totalHours = [...selectedWorkDays].reduce((sum, day) => {
        return sum + calculateDailyHours(checkIn, checkOut);
    }, 0);

    document.getElementById("weeklyHours").value = totalHours.toFixed(2);
}

// Hàm reset form sau khi gửi thành công
function resetForm() {
    document.getElementById("attendanceDateRange").value = "";
    document.getElementById("selectedDates").innerHTML = "";
    document.getElementById("checkInTime").value = "";
    document.getElementById("checkOutTime").value = "";
    document.getElementById("attendanceNote").value = "";
    selectedWorkDays.clear();
    updateTotalHours(); // Cập nhật lại tổng số giờ làm về 0
    // fetchAttendanceRecords(); // Reload lại bảng chấm công
    // fetchAttendanceRequestsRecords(); // Reload lại bảng yêu cầu chấm công
}

// Lắng nghe thay đổi giờ check-in/check-out để cập nhật tổng giờ làm
document.getElementById("checkInTime").addEventListener("change", updateTotalHours);
document.getElementById("checkOutTime").addEventListener("change", updateTotalHours);

// Gọi API để lấy danh sách chấm công
function fetchAttendanceRecords() {
    fetch('/api/Attendance/GetAttendanceRecords')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderAttendanceTable(data.records);
            } else {
                console.error("Lỗi lấy dữ liệu chấm công.");
            }
        })
        .catch(error => console.error("Lỗi kết nối API:", error));
}

// Hiển thị bảng chấm công
function renderAttendanceTable(records) {
    let tableBody = document.getElementById("attendanceTableBody");
    tableBody.innerHTML = "";

    records.forEach(record => {
        let row = `<tr>
            <td>${record.ngayLamViec}</td>
            <td>${record.gioVao || "-"}</td>
            <td>${record.gioRa || "-"}</td>
            <td>${record.tongGio}</td>
            <td>${record.trangThai || "-"}</td>
            <td>${record.ghiChu || "-"}</td>
        </tr>`;
        tableBody.innerHTML += row;
    });
}

// Gọi API để lấy danh sách yêu cầu chỉnh sửa chấm công
function fetchAttendanceRequestsRecords() {
    fetch('/api/Attendance/GetAttendanceRequests')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderAttendanceRequestsTable(data.records);
            } else {
                console.error("Lỗi lấy dữ liệu yêu cầu chấm công.");
            }
        })
        .catch(error => console.error("Lỗi kết nối API:", error));
}

// Hiển thị bảng yêu cầu chỉnh sửa chấm công
function renderAttendanceRequestsTable(records) {
    let tableBody = document.getElementById("attendancerequestsTableBody");
    tableBody.innerHTML = "";

    records.forEach(record => { 
        let row = `<tr>
            <td>${record.ngayLamViec}</td>
            <td>${record.gioVaoMoi ?? '-'}</td>
            <td>${record.gioRaMoi ?? '-'}</td>
            <td>${record.lyDo || "-"}</td>
            <td>${record.trangThai || "-"}</td>
            <td>
                <button class="btn btn-success" , true)">Chấp nhận</button>
                <button class="btn btn-danger" , false)">Từ chối</button>
            </td>
        </tr>`;
        tableBody.innerHTML += row;
    });
}


document.addEventListener("DOMContentLoaded", function() {
    let calendarEl = document.getElementById("attendanceCalendar");
    let calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: "dayGridMonth",
        locale: "vi",
        events: fetchCalendarEvents
    });
    calendar.render();
});

// Lấy dữ liệu lịch từ API
function fetchCalendarEvents(fetchInfo, successCallback, failureCallback) {
    fetch(`/api/Attendance/GetAttendanceRecords`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                let events = data.records.map(record => {
                    let status = record.trangThai ? record.trangThai.trim().toLowerCase() : "";
                    let eventTitle = "Đã duyệt";
                    let eventColor = "green";

                    if (status === "yêu cầu chấm công") {
                        eventTitle = "Yêu cầu chấm công";
                        eventColor = "yellow";
                    } else if (status === "chờ duyệt") {
                        eventTitle = "Chưa duyệt";
                        eventColor = "blue";
                    }

                    return {
                        title: eventTitle,
                        start: record.ngayLamViec,
                        color: eventColor
                    };
                });

                successCallback(events);
            } else {
                failureCallback(new Error(data.message || "Không thể lấy dữ liệu"));
            }
        })
        .catch(error => failureCallback(error));
}


// Gọi API khi trang tải xong
document.addEventListener("DOMContentLoaded", function() {
    fetchAttendanceRecords();
    fetchAttendanceRequestsRecords();
});

</script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
@* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"> *@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css">
