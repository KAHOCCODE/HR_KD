@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="~/css/attend.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css">

<div id="attendanceSection" class="dashboard-card bg-white p-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-fingerprint me-2"></i> Chấm công</h5>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="form-group">
                <label for="attendanceDateRange" class="form-label">Chọn ngày làm việc</label>
                <input type="text" class="form-control date-range" id="attendanceDateRange" placeholder="Chọn ngày làm việc">
            </div>
        </div>
        <div class="col-md-6">
            <div id="attendanceCalendar"></div>
        </div>
    </div>
    <button id="resetCalendarBtn" class="btn btn-secondary mb-3">Làm mới lịch</button>

    <div class="mt-3">
        <h6>Ngày làm việc đã chọn:</h6>
        <ul id="selectedWorkDaysList" class="list-inline"></ul>
    </div>

    <div class="row mt-3">
        <div class="col-md-6">
            <div class="form-group">
                <label for="checkInTime" class="form-label">Giờ check-in</label>
                <input type="time" class="form-control" id="checkInTime">
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label for="checkOutTime" class="form-label">Giờ check-out</label>
                <div class="d-flex">
                    <input type="time" class="form-control me-2" id="checkOutTime">
                    <button class="btn btn-outline-secondary me-2" id="set8hBtn" title="Tự động điền giờ làm từ 8h đến 18h">8h</button>
                    <button class="btn btn-outline-secondary me-2" id="set8hPlus1Btn" title="Tự động điền giờ làm 8h + 1h tăng ca">8 + 1</button>
                    <button class="btn btn-outline-secondary me-2" id="set8hPlus2Btn" title="Tự động điền giờ làm 8h + 2h tăng ca">8 + 2</button>
                    <button class="btn btn-outline-secondary me-2" id="set8hPlus3Btn" title="Tự động điền giờ làm 8h + 3h tăng ca">8 + 3</button>
                    <button class="btn btn-outline-secondary" id="set8hPlus4Btn" title="Tự động điền giờ làm 8h + 4h tăng ca">8 + 4</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-6">
            <div class="form-group">
                <label for="checkInOTTime" class="form-label">Giờ vào tăng ca (nếu có)</label>
                <input type="time" class="form-control" id="checkInOTTime">
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label for="checkOutOTTime" class="form-label">Giờ ra tăng ca (nếu có)</label>
                <input type="time" class="form-control" id="checkOutOTTime">
            </div>
        </div>
    </div>

    <div class="mt-3">
        <h6>Tổng thời gian làm việc:</h6>
        <span id="totalWorkingHours" class="badge bg-info">0.00 giờ</span>
    </div>

    <div class="mb-3">
        <label for="attendanceNote" class="form-label">Ghi chú</label>
        <textarea class="form-control" id="attendanceNote" rows="3"></textarea>
    </div>

    <button class="btn btn-primary mt-3" id="submitAttendance">Chấm công</button>
</div>

<div class="mt-5">
    <h2>Bảng Yêu cầu chấm công từ quản lý</h2>
    <div class="table-responsive">
        <table class="table table-bordered" id="attendanceRequestsTable">
            <thead class="thead-light">
                <tr>
                    <th>Ngày Làm Việc</th>
                    <th>Giờ Vào Mới</th>
                    <th>Giờ Ra Mới</th>
                    <th>Tổng giờ</th>
                    <th>Tổng thời gian làm việc</th>
                    <th>Lý Do</th>
                    <th>Hành Động</th>
                </tr>
            </thead>
            <tbody id="attendanceTableBody2"></tbody>
        </table>
    </div>
</div>

<div class="mt-5">
    <h2>Bảng chấm công đã duyệt</h2>
    <div class="table-responsive">
        <table class="table table-bordered" id="attendanceTable">
            <thead class="thead-light">
                <tr>
                    <th>Ngày làm việc</th>
                    <th>Giờ vào</th>
                    <th>Giờ ra</th>
                    <th>Tổng giờ</th>
                    <th>Tổng thời gian làm việc</th>
                    <th>Trạng thái</th>
                    <th>Ghi chú</th>
                </tr>
            </thead>
            <tbody id="attendanceTableBody"></tbody>
        </table>
    </div>
</div>

<div class="mt-5">
    <h2>Bảng lịch sử chấm công</h2>
    <div class="table-responsive">
        <table class="table table-bordered" id="attendanceTableHistory">
            <thead class="thead-light">
                <tr>
                    <th>Ngày làm việc</th>
                    <th>Giờ vào</th>
                    <th>Giờ ra</th>
                    <th>Tổng giờ</th>
                    <th>Tổng thời gian làm việc</th>
                    <th>Trạng thái</th>
                    <th>Ghi chú</th>
                </tr>
            </thead>
            <tbody id="attendanceTableBodyHistory"></tbody>
        </table>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>
<script>
    const checkInTimeInput = document.getElementById("checkInTime");
    const checkOutTimeInput = document.getElementById("checkOutTime");
    const checkInOTTimeInput = document.getElementById("checkInOTTime");
    const checkOutOTTimeInput = document.getElementById("checkOutOTTime");
    const attendanceDateRangeInput = document.getElementById("attendanceDateRange");
    const selectedWorkDaysListElement = document.getElementById("selectedWorkDaysList");
    const attendanceNoteTextarea = document.getElementById("attendanceNote");
    const totalWorkingHoursElement = document.getElementById("totalWorkingHours");
    const attendanceRequestsTableBody = document.getElementById("attendanceTableBody2");
    const attendanceTableBody = document.getElementById("attendanceTableBody");
    const attendanceTableBodyHistory = document.getElementById("attendanceTableBodyHistory");

    let selectedWorkDays = [];
    let calendar;

    // --- Date and Time Functions ---

    function formatDate(date) {
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    }

    // Format date to YYYY-MM-DD in local timezone
    function formatDateToYMD(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    // Calculate hours between two times
    function calculateHours(startTime, endTime) {
        if (!startTime || !endTime) return 0.00;
        const start = new Date(`2000-01-01T${startTime}:00`);
        const end = new Date(`2000-01-01T${endTime}:00`);
        let hours = (end - start) / (1000 * 60 * 60);
        return parseFloat(hours.toFixed(2));
    }

    // Calculate daily working hours (subtract 2-hour lunch if applicable)
    function calculateDailyHours(checkIn, checkOut) {
        let hours = calculateHours(checkIn, checkOut);
        if (hours >= 10) hours -= 2; // Subtract 2-hour lunch break for shifts 8:00–18:00 or longer
        return hours;
    }

    // Calculate overtime hours
    function calculateOvertimeHours(checkInOT, checkOutOT) {
        return calculateHours(checkInOT, checkOutOT);
    }

    // Calculate total working hours for one day (official + overtime)
    function calculateTotalWorkingHours() {
        const officialHours = calculateDailyHours(checkInTimeInput.value, checkOutTimeInput.value);
        const overtimeHours = calculateOvertimeHours(checkInOTTimeInput.value, checkOutOTTimeInput.value);
        return officialHours + overtimeHours;
    }

    // Update total working hours display for all selected days
    function updateTotalWorkingHoursDisplay() {
        const dailyTotalHours = calculateTotalWorkingHours();
        const totalHours = dailyTotalHours * selectedWorkDays.length;
        totalWorkingHoursElement.textContent = `${totalHours.toFixed(2)} giờ`;
    }

    // --- Validation Functions ---

    // Validate daily working hours
    function validateDailyHours(officialWorkingHoursInDay, overtimeHoursInDay) {
        const workingHoursInDay = officialWorkingHoursInDay + overtimeHoursInDay;
        if (workingHoursInDay > 12) {
            throw Error("Quá số giờ làm tối đa 1 ngày");
        }
        if (officialWorkingHoursInDay > 8) {
            throw Error("Vượt giờ làm chính thức trong ngày");
        }
        if (overtimeHoursInDay > 4) {
            throw Error("Quá số giờ tăng ca tối đa 1 ngày");
        }
    }

    // Get the start and end of the week for a given date
    function getWeekRange(date) {
        console.log("Input date to getWeekRange:", date); // Debug log
        const inputDate = new Date(date);
        if (isNaN(inputDate)) {
            throw new Error("Ngày không hợp lệ");
        }
        const dayOfWeek = inputDate.getDay();
        const offsetToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
        const start = new Date(inputDate);
        start.setDate(inputDate.getDate() + offsetToMonday); // Set to Monday
        const end = new Date(start);
        end.setDate(start.getDate() + 6); // Set to Sunday
        console.log("Week range:", { start, end }); // Debug log
        return { start, end };
    }

    // Get the start and end of the month for a given date
    function getMonthRange(date) {
        const start = new Date(date.getFullYear(), date.getMonth(), 1);
        const end = new Date(date.getFullYear(), date.getMonth() + 1, 0);
        return { start, end };
    }

    // Check weekly hours and overtime restrictions
    async function restrictAttendanceAndOvertime(selectedDate, officialHours, overtimeHours) {
        try {
            console.log("Checking restrictions for date:", selectedDate); // Debug log
            const selectedDateObj = new Date(selectedDate);
            const { start, end } = getWeekRange(selectedDateObj);

            // Fetch attendance history for the week
            const attendanceResponse = await fetch('/api/Attendance/GetAttendanceHistoryRecords');
            const attendanceData = await attendanceResponse.json();
            if (!attendanceData.success) {
                throw new Error("Không thể lấy dữ liệu lịch sử chấm công.");
            }

            // Fetch overtime records for the week
            const overtimeResponse = await fetch('/api/Attendance/GetOvertimeRecords');
            const overtimeData = await overtimeResponse.json();
            if (!overtimeData.success) {
                throw new Error("Không thể lấy dữ liệu tăng ca.");
            }

            let totalWorkingHoursInWeek = 0;
            let totalOvertimeHoursInWeek = 0;

            // Sum attendance hours for the week
            attendanceData.records.forEach(record => {
                const recordDate = new Date(record.Ngay);
                if (recordDate >= start && recordDate <= end) {
                    totalWorkingHoursInWeek += record.TongGio || 0;
                }
            });

            // Sum overtime hours for the week
            overtimeData.records.forEach(record => {
                const recordDate = new Date(record.NgayTangCa);
                if (recordDate >= start && recordDate <= end) {
                    totalOvertimeHoursInWeek += record.SoGioTangCa || 0;
                }
            });

            // Check if adding new attendance hours exceeds 48 hours
            if (officialHours > 0 && totalWorkingHoursInWeek >= 48) {
                throw new Error("Đã đủ 48 giờ làm việc trong tuần, không thể chấm công thêm.");
            }

            // Check if adding new overtime hours exceeds 12 hours
            if (overtimeHours > 0 && totalOvertimeHoursInWeek >= 12) {
                throw new Error("Đã đủ 12 giờ tăng ca trong tuần, không thể tăng ca thêm.");
            }

            return true; // Allow submission if checks pass
        } catch (error) {
            throw error;
        }
    }

    // Fetch and validate weekly hours
    async function validateWeeklyHours(newAttendanceData, officialHours, overtimeHours) {
        try {
            const response = await fetch('/api/Attendance/GetAttendanceRecords');
            const data = await response.json();
            if (!data.success) {
                throw new Error("Không thể lấy dữ liệu chấm công.");
            }

            // Group selected days by week
            const weeks = {};
            newAttendanceData.forEach(entry => {
                const entryDate = new Date(entry.NgayLamViec);
                const { start } = getWeekRange(entryDate);
                const weekKey = start.toISOString().split('T')[0];
                if (!weeks[weekKey]) {
                    weeks[weekKey] = { days: [], totalWorkingHoursInWeek: 0 };
                }
                weeks[weekKey].days.push(entry);
                weeks[weekKey].totalWorkingHoursInWeek += officialHours + overtimeHours;
            });

            // Add existing records to weekly totals
            data.records.forEach(record => {
                const recordDate = new Date(record.ngayLamViec);
                const { start } = getWeekRange(recordDate);
                const weekKey = start.toISOString().split('T')[0];
                if (weeks[weekKey]) {
                    weeks[weekKey].totalWorkingHoursInWeek += (record.tongGio || 0) + (record.soGioTangCa || 0);
                }
            });

            // Check each week for the 60-hour limit
            for (const weekKey in weeks) {
                if (weeks[weekKey].totalWorkingHoursInWeek > 60) {
                    throw Error("Quá tổng số giờ làm việc trong tuần");
                }
            }
        } catch (error) {
            throw error;
        }
    }

    // Fetch and validate monthly overtime hours
    async function validateMonthlyOvertimeHours(newOvertimeData) {
        if (newOvertimeData.length === 0) return;
        try {
            const response = await fetch('/api/Attendance/GetOvertimeRecords');
            const data = await response.json();
            if (!data.success) {
                throw new Error("Không thể lấy dữ liệu tăng ca.");
            }

            for (const entry of newOvertimeData) {
                const entryDate = new Date(entry.NgayTangCa);
                const { start, end } = getMonthRange(entryDate);
                let totalOvertimeHoursInMonth = entry.SoGioTangCa;

                // Sum existing overtime records for the month
                data.records.forEach(record => {
                    const recordDate = new Date(record.NgayTangCa);
                    if (recordDate >= start && recordDate <= end) {
                        totalOvertimeHoursInMonth += record.SoGioTangCa || 0;
                    }
                });

                if (totalOvertimeHoursInMonth > 48) {
                    throw Error("Quá tổng số giờ tăng ca trong tháng");
                }
            }
        } catch (error) {
            throw error;
        }
    }

    // --- DOM Manipulation ---

    // Update the displayed list of selected work days
    function updateSelectedWorkDaysList() {
        selectedWorkDaysListElement.innerHTML = selectedWorkDays
            .map(day => {
                const date = new Date(day);
                return `<span class="badge bg-primary me-1">${formatDate(date)}</span>`;
            })
            .join("");
        updateTotalWorkingHoursDisplay();
    }

    // Reset the attendance form
    function resetAttendanceForm() {
        attendanceDateRangeInput.value = "";
        checkInTimeInput.value = "";
        checkOutTimeInput.value = "";
        checkInOTTimeInput.value = "";
        checkOutOTTimeInput.value = "";
        attendanceNoteTextarea.value = "";
        selectedWorkDays = [];
        updateSelectedWorkDaysList();
        updateTotalWorkingHoursDisplay();
    }

    // --- Event Handlers ---

    // Set time presets
    document.getElementById("set8hBtn").addEventListener("click", () => {
        checkInTimeInput.value = "08:00";
        checkOutTimeInput.value = "18:00";
        checkInOTTimeInput.value = "";
        checkOutOTTimeInput.value = "";
        updateTotalWorkingHoursDisplay();
    });

    document.getElementById("set8hPlus1Btn").addEventListener("click", () => {
        checkInTimeInput.value = "08:00";
        checkOutTimeInput.value = "18:00";
        checkInOTTimeInput.value = "18:00";
        checkOutOTTimeInput.value = "19:00";
        updateTotalWorkingHoursDisplay();
    });

    document.getElementById("set8hPlus2Btn").addEventListener("click", () => {
        checkInTimeInput.value = "08:00";
        checkOutTimeInput.value = "18:00";
        checkInOTTimeInput.value = "18:00";
        checkOutOTTimeInput.value = "20:00";
        updateTotalWorkingHoursDisplay();
    });

    document.getElementById("set8hPlus3Btn").addEventListener("click", () => {
        checkInTimeInput.value = "08:00";
        checkOutTimeInput.value = "18:00";
        checkInOTTimeInput.value = "18:00";
        checkOutOTTimeInput.value = "21:00";
        updateTotalWorkingHoursDisplay();
    });

    document.getElementById("set8hPlus4Btn").addEventListener("click", () => {
        checkInTimeInput.value = "08:00";
        checkOutTimeInput.value = "18:00";
        checkInOTTimeInput.value = "18:00";
        checkOutOTTimeInput.value = "22:00";
        updateTotalWorkingHoursDisplay();
    });

    // Update total working hours on time input changes
    [checkInTimeInput, checkOutTimeInput, checkInOTTimeInput, checkOutOTTimeInput].forEach(input => {
        input.addEventListener("change", updateTotalWorkingHoursDisplay);
    });

    // Handle date range selection
    flatpickr("#attendanceDateRange", {
        mode: "range",
        dateFormat: "d/m/Y",
        weekNumbers: true,
        locale: {
            firstDayOfWeek: 1 // Monday
        },
        disable: [date => date.getDay() === 0], // Disable Sundays
        onClose: handleDateRangeClose
    });

    function handleDateRangeClose(selectedDates) {
        console.log("Selected dates from Flatpickr:", selectedDates); // Debug log
        selectedWorkDays = [];

        if (selectedDates.length === 2) {
            let currentDate = new Date(selectedDates[0]);
            const endDate = new Date(selectedDates[1]);

            while (currentDate <= endDate) {
                if (currentDate.getDay() >= 1 && currentDate.getDay() <= 6) {
                    selectedWorkDays.push(formatDateToYMD(currentDate));
                }
                // Increment date in local timezone
                currentDate.setDate(currentDate.getDate() + 1);
            }
            updateSelectedWorkDaysList();

        } else if (selectedDates.length === 1) {
            const selectedDate = selectedDates[0];
            const dayOfWeek = selectedDate.getDay();

            if (dayOfWeek !== 0) {
                const startOfWeek = new Date(selectedDate);
                startOfWeek.setDate(selectedDate.getDate() - dayOfWeek + 1);
                const endOfWeek = new Date(startOfWeek);
                endOfWeek.setDate(startOfWeek.getDate() + 6);

                let currentDate = new Date(startOfWeek);
                while (currentDate <= endOfWeek) {
                    if (currentDate.getDay() >= 1 && currentDate.getDay() <= 6) {
                        selectedWorkDays.push(formatDateToYMD(currentDate));
                    }
                    currentDate.setDate(currentDate.getDate() + 1);
                }
                updateSelectedWorkDaysList();
                this.clear();
            } else {
                this.clear();
                Swal.fire("Thông báo", "Không thể chọn Chủ Nhật.", "warning");
            }
        }
    }

    // Submit attendance data with validations
    document.getElementById("submitAttendance").addEventListener("click", async () => {
        try {
            if (selectedWorkDays.length === 0) {
                Swal.fire("Lỗi!", "Vui lòng chọn ít nhất một ngày làm việc.", "error");
                return;
            }

            if (!checkInTimeInput.value || !checkOutTimeInput.value) {
                Swal.fire("Lỗi!", "Vui lòng nhập cả giờ check-in và check-out.", "error");
                return;
            }

            const officialWorkingHoursInDay = calculateDailyHours(checkInTimeInput.value, checkOutTimeInput.value);
            const overtimeHoursInDay = calculateOvertimeHours(checkInOTTimeInput.value, checkOutOTTimeInput.value);

            // Validate daily constraints
            validateDailyHours(officialWorkingHoursInDay, overtimeHoursInDay);

            // Check weekly attendance and overtime restrictions
            await restrictAttendanceAndOvertime(selectedWorkDays[0], officialWorkingHoursInDay, overtimeHoursInDay);

            const attendanceData = selectedWorkDays.map(day => ({
                NgayLamViec: day,
                GioVao: checkInTimeInput.value || null,
                GioRa: checkOutTimeInput.value || null,
                TongGio: officialWorkingHoursInDay,
                TrangThai: "Chờ duyệt",
                GhiChu: attendanceNoteTextarea.value.trim() || null
            }));

            const overtimeData = selectedWorkDays.map(day => ({
                NgayTangCa: day,
                GioVaoTangCa: checkInOTTimeInput.value || null,
                GioRaTangCa: checkOutOTTimeInput.value || null,
                SoGioTangCa: overtimeHoursInDay,
            })).filter(item => item.SoGioTangCa > 0);

            // Validate weekly and monthly constraints
            await validateWeeklyHours(attendanceData, officialWorkingHoursInDay, overtimeHoursInDay);
            await validateMonthlyOvertimeHours(overtimeData);

            // Submit data if all validations pass
            await submitAttendanceData(attendanceData, overtimeData);
        } catch (error) {
            Swal.fire("Lỗi!", error.message, "error");
        }
    });

    // --- AJAX Functions ---

    // Submit attendance data to the server
    async function submitAttendanceData(attendanceData, overtimeData) {
        try {
            const response = await fetch('/api/Attendance/SubmitAttendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ attendance: attendanceData, overtime: overtimeData })
            });

            const result = await response.json();

            if (response.ok && result.success) {
                Swal.fire("Thành công!", result.message || "Chấm công đã được ghi nhận.", "success").then(resetAttendanceForm);
            } else {
                showApiError(result);
            }
        } catch (error) {
            showApiError({ message: "Không thể kết nối đến server.", error: error.message });
        }
    }

    // Fetch attendance records
    async function fetchAttendanceRecords() {
        try {
            const response = await fetch('/api/Attendance/GetAttendanceRecords');
            const data = await response.json();

            if (data.success) {
                renderAttendanceTable(data.records);
            } else {
                console.error("Lỗi lấy dữ liệu chấm công:", data.message);
            }
        } catch (error) {
            console.error("Lỗi kết nối API:", error.message);
        }
    }

    // Fetch attendance request records
    async function fetchAttendanceRequests() {
        try {
            const response = await fetch('/api/Attendance/GetAttendanceRequests');
            const data = await response.json();

            if (data.success) {
                renderAttendanceRequestsTable(data.requests);
            } else {
                console.error("Lỗi lấy dữ liệu yêu cầu chấm công:", data.message);
            }
        } catch (error) {
            console.error("Lỗi kết nối API:", error.message);
        }
    }

    // Fetch attendance history records
    async function fetchAttendanceHistory() {
        try {
            const response = await fetch('/api/Attendance/GetAttendanceHistoryRecords');
            const data = await response.json();

            if (data.success) {
                renderAttendanceHistoryTable(data.records);
            } else {
                console.error("Lỗi lấy dữ liệu lịch sử chấm công:", data.message);
            }
        } catch (error) {
            console.error("Lỗi kết nối API:", error.message);
        }
    }

    // Accept an attendance request
    async function acceptAttendanceRequest(requestId, ngayLamViec, gioVaoMoi, gioRaMoi) {
        try {
            const tongGio = calculateDailyHours(gioVaoMoi, gioRaMoi);
            const requestData = [{
                NgayLamViec: ngayLamViec,
                GioVao: gioVaoMoi,
                GioRa: gioRaMoi,
                TongGio: tongGio,
                TrangThai: 'Đã duyệt',
                GhiChu: 'Chấp nhận yêu cầu chấm công',
                MaYeuCau: requestId
            }];

            const response = await fetch('/api/Attendance/SubmitAttendance', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestData)
            });

            const result = await response.json();

            if (response.ok && result.success) {
                Swal.fire("Thành công!", result.message || "Chấm công đã được ghi nhận.", "success").then(() => {
                    resetAttendanceForm();
                    fetchAttendanceRecords();
                    fetchAttendanceRequests();
                    fetchAttendanceHistory();
                });
            } else {
                showApiError(result);
            }
        } catch (error) {
            showApiError({ message: "Không thể kết nối đến server.", error: error.message });
        }
    }

    // Reject an attendance request
    async function rejectAttendanceRequest(event, requestId) {
        try {
            const response = await fetch("/api/Leave/GetLeaveTypes");
            const result = await response.json();

            if (result && result.success && Array.isArray(result.leaveTypes)) {
                const leaveTypeOptions = result.leaveTypes
                    .map(leaveType => `<option value="${leaveType.maLoaiNgayNghi}">${leaveType.tenLoai}</option>`)
                    .join("");

                const row = event.target.closest('tr');
                if (!row) {
                    console.error("Không tìm thấy hàng chứa dữ liệu!");
                    return;
                }

                const ngayLamViec = row.cells[0]?.textContent.trim() || "";

                if (!ngayLamViec) {
                    console.error("Không lấy được NgayLamViec!");
                    Swal.fire("Lỗi!", "Không tìm thấy ngày làm việc.", "error");
                    return;
                }

                const { value: rejectionData, isConfirmed } = await Swal.fire({
                    title: "Xác nhận từ chối?",
                    html: `
                        <select id="leaveTypeSelect" class="swal2-select">
                            <option value="">Chọn loại nghỉ</option>
                            ${leaveTypeOptions}
                        </select>
                        <input type="text" id="rejectReason" class="swal2-input" placeholder="Nhập lý do từ chối (nếu có)">
                    `,
                    showCancelButton: true,
                    confirmButtonText: "Từ chối",
                    cancelButtonText: "Hủy",
                    preConfirm: () => {
                        const leaveType = document.getElementById("leaveTypeSelect").value;
                        const reason = document.getElementById("rejectReason").value.trim();

                        if (!leaveType) {
                            Swal.showValidationMessage("Vui lòng chọn loại nghỉ!");
                            return false;
                        }

                        return { leaveType, reason };
                    }
                });

                if (isConfirmed) {
                    await sendRejection(requestId, rejectionData.leaveType, rejectionData.reason, ngayLamViec);
                }
            } else {
                console.error("Lỗi dữ liệu từ API:", result);
                Swal.fire("Lỗi!", "Dữ liệu không hợp lệ.", "error");
            }
        } catch (error) {
            console.error("Lỗi hệ thống:", error);
            Swal.fire("Lỗi!", "Lỗi hệ thống. Vui lòng thử lại sau.", "error");
        }
    }

    // Send the rejection request to the server
    async function sendRejection(requestId, leaveType, reason, ngayLamViec) {
        try {
            if (!ngayLamViec) {
                console.error("Lỗi: Ngày làm việc không hợp lệ.");
                Swal.fire("Lỗi!", "Không tìm thấy ngày làm việc.", "error");
                return;
            }

            const bodyData = {
                MaYeuCau: requestId,
                MaLoaiNgayNghi: leaveType,
                LyDo: reason,
                NgayLamViec: ngayLamViec
            };

            const response = await fetch("/api/Attendance/RejectAttendanceRequest", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(bodyData)
            });

            if (!response.ok) {
                throw new Error('Không thể từ chối yêu cầu.');
            }

            const result = await response.json();
            if (result.success) {
                Swal.fire("Thành công!", "Yêu cầu đã bị từ chối.", "success");
                fetchAttendanceRequests();
            } else {
                Swal.fire("Lỗi!", result.message || "Không thể từ chối yêu cầu.", "error");
            }
        } catch (error) {
            console.error("Lỗi khi gửi từ chối:", error);
            Swal.fire("Lỗi!", "Đã xảy ra lỗi khi gửi dữ liệu.", "error");
        }
    }

    // --- Rendering Functions ---

    // Render the attendance requests table
    function renderAttendanceRequestsTable(requests) {
        attendanceRequestsTableBody.innerHTML = "";

        requests.forEach(request => {
            const gioVaoMoi = request.gioVaoMoi ?? '-';
            const gioRaMoi = request.gioRaMoi ?? '-';
            const dailyHours = calculateDailyHours(gioVaoMoi, gioRaMoi);
            const totalWorkingHours = dailyHours + (request.soGioTangCa || 0);
            const row = `
                <tr>
                    <td>${request.ngayLamViec}</td>
                    <td>${gioVaoMoi}</td>
                    <td>${gioRaMoi}</td>
                    <td>${dailyHours.toFixed(2)}</td>
                    <td>${totalWorkingHours.toFixed(2)}</td>
                    <td>${request.lyDo || "-"}</td>
                    <td>
                        <button class="btn btn-success btn-sm" onclick="acceptAttendanceRequest(${request.maYeuCau}, '${request.ngayLamViec}', '${gioVaoMoi}', '${gioRaMoi}')">Chấp nhận</button>
                        <button class="btn btn-danger btn-sm" onclick="rejectAttendanceRequest(event, ${request.maYeuCau})">Từ chối</button>
                    </td>
                </tr>
            `;
            attendanceRequestsTableBody.innerHTML += row;
        });
    }

    // Render the attendance table
    function renderAttendanceTable(records) {
        attendanceTableBody.innerHTML = "";
        records.forEach(record => {
            const totalWorkingHours = (record.tongGio || 0) + (record.soGioTangCa || 0);
            const row = `
                <tr>
                    <td>${record.ngayLamViec}</td>
                    <td>${record.gioVao || "-"}</td>
                    <td>${record.gioRa || "-"}</td>
                    <td>${record.tongGio || 0}</td>
                    <td>${totalWorkingHours.toFixed(2)}</td>
                    <td>${record.trangThai || "-"}</td>
                    <td>${record.ghiChu || "-"}</td>
                </tr>
            `;
            attendanceTableBody.innerHTML += row;
        });
    }

    // Render the attendance history table
    function renderAttendanceHistoryTable(records) {
        attendanceTableBodyHistory.innerHTML = "";
        records.forEach(record => {
            const totalWorkingHours = (record.tongGio || 0) + (record.soGioTangCa || 0);
            const row = `
                <tr>
                    <td>${record.ngay}</td>
                    <td>${record.gioVao || "-"}</td>
                    <td>${record.gioRa || "-"}</td>
                    <td>${record.tongGio || 0}</td>
                    <td>${totalWorkingHours.toFixed(2)}</td>
                    <td>${record.trangThai || "-"}</td>
                    <td>${record.ghiChu || "-"}</td>
                </tr>
            `;
            attendanceTableBodyHistory.innerHTML += row;
        });
    }

    // --- Calendar ---

    // Initialize the FullCalendar
    function initializeCalendar() {
        const calendarEl = document.getElementById("attendanceCalendar");
        calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: "dayGridMonth",
            locale: "vi",
            events: fetchCalendarEvents
        });
        calendar.render();
    }

    // Fetch events for the FullCalendar
    function fetchCalendarEvents(fetchInfo, successCallback, failureCallback) {
        Promise.all([
            fetch('/api/Attendance/GetAttendanceRecords').then(res => res.json()),
            fetch('/api/Leave/GetLeaveHistory').then(res => res.json()),
            fetch('/api/Attendance/GetAttendanceHistoryRecords2').then(res => res.json())
        ])
        .then(([attendanceData, leaveData, pendingData]) => {
            let events = [];

            if (attendanceData.success) {
                const greenEvents = attendanceData.records.map(record => ({
                    title: "Đã duyệt",
                    start: record.ngayLamViec,
                    color: "green"
                }));
                events.push(...greenEvents);
            }

            if (leaveData.success) {
                const yellowEvents = leaveData.leaveHistory.map(record => ({
                    title: "Ngày nghỉ",
                    start: record.ngayNghi,
                    color: "Teal"
                }));
                events.push(...yellowEvents);
            }

            if (pendingData.success) {
                const blueEvents = pendingData.records.map(record => ({
                    title: "Chưa duyệt",
                    start: record.ngay,
                    color: "blue"
                }));
                events.push(...blueEvents);
            }

            successCallback(events);
        })
        .catch(error => {
            failureCallback(error);
        });
    }

    // Reset the calendar (refetch events)
    document.getElementById("resetCalendarBtn").addEventListener("click", () => {
        if (calendar) {
            calendar.refetchEvents();
        }
    });

    // --- Error Handling ---

    // Display API errors using SweetAlert2
    function showApiError(result, fallbackMessage = "Có lỗi xảy ra.") {
        const errorMessage = `<strong>${result.message || fallbackMessage}</strong>`;
        Swal.fire({
            icon: 'error',
            title: 'Lỗi!',
            html: errorMessage,
            customClass: { popup: 'swal-wide' }
        });
    }

    // --- Initialization ---

    document.addEventListener("DOMContentLoaded", () => {
        initializeCalendar();
        fetchAttendanceRecords();
        fetchAttendanceRequests();
        fetchAttendanceHistory();
        updateTotalWorkingHoursDisplay(); // Initialize total working hours display
    });
</script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css">