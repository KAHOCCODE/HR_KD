
@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
    var maNv = User.Claims.FirstOrDefault(c => c.Type == "MaNV")?.Value;
    if (string.IsNullOrEmpty(maNv))
    {
                        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
                        <script>
                            Swal.fire({
                                icon: 'error',
                                title: 'Lỗi!',
                                text: 'Không tìm thấy mã nhân viên. Vui lòng đăng nhập lại.',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = '/Account/Login'; 
                                }
                            });
                        </script>
        return;
    }
}
<style>
    div.select-box {
        display: none;
    }
</style>
<!-- External Styles -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css">

<!-- Main Container -->
<div class="min-h-screen bg-gray-100 p-6">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-6">
            <h1 class="text-3xl font-bold text-gray-800 flex items-center">
                <i class="fas fa-calendar-alt mr-3 text-blue-500"></i> Chấm Công
            </h1>
            <p class="text-gray-600 mt-2">Theo dõi và quản lý thời gian làm việc và tăng ca một cách dễ dàng.</p>
        </div>

        <!-- Tab Content -->
        <div class="tab-content">
            <!-- Input Tab -->
            <div id="input" class="tab-pane active">
                <!-- Remaining Hours Card -->
                <div class="bg-white shadow-lg rounded-lg p-6 mb-6">
                    <h2 class="text-lg font-semibold text-gray-700 mb-4">Thông Tin Giờ Làm Việc</h2>
                    <div class="flex items-center justify-between">
                        <div>
                            <label class="text-sm font-medium text-gray-600">Số giờ cần bù:</label>
                            <span id="_remainingHours" class="ml-2 text-lg font-bold text-blue-600">Đang tải...</span>
                        </div>
                        <div id="remainingHoursMessage" class="text-red-500 text-sm hidden">
                            Cần làm đủ giờ trước khi tăng ca
                        </div>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    <!-- Left Column: Attendance and Overtime Controls -->
                    <div class="lg:col-span-1 space-y-6">
                        <!-- Date Picker Card -->
                        <div class="bg-white shadow-lg rounded-lg p-6">
                            <h2 class="text-lg font-semibold text-gray-700 mb-4">Chọn Ngày Làm Việc</h2>
                            <div class="relative">
                                <input type="text" id="workDateRange" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="Chọn khoảng ngày">
                                <i class="fas fa-calendar-alt absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                            </div>
                        </div>

                        <!-- Attendance Card -->
                        <div class="bg-white shadow-lg rounded-lg p-6">
                            <h2 class="text-lg font-semibold text-gray-700 mb-4">Chấm Công</h2>
                            <div class="space-y-4">
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <label class="text-sm font-medium text-gray-600">Giờ vào</label>
                                        <input type="time" id="checkInTime" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500">
                                    </div>
                                    <div>
                                        <label class="text-sm font-medium text-gray-600">Giờ ra</label>
                                        <input type="time" id="checkOutTime" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500">
                                    </div>
                                </div>
                                <div>
                                    <label class="text-sm font-medium text-gray-600">Tổng giờ</label>
                                    <input type="text" id="totalHours" class="w-full p-3 border rounded-lg bg-gray-100" readonly>
                                </div>
                                <button id="set8hBtn" class="w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 flex items-center justify-center">
                                    <i class="fas fa-clock mr-2"></i> Đặt 8h làm việc
                                </button>
                                <div>
                                    <label class="text-sm font-medium text-gray-600">Ghi chú</label>
                                    <textarea id="attendanceNote" class="w-full p-3 border rounded-lg" rows="3" placeholder="Nhập ghi chú..."></textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Overtime Card -->
                        <div class="bg-white shadow-lg rounded-lg p-6 overtime-card">
                            <h2 class="text-lg font-semibold text-gray-700 mb-4">Tăng Ca</h2>
                            <div class="space-y-4">
                                <div class="flex space-x-2">
                                    <button class="flex-1 bg-gray-200 text-gray-700 p-2 rounded-lg hover:bg-gray-300" id="ot1h">+1h</button>
                                    <button class="flex-1 bg-gray-200 text-gray-700 p-2 rounded-lg hover:bg-gray-300" id="ot2h">+2h</button>
                                    <button class="flex-1 bg-gray-200 text-gray-700 p-2 rounded-lg hover:bg-gray-300" id="ot3h">+3h</button>
                                    <button class="flex-1 bg-gray-200 text-gray-700 p-2 rounded-lg hover:bg-gray-300" id="ot4h">+4h</button>
                                    <button class="flex-1 bg-gray-200 text-gray-700 p-2 rounded-lg hover:bg-gray-300" id="ot8h">8h-18h</button>
                                </div>
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <label class="text-sm font-medium text-gray-600">Giờ vào tăng ca</label>
                                        <input type="time" id="otStartTime" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500">
                                    </div>
                                    <div>
                                        <label class="text-sm font-medium text-gray-600">Giờ ra tăng ca</label>
                                        <input type="time" id="otEndTime" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500">
                                    </div>
                                </div>
                                <div class="select-box">
                                    <label class="text-sm font-medium text-gray-600">Tỉ lệ tăng ca</label>
                                    <select id="overtimeRate" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500">
                                        <option value="">Chọn tỉ lệ tăng ca</option>
                                    </select>
                                </div>
                                <button id="cancelOT" class="w-full bg-red-500 text-white p-3 rounded-lg hover:bg-red-600">Hủy tăng ca</button>
                                <div>
                                    <label class="text-sm font-medium text-gray-600">Ghi chú tăng ca</label>
                                    <textarea id="otNote" class="w-full p-3 border rounded-lg" rows="3" placeholder="Nhập ghi chú tăng ca..."></textarea>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column: Work Schedule Table -->
                    <div class="lg:col-span-2 bg-white shadow-lg rounded-lg p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-lg font-semibold text-gray-700">Lịch Làm Việc</h2>
                            <div class="flex space-x-2">
                                <button id="applyToSelected" class="bg-green-500 text-white p-3 rounded-lg hover:bg-green-600 flex items-center">
                                    <i class="fas fa-check mr-2"></i> Áp dụng
                                </button>
                                <button id="submitAll" class="bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 flex items-center">
                                    <i class="fas fa-save mr-2"></i> Lưu tất cả
                                </button>
                            </div>
                        </div>
                        <div class="overflow-x-auto">
                            <table class="w-full table-auto">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="p-3 text-left">
                                            <input type="checkbox" id="selectAll" class="h-4 w-4">
                                        </th>
                                        <th class="p-3 text-left">Thứ</th>
                                        <th class="p-3 text-left">Ngày</th>
                                        <th class="p-3 text-left">Giờ làm</th>
                                        <th class="p-3 text-left">Giờ tăng ca</th>
                                        <th class="p-3 text-left">Ghi chú</th>
                                    </tr>
                                </thead>
                                <tbody id="workScheduleBody"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Approved Tab -->
            <div id="approved" class="tab-pane hidden">
                <div class="bg-white shadow-lg rounded-lg p-6">
                    <h2 class="text-lg font-semibold text-gray-700 mb-4">Danh Sách Đã Duyệt</h2>
                    <div class="overflow-x-auto">
                        <table class="w-full table-auto">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="p-3 text-left">Loại</th>
                                    <th class="p-3 text-left">Ngày</th>
                                    <th class="p-3 text-left">Giờ vào</th>
                                    <th class="p-3 text-left">Giờ ra</th>
                                    <th class="p-3 text-left">Tổng giờ</th>
                                    <th class="p-3 text-left">Ghi chú</th>
                                    <th class="p-3 text-left">Trạng thái</th>
                                </tr>
                            </thead>
                            <tbody id="approvedRecords"></tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Pending Tab -->
            <div id="pending" class="tab-pane hidden">
                <div class="bg-white shadow-lg rounded-lg p-6">
                    <h2 class="text-lg font-semibold text-gray-700 mb-4">Danh Sách Chờ Duyệt</h2>
                    <div class="overflow-x-auto">
                        <table class="w-full table-auto">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="p-3 text-left">Loại</th>
                                    <th class="p-3 text-left">Ngày</th>
                                    <th class="p-3 text-left">Giờ vào</th>
                                    <th class="p-3 text-left">Giờ ra</th>
                                    <th class="p-3 text-left">Tổng giờ</th>
                                    <th class="p-3 text-left">Ghi chú</th>
                                    <th class="p-3 text-left">Trạng thái</th>
                                </tr>
                            </thead>
                            <tbody id="pendingRecords"></tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Rejected Tab -->
            <div id="rejected" class="tab-pane hidden">
                <div class="bg-white shadow-lg rounded-lg p-6">
                    <h2 class="text-lg font-semibold text-gray-700 mb-4">Danh Sách Từ Chối</h2>
                    <div class="overflow-x-auto">
                        <table class="w-full table-auto">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="p-3 text-left">Loại</th>
                                    <th class="p-3 text-left">Ngày</th>
                                    <th class="p-3 text-left">Giờ vào</th>
                                    <th class="p-3 text-left">Giờ ra</th>
                                    <th class="p-3 text-left">Tổng giờ</th>
                                    <th class="p-3 text-left">Ghi chú</th>
                                    <th class="p-3 text-left">Trạng thái</th>
                                </tr>
                            </thead>
                            <tbody id="rejectedRecords"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- External Scripts -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- JavaScript Logic -->
<script>
    const maNv = '@maNv';
    let selectedWorkDays = [];
    let workScheduleData = {};
    let overtimeRates = [];
    let holidayData = {};
    let attendanceStatusData = {};
    let workTimeConfig = null; // Store ChamCongGioRaVao active record

    document.addEventListener('DOMContentLoaded', async () => {
        if (!maNv) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Mã nhân viên không hợp lệ.',
                confirmButtonText: 'OK'
            });
            return;
        }
        try {
            // Load ChamCongGioRaVao active record
            const workTimeResponse = await fetch('/api/AttendanceSettingApi/GetChamCongGioRaVao');
            const workTimeResult = await workTimeResponse.json();
            workTimeConfig = workTimeResult.find(r => r.kichHoat);
            if (!workTimeConfig) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Cảnh báo!',
                    text: 'Không tìm thấy cấu hình giờ ra vào đang kích hoạt. Vui lòng thiết lập trong cài đặt.',
                    confirmButtonText: 'OK'
                });
            }

            // Load remaining hours
            const remainingHoursResponse = await fetch(`/api/LamBu/GetRemainingHours/${maNv}`);
            const remainingHoursResult = await remainingHoursResponse.json();
            if (remainingHoursResult.success) {
                document.getElementById('_remainingHours').textContent = `${remainingHoursResult.remainingHours.toFixed(2)}h`;
                toggleOvertimeSection(remainingHoursResult.remainingHours);
            } else {
                document.getElementById('_remainingHours').textContent = `0.00h`;
                toggleOvertimeSection(0);
            }

            // Load holiday data
            const holidayResponse = await fetch('/api/Attendance/GetHolidays');
            const holidayResult = await holidayResponse.json();
            if (holidayResult.success) {
                holidayData = holidayResult.holidays.reduce((acc, holiday) => {
                    acc[holiday.ngayLe] = holiday;
                    return acc;
                }, {});
            }

            // Load attendance records with CC3, CC5, CC6 statuses
            const attendanceResponse = await fetch('/api/Attendance/GetAttendanceCalendarRecords');
            const attendanceResult = await attendanceResponse.json();
            if (attendanceResult.success) {
                attendanceStatusData = attendanceResult.records.reduce((acc, record) => {
                    acc[record.NgayLamViec] = record.TrangThai;
                    return acc;
                }, {});
            }
        } catch (error) {
            document.getElementById('_remainingHours').textContent = `0.00h`;
            toggleOvertimeSection(0);
            console.error('Error loading data:', error);
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Có lỗi xảy ra khi tải dữ liệu.',
                confirmButtonText: 'OK'
            });
        }
    });

    function toggleOvertimeSection(remainingHours) {
        const overtimeCard = document.querySelector('.overtime-card');
        const remainingHoursMessage = document.getElementById('remainingHoursMessage');
        overtimeCard.style.display = remainingHours > 0 ? 'none' : 'block';
        remainingHoursMessage.style.display = remainingHours > 0 ? 'block' : 'none';
    }

    async function loadOvertimeRates() {
        try {
            const response = await fetch('/api/Attendance/GetOvertimeRates');
            const result = await response.json();
            if (result.success) {
                overtimeRates = result.rates;
                const select = document.getElementById('overtimeRate');
                select.innerHTML = '<option value="">Chọn tỉ lệ tăng ca</option>';
                overtimeRates.forEach(rate => {
                    const option = document.createElement('option');
                    option.value = rate.id;
                    option.textContent = `${rate.tenTiLeTangCa} (Tỉ lệ: ${rate.tiLe})`;
                    select.appendChild(option);
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Không thể tải tỉ lệ tăng ca',
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Có lỗi xảy ra khi tải tỉ lệ tăng ca',
                confirmButtonText: 'OK'
            });
        }
    }

    document.getElementById('overtimeRate').addEventListener('change', function() {
        const selectedRateId = this.value;
        const selectedRate = overtimeRates.find(rate => rate.id == selectedRateId);
        const otNote = document.getElementById('otNote');
        otNote.value = selectedRate ? `${selectedRate.tenTiLeTangCa}${otNote.value ? ' - ' + otNote.value : ''}` : '';
    });

    flatpickr("#workDateRange", {
        mode: "range",
        dateFormat: "d/m/Y",
        weekNumbers: true,
        locale: { firstDayOfWeek: 1 },
        minDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1),
        maxDate: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0),
        onClose: handleDateRangeClose
    });

    function handleDateRangeClose(selectedDates) {
        selectedWorkDays = [];
        if (selectedDates.length === 2) {
            let currentDate = new Date(selectedDates[0]);
            const endDate = new Date(selectedDates[1]);
            while (currentDate <= endDate) {
                const dateStr = formatDateToYMD(currentDate);
                selectedWorkDays.push(dateStr);
                if (!workScheduleData[dateStr]) {
                    workScheduleData[dateStr] = {
                        selected: false,
                        checkIn: '',
                        checkOut: '',
                        totalHours: 0,
                        overtimeHours: 0,
                        overtimeStart: '',
                        overtimeEnd: '',
                        overtimeNote: '',
                        attendanceNote: '',
                        overtimeRateId: null,
                        overtimeRateTiLe: 1
                    };
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }
        } else if (selectedDates.length === 1) {
            const dateStr = formatDateToYMD(selectedDates[0]);
            selectedWorkDays.push(dateStr);
            if (!workScheduleData[dateStr]) {
                workScheduleData[dateStr] = {
                    selected: false,
                    checkIn: '',
                    checkOut: '',
                    totalHours: 0,
                    overtimeHours: 0,
                    overtimeStart: '',
                    overtimeEnd: '',
                    overtimeNote: '',
                    attendanceNote: '',
                    overtimeRateId: null,
                    overtimeRateTiLe: 1
                };
            }
        }
        updateWorkScheduleTable();
    }

    function formatDateToYMD(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    function formatDate(date) {
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    }

    function getDayOfWeek(date) {
        const days = ['Chủ nhật', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7'];
        return days[date.getDay()];
    }

    function updateWorkScheduleTable() {
        const tbody = document.getElementById('workScheduleBody');
        tbody.innerHTML = '';
        selectedWorkDays.forEach((date, index) => {
            const data = workScheduleData[date];
            const row = document.createElement('tr');
            const holiday = holidayData[date];
            const isHoliday = holiday && holiday.trangThai === 'NL4';
            const currentDate = new Date(date);
            const isWeekend = currentDate.getDay() === 0 || currentDate.getDay() === 6;
            const isWeekday = currentDate.getDay() >= 1 && currentDate.getDay() <= 5;

            let rowClass = '';
            if (attendanceStatusData[date]) {
                switch (attendanceStatusData[date]) {
                    case 'CC3':
                        rowClass = 'bg-blue-100';
                        break;
                    case 'CC5':
                        rowClass = 'bg-yellow-100';
                        break;
                    case 'CC6':
                        rowClass = 'bg-red-100';
                        break;
                }
            } else {
                rowClass = isHoliday ? 'bg-yellow-100' : (data.checkIn && data.checkOut && isWeekday ? 'bg-green-100' : '');
            }
            row.className = `${rowClass} border-b border-gray-200`;

            let dayTypeLabel = isHoliday ? '<span class="inline-block px-2 py-1 text-xs font-semibold text-yellow-800 bg-yellow-200 rounded">Ngày lễ</span>' :
                              isWeekend ? '<span class="inline-block px-2 py-1 text-xs font-semibold text-blue-800 bg-blue-200 rounded">Cuối tuần</span>' :
                              '<span class="inline-block px-2 py-1 text-xs font-semibold text-gray-800 bg-gray-200 rounded">Ngày thường</span>';

            row.innerHTML = `
                <td class="p-3"><input type="checkbox" class="date-checkbox h-4 w-4" data-date="${date}" ${data.selected ? 'checked' : ''}></td>
                <td class="p-3">${getDayOfWeek(currentDate)}</td>
                <td class="p-3">${formatDate(new Date(date))} ${dayTypeLabel}</td>
                <td class="p-3">${isWeekday && !isHoliday ? (data.checkIn ? `${data.checkIn} - ${data.checkOut} (${data.totalHours}h)` : '-') : 'Chỉ tăng ca'}</td>
                <td class="p-3">${data.overtimeHours > 0 ? `${data.overtimeStart} - ${data.overtimeEnd} (${data.overtimeHours}h)` : '-'}</td>
                <td class="p-3">${data.attendanceNote || '-'}</td>
            `;
            tbody.appendChild(row);
        });

        document.querySelectorAll('.date-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                workScheduleData[this.dataset.date].selected = this.checked;
            });
        });
    }

    function calculateHours(startTime, endTime) {
        if (!startTime || !endTime) return 0;
        const start = new Date(`2000-01-01T${startTime}`);
        const end = new Date(`2000-01-01T${endTime}`);
        const lunchStart = new Date(`2000-01-01T12:00`);
        const lunchEnd = new Date(`2000-01-01T13:00`);

        let hours = (end - start) / (1000 * 60 * 60);
        if (hours < 0) hours += 24;

        // Subtract 1 hour for lunch break if the work period overlaps with 12:00-13:00
        if (start < lunchEnd && end > lunchStart) {
            hours -= 1;
        }

        return Math.max(0, parseFloat(hours.toFixed(2)));
    }

    function calculateOvertimeHours(startTime, endTime) {
        if (!startTime || !endTime) return 0;
        const start = new Date(`2000-01-01T${startTime}`);
        const end = new Date(`2000-01-01T${endTime}`);
        const lunchStart = new Date(`2000-01-01T12:00`);
        const lunchEnd = new Date(`2000-01-01T13:00`);

        let hours = (end - start) / (1000 * 60 * 60);
        if (hours < 0) hours += 24;

        // Subtract 1 hour for lunch break if the overtime period overlaps with 12:00-13:00
        if (start < lunchEnd && end > lunchStart) {
            hours -= 1;
        }

        return Math.max(0, parseFloat(hours.toFixed(2)));
    }

    function calculateRawHours(startTime, endTime) {
        if (!startTime || !endTime) return 0;
        const start = new Date(`2000-01-01T${startTime}`);
        const end = new Date(`2000-01-01T${endTime}`);
        let hours = (end - start) / (1000 * 60 * 60);
        if (hours < 0) hours += 24;
        return parseFloat(hours.toFixed(2));
    }

    function updateTotalHours() {
        const checkIn = document.getElementById('checkInTime').value;
        const checkOut = document.getElementById('checkOutTime').value;
        const totalHoursInput = document.getElementById('totalHours');
        totalHoursInput.value = checkIn && checkOut ? `${calculateHours(checkIn, checkOut)}h` : '';

        // Validate against workTimeConfig
        if (workTimeConfig && checkIn && checkOut) {
            const gioVao = workTimeConfig.gioVao.slice(0, 5);
            const gioRa = workTimeConfig.gioRa.slice(0, 5);
            if (checkIn < gioVao) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: `Giờ vào không được sớm hơn ${gioVao}.`,
                    confirmButtonText: 'OK'
                });
                document.getElementById('checkInTime').value = '';
                totalHoursInput.value = '';
            }
            if (checkOut > gioRa) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: `Giờ ra không được muộn hơn ${gioRa}.`,
                    confirmButtonText: 'OK'
                });
                document.getElementById('checkOutTime').value = '';
                totalHoursInput.value = '';
            }
        }
    }

    document.getElementById('checkInTime').addEventListener('change', updateTotalHours);
    document.getElementById('checkOutTime').addEventListener('change', updateTotalHours);

    document.getElementById('set8hBtn').addEventListener('click', () => {
        if (workTimeConfig) {
            document.getElementById('checkInTime').value = workTimeConfig.gioVao.slice(0, 5);
            document.getElementById('checkOutTime').value = workTimeConfig.gioRa.slice(0, 5);
            updateTotalHours();
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Không tìm thấy cấu hình giờ ra vào. Vui lòng thiết lập trong cài đặt.',
                confirmButtonText: 'OK'
            });
        }
    });

    document.getElementById('cancelOT').addEventListener('click', () => {
        document.getElementById('otStartTime').value = '';
        document.getElementById('otEndTime').value = '';
        document.getElementById('otNote').value = '';
        document.getElementById('overtimeRate').value = '';
    });

    function addHours(time, hours) {
        if (!time) return '';
        const [hoursStr, minutesStr] = time.split(':');
        let newHours = parseInt(hoursStr) + hours;
        if (newHours >= 24) newHours -= 24;
        return `${newHours.toString().padStart(2, '0')}:${minutesStr}`;
    }

    ['1h', '2h', '3h', '4h', '8h'].forEach(hours => {
        document.getElementById(`ot${hours}`).addEventListener('click', () => {
            const overtimeHours = parseInt(hours);
            const selectedDates = Object.entries(workScheduleData)
                .filter(([_, data]) => data.selected)
                .map(([date]) => date);

            if (selectedDates.length === 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Vui lòng chọn ít nhất một ngày',
                    confirmButtonText: 'OK'
                });
                return;
            }

            if (!workTimeConfig) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Không tìm thấy cấu hình giờ ra vào. Vui lòng thiết lập trong cài đặt.',
                    confirmButtonText: 'OK'
                });
                return;
            }

            const allHolidays = selectedDates.every(date => holidayData[date] && holidayData[date].trangThai === 'NL4');
            const allWeekends = selectedDates.every(date => [0, 6].includes(new Date(date).getDay()));
            const allWeekdays = selectedDates.every(date => [1, 2, 3, 4, 5].includes(new Date(date).getDay()));

            if (!allHolidays && !allWeekends && !allWeekdays) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Không thể áp dụng tăng ca cho các ngày khác loại',
                    confirmButtonText: 'OK'
                });
                return;
            }

            let defaultRate = '';
            if (allHolidays) {
                defaultRate = overtimeRates.find(r => r.tenTiLeTangCa.includes('Ngày lễ'))?.id;
            } else if (allWeekends) {
                defaultRate = overtimeRates.find(r => r.tenTiLeTangCa.includes('Cuối tuần'))?.id;
            } else if (allWeekdays) {
                defaultRate = overtimeRates.find(r => r.tenTiLeTangCa.includes('Ngày thường'))?.id;
            }

            if (defaultRate) {
                document.getElementById('overtimeRate').value = defaultRate;
                const selectedRate = overtimeRates.find(rate => rate.id == defaultRate);
                if (selectedRate) {
                    document.getElementById('otNote').value = selectedRate.tenTiLeTangCa;
                }
            }

            const gioVao = workTimeConfig.gioVao.slice(0, 5);
            const gioRa = workTimeConfig.gioRa.slice(0, 5);
            let otStartTime, otEndTime;

            if (allHolidays || allWeekends) {
                if (hours === '8h') {
                    otStartTime = gioVao;
                    otEndTime = gioRa;
                } else {
                    otStartTime = gioVao;
                    otEndTime = addHours(gioVao, overtimeHours);
                    if (otEndTime > gioRa) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: `Giờ tăng ca trong ngày lễ/cuối tuần phải trong khoảng ${gioVao} đến ${gioRa}`,
                            confirmButtonText: 'OK'
                        });
                        return;
                    }
                }
            } else if (allWeekdays) {
                otStartTime = gioRa;
                otEndTime = addHours(gioRa, overtimeHours);
                if (overtimeHours > 4) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Tăng ca trong ngày thường không được vượt quá 4 giờ',
                        confirmButtonText: 'OK'
                    });
                    return;
                }
                if (otEndTime > '22:00') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Giờ tăng ca trong ngày thường phải kết thúc trước 22:00',
                        confirmButtonText: 'OK'
                    });
                    return;
                }
            }

            document.getElementById('otStartTime').value = otStartTime;
            document.getElementById('otEndTime').value = otEndTime;
            updateOvertime();
        });
    });

    function updateOvertime() {
        const otStartTime = document.getElementById('otStartTime').value;
        const otEndTime = document.getElementById('otEndTime').value;
        const otRate = document.getElementById('overtimeRate').value;
        const otRawHours = calculateRawHours(otStartTime, otEndTime) || 0;
        const otHours = calculateOvertimeHours(otStartTime, otEndTime) || 0;

        const selectedDates = Object.entries(workScheduleData)
            .filter(([_, data]) => data.selected)
            .map(([date]) => date);

        if (selectedDates.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một ngày',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (!otRate) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn tỉ lệ tăng ca',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (!workTimeConfig) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Không tìm thấy cấu hình giờ ra vào. Vui lòng thiết lập trong cài đặt.',
                confirmButtonText: 'OK'
            });
            return;
        }

        const allHolidays = selectedDates.every(date => holidayData[date] && holidayData[date].trangThai === 'NL4');
        const allWeekends = selectedDates.every(date => [0, 6].includes(new Date(date).getDay()));
        const allWeekdays = selectedDates.every(date => [1, 2, 3, 4, 5].includes(new Date(date).getDay()));

        const gioVao = workTimeConfig.gioVao.slice(0, 5);
        const gioRa = workTimeConfig.gioRa.slice(0, 5);

        if (allHolidays || allWeekends) {
            if (otStartTime && (otStartTime < gioVao || otStartTime > gioRa)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: `Giờ tăng ca trong ngày lễ/cuối tuần phải trong khoảng ${gioVao} đến ${gioRa}`,
                    confirmButtonText: 'OK'
                });
                document.getElementById('otStartTime').value = '';
                document.getElementById('otEndTime').value = '';
                return;
            }
            if (otEndTime && (otEndTime < gioVao || otEndTime > gioRa)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: `Giờ tăng ca trong ngày lễ/cuối tuần phải trong khoảng ${gioVao} đến ${gioRa}`,
                    confirmButtonText: 'OK'
                });
                document.getElementById('otEndTime').value = '';
                return;
            }
        } else if (allWeekdays) {
            if (otStartTime && otStartTime < gioRa) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: `Giờ tăng ca trong ngày thường phải bắt đầu từ ${gioRa}`,
                    confirmButtonText: 'OK'
                });
                document.getElementById('otStartTime').value = '';
                document.getElementById('otEndTime').value = '';
                return;
            }
            if (otEndTime && otEndTime > addHours(gioRa, 4)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: `Giờ tăng ca trong ngày thường phải kết thúc trước ${addHours(gioRa, 4)}`,
                    confirmButtonText: 'OK'
                });
                document.getElementById('otEndTime').value = '';
                return;
            }
            if (otRawHours > 4) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Số giờ tăng ca không được vượt quá 4 giờ trong ngày thường',
                    confirmButtonText: 'OK'
                });
                document.getElementById('otEndTime').value = '';
                return;
            }
            if (otEndTime > '22:00') {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Giờ tăng ca trong ngày thường phải kết thúc trước 22:00',
                    confirmButtonText: 'OK'
                });
                document.getElementById('otEndTime').value = '';
                return;
            }
        }

        const selectedRate = overtimeRates.find(rate => rate.id == otRate);
        if (selectedRate && selectedRate.tenTiLeTangCa.includes('TC3')) {
            for (const date of selectedDates) {
                const weeklyOvertime = calculateWeeklyOvertime(new Date(date), otHours);
                if (weeklyOvertime > 12) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Tổng số giờ tăng ca trong tuần không được vượt quá 12 giờ',
                        confirmButtonText: 'OK'
                    });
                    document.getElementById('otEndTime').value = '';
                    return;
                }
            }
        }
    }

    document.getElementById('selectAll').addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('.date-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
            workScheduleData[checkbox.dataset.date].selected = this.checked;
        });
    });

    document.getElementById('submitAll').addEventListener('click', async () => {
        const selectedDates = Object.entries(workScheduleData)
            .filter(([_, data]) => data.selected)
            .map(([date, data]) => ({ date, ...data }));

        if (selectedDates.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một ngày',
                confirmButtonText: 'OK'
            });
            return;
        }

        const validAttendance = selectedDates
            .filter(date => {
                const dayOfWeek = new Date(date.date).getDay();
                const isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5;
                const isHoliday = holidayData[date.date] && holidayData[date.date].trangThai === 'NL4';
                return isWeekday && !isHoliday && date.checkIn && date.checkOut;
            })
            .map(date => ({
                NgayLamViec: date.date,
                GioVao: date.checkIn,
                GioRa: date.checkOut,
                TongGio: date.totalHours,
                TrangThai: "LS1",
                GhiChu: date.attendanceNote || ""
            }));

        const validOvertime = selectedDates
            .filter(date => date.overtimeHours > 0 && date.overtimeStart && date.overtimeEnd && date.overtimeRateId)
            .map(date => ({
                NgayTangCa: date.date,
                GioVaoTangCa: date.overtimeStart,
                GioRaTangCa: date.overtimeEnd,
                SoGioTangCa: date.overtimeHours,
                GhiChu: date.overtimeNote || "",
                TiLeTangCa: date.overtimeRateTiLe
            }));

        try {
            const response = await fetch('/api/Attendance/SubmitAttendance', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ attendance: validAttendance, overtime: validOvertime })
            });

            const result = await response.json();
            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: 'Lưu dữ liệu thành công',
                    confirmButtonText: 'OK'
                }).then(() => location.reload());
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: result.message,
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Có lỗi xảy ra khi lưu dữ liệu',
                confirmButtonText: 'OK'
            });
        }
    });

    document.getElementById('applyToSelected').addEventListener('click', () => {
        const checkIn = document.getElementById('checkInTime').value;
        const checkOut = document.getElementById('checkOutTime').value;
        const otStartTime = document.getElementById('otStartTime').value;
        const otEndTime = document.getElementById('otEndTime').value;
        const otNote = document.getElementById('otNote').value;
        const attendanceNote = document.getElementById('attendanceNote').value;
        const overtimeRateId = document.getElementById('overtimeRate').value;
        const selectedRate = overtimeRates.find(rate => rate.id == overtimeRateId);
        const otRawHours = calculateRawHours(otStartTime, otEndTime) || 0;
        const otHours = calculateOvertimeHours(otStartTime, otEndTime) || 0;

        const selectedDates = Object.entries(workScheduleData)
            .filter(([_, data]) => data.selected)
            .map(([date]) => date);

        if (selectedDates.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một ngày',
                confirmButtonText: 'OK'
            });
            return;
        }

        const hasAttendanceInput = checkIn && checkOut;
        const hasOvertimeInput = otStartTime && otEndTime && overtimeRateId;
        if (!hasAttendanceInput && !hasOvertimeInput) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng nhập ít nhất một bộ dữ liệu (giờ làm hoặc giờ tăng ca)',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (!workTimeConfig && (hasAttendanceInput || hasOvertimeInput)) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Không tìm thấy cấu hình giờ ra vào. Vui lòng thiết lập trong cài đặt.',
                confirmButtonText: 'OK'
            });
            return;
        }

        // Validate attendance hours and check-in/check-out times
        if (hasAttendanceInput) {
            const totalHours = calculateHours(checkIn, checkOut);
            if (totalHours > 8) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Tổng giờ chấm công không được vượt quá 8 giờ (sau khi trừ nghỉ trưa từ 12:00 đến 13:00 nếu có).',
                    confirmButtonText: 'OK'
                });
                document.getElementById('checkInTime').value = '';
                document.getElementById('checkOutTime').value = '';
                document.getElementById('totalHours').value = '';
                return;
            }
            const gioVao = workTimeConfig.gioVao.slice(0, 5);
            const gioRa = workTimeConfig.gioRa.slice(0, 5);
            if (checkIn < gioVao) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: `Giờ vào không được sớm hơn ${gioVao}.`,
                    confirmButtonText: 'OK'
                });
                document.getElementById('checkInTime').value = '';
                document.getElementById('totalHours').value = '';
                return;
            }
            if (checkOut > gioRa) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: `Giờ ra không được muộn hơn ${gioRa}.`,
                    confirmButtonText: 'OK'
                });
                document.getElementById('checkOutTime').value = '';
                document.getElementById('totalHours').value = '';
                return;
            }
        }

        // Validate overtime hours
        if (hasOvertimeInput) {
            const allHolidays = selectedDates.every(date => holidayData[date] && holidayData[date].trangThai === 'NL4');
            const allWeekends = selectedDates.every(date => [0, 6].includes(new Date(date).getDay()));
            const allWeekdays = selectedDates.every(date => [1, 2, 3, 4, 5].includes(new Date(date).getDay()));
            const gioVao = workTimeConfig.gioVao.slice(0, 5);
            const gioRa = workTimeConfig.gioRa.slice(0, 5);

            if (allHolidays || allWeekends) {
                if (otStartTime < gioVao || otStartTime > gioRa) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: `Giờ tăng ca trong ngày lễ/cuối tuần phải trong khoảng ${gioVao} đến ${gioRa}`,
                        confirmButtonText: 'OK'
                    });
                    document.getElementById('otStartTime').value = '';
                    document.getElementById('otEndTime').value = '';
                    return;
                }
                if (otEndTime < gioVao || otEndTime > gioRa) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: `Giờ tăng ca trong ngày lễ/cuối tuần phải trong khoảng ${gioVao} đến ${gioRa}`,
                        confirmButtonText: 'OK'
                    });
                    document.getElementById('otEndTime').value = '';
                    return;
                }
            } else if (allWeekdays) {
                if (otStartTime < gioRa) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: `Giờ tăng ca trong ngày thường phải bắt đầu từ ${gioRa}`,
                        confirmButtonText: 'OK'
                    });
                    document.getElementById('otStartTime').value = '';
                    document.getElementById('otEndTime').value = '';
                    return;
                }
                if (otEndTime > addHours(gioRa, 4)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: `Giờ tăng ca trong ngày thường phải kết thúc trước ${addHours(gioRa, 4)}`,
                        confirmButtonText: 'OK'
                    });
                    document.getElementById('otEndTime').value = '';
                    return;
                }
                if (otRawHours > 4) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Số giờ tăng ca không được vượt quá 4 giờ trong ngày thường',
                        confirmButtonText: 'OK'
                    });
                    document.getElementById('otEndTime').value = '';
                    return;
                }
                if (otEndTime > '22:00') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Giờ tăng ca trong ngày thường phải kết thúc trước 22:00',
                        confirmButtonText: 'OK'
                    });
                    document.getElementById('otEndTime').value = '';
                    return;
                }
            }
        }

        const allHolidays = selectedDates.every(date => holidayData[date] && holidayData[date].trangThai === 'NL4');
        const allWeekends = selectedDates.every(date => [0, 6].includes(new Date(date).getDay()));
        const allWeekdays = selectedDates.every(date => [1, 2, 3, 4, 5].includes(new Date(date).getDay()));

        selectedDates.forEach(date => {
            const currentDate = new Date(date);
            const dayOfWeek = currentDate.getDay();
            const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
            const isHoliday = holidayData[date] && holidayData[date].trangThai === 'NL4';
            const isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5;

            let updatedData = { ...workScheduleData[date] };

            if (hasAttendanceInput && isWeekday && !isHoliday) {
                updatedData.checkIn = checkIn;
                updatedData.checkOut = checkOut;
                updatedData.totalHours = calculateHours(checkIn, checkOut);
                updatedData.attendanceNote = attendanceNote;
            }

            if (hasOvertimeInput && (isHoliday || isWeekend || isWeekday)) {
                updatedData.overtimeHours = otHours;
                updatedData.overtimeStart = otStartTime;
                updatedData.overtimeEnd = otEndTime;
                updatedData.overtimeNote = otNote;
                updatedData.overtimeRateId = overtimeRateId || null;
                updatedData.overtimeRateTiLe = selectedRate ? selectedRate.tiLe : 1;
            }

            workScheduleData[date] = updatedData;
        });

        updateWorkScheduleTable();

        if (hasAttendanceInput) {
            document.getElementById('checkInTime').value = '';
            document.getElementById('checkOutTime').value = '';
            document.getElementById('totalHours').value = '';
            document.getElementById('attendanceNote').value = '';
        }
        if (hasOvertimeInput) {
            document.getElementById('otStartTime').value = '';
            document.getElementById('otEndTime').value = '';
            document.getElementById('otNote').value = '';
            document.getElementById('overtimeRate').value = '';
        }

        selectedDates.forEach(date => workScheduleData[date].selected = false);
        document.getElementById('selectAll').checked = false;

        updateWorkScheduleTable();

        Swal.fire({
            icon: 'success',
            title: 'Thành công!',
            text: 'Đã áp dụng dữ liệu cho các ngày đã chọn',
            confirmButtonText: 'OK'
        });
    });

    function getWeekNumber(date) {
        const d = new Date(date);
        d.setHours(0, 0, 0, 0);
        d.setDate(d.getDate() + 4 - (d.getDay() || 7));
        const yearStart = new Date(d.getFullYear(), 0, 1);
        return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
    }

    function calculateWeeklyOvertime(date, overtimeHours) {
        const weekNumber = getWeekNumber(date);
        const weekStart = new Date(date);
        weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 1);
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekEnd.getDate() + 6);

        let totalWeeklyOvertime = overtimeHours;
        Object.entries(workScheduleData).forEach(([dateStr, data]) => {
            const currentDate = new Date(dateStr);
            if (currentDate >= weekStart && currentDate <= weekEnd && dateStr !== date.toISOString().split('T')[0]) {
                totalWeeklyOvertime += data.overtimeHours || 0;
            }
        });
        return totalWeeklyOvertime;
    }

    window.addEventListener('load', loadOvertimeRates);
</script>
