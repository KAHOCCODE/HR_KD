@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}
<link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;500&display=swap" rel="stylesheet">
<link rel="stylesheet" href="~/css/attendmanager.css">
<div id="attendanceSection" class="dashboard-card bg-white p-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-fingerprint me-2"></i> Chấm công</h5>

    <!-- Bộ lọc -->
    <div class="row mb-3">
        <div class="col-md-4">
            <label class="form-label">Chọn phòng ban</label>
            <select class="form-control" id="departmentFilter">
                <option value="">Tất cả</option>
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label">Chọn chức vụ</label>
            <select class="form-control" id="positionFilter">
                <option value="">Tất cả</option>
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label">Chọn nhân viên</label>
            <select class="form-control" id="employeeFilter">
                <option value="">Chọn nhân viên</option>
            </select>
        </div>
    </div>

    <!-- Nút duyệt/từ chối hàng loạt -->
    <div class="mb-3">
        <button class="btn btn-success me-2" onclick="approveSelectedAttendance('Đã duyệt')">Duyệt tất cả đã chọn</button>
        <button class="btn btn-danger" onclick="rejectSelectedAttendance()">Từ chối tất cả đã chọn</button>
    </div>

    <!-- Bảng chấm công -->
    <table class="table mt-3">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAllAttendance" onclick="toggleSelectAll('attendance')"></th>
                <th>Ngày làm việc</th>
                <th>Giờ vào</th>
                <th>Giờ ra</th>
                <th>Tổng giờ</th>
                <th>Trạng thái</th>
                <th>Ghi chú</th>
                <th>Duyệt</th>
            </tr>
        </thead>
        <tbody id="attendanceTableBody"></tbody>
    </table>
</div>

<div id="overtimeSection" class="dashboard-card bg-white p-4 mt-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-clock me-2"></i> Bảng Tăng Ca</h5>

    <!-- Nút duyệt/từ chối hàng loạt -->
    <div class="mb-3">
        <button class="btn btn-success me-2" onclick="approveSelectedOvertime('Đã duyệt')">Duyệt tất cả đã chọn</button>
        <button class="btn btn-danger" onclick="rejectSelectedOvertime()">Từ chối tất cả đã chọn</button>
    </div>

    <table class="table mt-3">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAllOvertime" onclick="toggleSelectAll('overtime')"></th>
                <th>Ngày tăng ca</th>
                <th>Số giờ tăng ca</th>
                <th>Tỉ lệ tăng ca</th>
                <th>Trạng thái</th>
                <th>Duyệt</th>
            </tr>
        </thead>
        <tbody id="overtimeTableBody"></tbody>
    </table>
</div>

<div id="makeupSection" class="dashboard-card bg-white p-4 mt-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-clock me-2"></i> Bảng Làm Bù</h5>

    <!-- Nút duyệt/từ chối hàng loạt -->
    <div class="mb-3">
        <button class="btn btn-success me-2" onclick="approveSelectedMakeup('Đã duyệt')">Duyệt tất cả đã chọn</button>
        <button class="btn btn-danger" onclick="rejectSelectedMakeup()">Từ chối tất cả đã chọn</button>
    </div>

    <table class="table mt-3">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAllMakeup" onclick="toggleSelectAll('makeup')"></th>
                <th>Ngày làm bù</th>
                <th>Giờ vào</th>
                <th>Giờ ra</th>
                <th>Tổng giờ</th>
                <th>Trạng thái</th>
                <th>Ghi chú</th>
                <th>Duyệt</th>
            </tr>
        </thead>
        <tbody id="makeupTableBody"></tbody>
    </table>
</div>

<!-- Modal for rejection comment -->
<div class="modal fade" id="rejectionModal" tabindex="-1" aria-labelledby="rejectionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectionModalLabel">Nhập lý do từ chối</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="rejectionComment" class="form-label">Ghi chú:</label>
                    <textarea class="form-control" id="rejectionComment" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" onclick="submitRe documentalRejection()">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for overtime rejection comment -->
<div class="modal fade" id="overtimeRejectionModal" tabindex="-1" aria-labelledby="overtimeRejectionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="overtimeRejectionModalLabel">Nhập lý do từ chối tăng ca</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="overtimeRejectionComment" class="form-label">Ghi chú:</label>
                    <textarea class="form-control" id="overtimeRejectionComment" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" onclick="submitOvertimeRejection()">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for makeup rejection comment -->
<div class="modal fade" id="makeupRejectionModal" tabindex="-1" aria-labelledby="makeupRejectionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="makeupRejectionModalLabel">Nhập lý do từ chối làm bù</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="makeupRejectionComment" class="form-label">Ghi chú:</label>
                    <textarea class="form-control" id="makeupRejectionComment" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" onclick="submitMakeupRejection()">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

<script>
    let trangThaiMap = {};
    let selectedAttendanceIds = [];
    let selectedOvertimeIds = [];
    let selectedMakeupIds = [];

    document.addEventListener("DOMContentLoaded", function () {
        loadTrangThai();
        loadDepartments();
        loadPositions();
        loadEmployees();

        document.getElementById("departmentFilter").addEventListener("change", loadEmployees);
        document.getElementById("positionFilter").addEventListener("change", loadEmployees);
        document.getElementById("employeeFilter").addEventListener("change", function () {
            const maNv = this.value;
            if (maNv) {
                fetchAttendanceRecords(maNv);
                fetchOvertimeRecords(maNv);
                fetchMakeupRecords(maNv);
            } else {
                clearTables();
            }
        });
    });

    // Load danh sách trạng thái
    function loadTrangThai() {
        fetch("/api/AttendanceManager/GetTrangThai")
            .then(res => res.json())
            .then(data => {
                trangThaiMap = {};
                data.forEach(tt => {
                    trangThaiMap[tt.maTrangThai] = tt.tenTrangThai;
                });
            });
    }

    // Xóa bảng khi chưa có nhân viên được chọn
    function clearTables() {
        document.getElementById("attendanceTableBody").innerHTML = '';
        document.getElementById("overtimeTableBody").innerHTML = '';
        document.getElementById("makeupTableBody").innerHTML = '';
        selectedAttendanceIds = [];
        selectedOvertimeIds = [];
        selectedMakeupIds = [];
    }

    // Load bộ lọc
    function loadDepartments() {
        fetch("/api/AttendanceManager/GetDepartmentsManager")
            .then(res => res.json())
            .then(data => {
                const select = document.getElementById("departmentFilter");
                select.innerHTML = '<option value="">Tất cả</option>';
                data.forEach(d => select.innerHTML += `<option value="${d.maPhongBan}">${d.tenPhongBan}</option>`);
            });
    }

    function loadPositions() {
        fetch("/api/AttendanceManager/GetPositionsManager")
            .then(res => res.json())
            .then(data => {
                const select = document.getElementById("positionFilter");
                select.innerHTML = '<option value="">Tất cả</option>';
                data.forEach(d => select.innerHTML += `<option value="${d.maChucVu}">${d.tenChucVu}</option>`);
            });
    }

    function loadEmployees() {
        const pb = document.getElementById("departmentFilter").value;
        const cv = document.getElementById("positionFilter").value;

        fetch(`/api/AttendanceManager/GetEmployeesManager?maPhongBan=${pb}&maChucVu=${cv}`)
            .then(res => res.json())
            .then(data => {
                const select = document.getElementById("employeeFilter");
                select.innerHTML = '<option value="">Chọn nhân viên</option>';
                data.forEach(d => select.innerHTML += `<option value="${d.maNv}">${d.hoTen}</option>`);

                if (data.length > 0) {
                    select.value = data[0].maNv;
                    fetchAttendanceRecords(data[0].maNv);
                    fetchOvertimeRecords(data[0].maNv);
                    fetchMakeupRecords(data[0].maNv);
                } else {
                    clearTables();
                }
            });
    }

    // Chọn/tắt chọn tất cả checkbox
    function toggleSelectAll(type) {
        const checkboxes = document.querySelectorAll(`#${type}TableBody input[type="checkbox"]`);
        const selectAll = document.getElementById(`selectAll${type.charAt(0).toUpperCase() + type.slice(1)}`);
        if (type === 'attendance') {
            selectedAttendanceIds = [];
            checkboxes.forEach(cb => {
                cb.checked = selectAll.checked;
                if (cb.checked) {
                    selectedAttendanceIds.push(parseInt(cb.value));
                }
            });
        } else if (type === 'overtime') {
            selectedOvertimeIds = [];
            checkboxes.forEach(cb => {
                cb.checked = selectAll.checked;
                if (cb.checked) {
                    selectedOvertimeIds.push(parseInt(cb.value));
                }
            });
        } else if (type === 'makeup') {
            selectedMakeupIds = [];
            checkboxes.forEach(cb => {
                cb.checked = selectAll.checked;
                if (cb.checked) {
                    selectedMakeupIds.push(parseInt(cb.value));
                }
            });
        }
    }

    // Bảng chấm công
    function fetchAttendanceRecords(maNv) {
        fetch(`/api/AttendanceManager/GetAttendanceManagerRecordsDerector?maNv=${maNv}`)
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    selectedAttendanceIds = [];
                    renderAttendanceTable(data.records);
                }
            });
    }

    function renderAttendanceTable(records) {
        const body = document.getElementById("attendanceTableBody");
        body.innerHTML = records.map(r => `
            <tr>
                <td><input type="checkbox" value="${r.maChamCong}" onchange="updateSelectedAttendance(${r.maChamCong}, this.checked)"></td>
                <td>${r.ngayLamViec}</td>
                <td>${r.gioVao || "-"}</td>
                <td>${r.gioRa || "-"}</td>
                <td>${r.tongGio}</td>
                <td class="${getStatusClass(r.trangThai)}">${trangThaiMap[r.trangThai] || r.trangThai}</td>
                <td>${r.ghiChu || "-"}</td>
                <td>
                    <button class="btn btn-success btn-sm me-1" onclick="approveAttendance(${r.maChamCong}, 'Đã duyệt')">✔</button>
                    <button class="btn btn-danger btn-sm" onclick="approveAttendance(${r.maChamCong}, 'Từ chối')">✖</button>
                </td>
            </tr>
        `).join("");
        document.getElementById("selectAllAttendance").checked = false;
    }

    function updateSelectedAttendance(maChamCong, isChecked) {
        if (isChecked) {
            selectedAttendanceIds.push(maChamCong);
        } else {
            selectedAttendanceIds = selectedAttendanceIds.filter(id => id !== maChamCong);
        }
    }

    function approveSelectedAttendance(trangThai) {
        if (selectedAttendanceIds.length === 0) {
            alert("Vui lòng chọn ít nhất một bản ghi để duyệt.");
            return;
        }
        submitMultipleApproval(selectedAttendanceIds, trangThai, "");
    }

    function rejectSelectedAttendance() {
        if (selectedAttendanceIds.length === 0) {
            alert("Vui lòng chọn ít nhất một bản ghi để từ chối.");
            return;
        }
        isBatchRejection = true;
        $('#rejectionModal').modal('show');
    }

    function getStatusClass(maTrangThai) {
        const tenTrangThai = trangThaiMap[maTrangThai] || maTrangThai;
        return tenTrangThai === "Đã duyệt" ? "text-success" : tenTrangThai === "Từ chối" ? "text-danger" : "text-warning";
    }

    let currentRejectionId = null;
    let isBatchRejection = false;

    function approveAttendance(maChamCong, trangThai) {
        if (trangThai === "Từ chối") {
            currentRejectionId = maChamCong;
            isBatchRejection = false;
            $('#rejectionModal').modal('show');
        } else {
            submitApproval(maChamCong, trangThai, "");
        }
    }

    function submitRejection() {
        const comment = document.getElementById('rejectionComment').value;
        if (isBatchRejection) {
            submitMultipleApproval(selectedAttendanceIds, "Từ chối", comment);
        } else if (currentRejectionId) {
            submitApproval(currentRejectionId, "Từ chối", comment);
        }
        $('#rejectionModal').modal('hide');
        document.getElementById('rejectionComment').value = '';
        currentRejectionId = null;
        isBatchRejection = false;
    }

    function submitApproval(maChamCong, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveAttendanceManagerDerector", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCong: maChamCong, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            alert(data.message);
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) {
                    fetchAttendanceRecords(selected);
                }
            }
        });
    }

    function submitMultipleApproval(maChamCongList, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveMultipleAttendanceManagerDerector", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCongList: maChamCongList, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            alert(data.message);
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) {
                    fetchAttendanceRecords(selected);
                }
            }
        });
    }

    // Bảng tăng ca
    function fetchOvertimeRecords(maNv) {
        fetch(`/api/AttendanceManager/GetOvertimeRecordsDerector?maNv=${maNv}`)
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    selectedOvertimeIds = [];
                    renderOvertimeTable(data.records);
                }
            });
    }

    function renderOvertimeTable(records) {
        const body = document.getElementById("overtimeTableBody");
        body.innerHTML = records.map(r => `
            <tr>
                <td><input type="checkbox" value="${r.maTangCa}" onchange="updateSelectedOvertime(${r.maTangCa}, this.checked)"></td>
                <td>${r.ngayTangCa}</td>
                <td>${r.soGioTangCa || "-"}</td>
                <td>${r.tyLeTangCa || "-"}</td>
                <td class="${getStatusClass(r.trangThai)}">${trangThaiMap[r.trangThai] || r.trangThai}</td>
                <td>
                    <button class="btn btn-success btn-sm me-1" onclick="approveOvertime(${r.maTangCa}, 'Đã duyệt')">✔</button>
                    <button class="btn btn-danger btn-sm" onclick="approveOvertime(${r.maTangCa}, 'Từ chối')">✖</button>
                </td>
            </tr>
        `).join("");
        document.getElementById("selectAllOvertime").checked = false;
    }

    function updateSelectedOvertime(maTangCa, isChecked) {
        if (isChecked) {
            selectedOvertimeIds.push(maTangCa);
        } else {
            selectedOvertimeIds = selectedOvertimeIds.filter(id => id !== maTangCa);
        }
    }

    function approveSelectedOvertime(trangThai) {
        if (selectedOvertimeIds.length === 0) {
            alert("Vui lòng chọn ít nhất một bản ghi để duyệt.");
            return;
        }
        submitMultipleOvertimeApproval(selectedOvertimeIds, trangThai, "");
    }

    function rejectSelectedOvertime() {
        if (selectedOvertimeIds.length === 0) {
            alert("Vui lòng chọn ít nhất một bản ghi để từ chối.");
            return;
        }
        isBatchOvertimeRejection = true;
        $('#overtimeRejectionModal').modal('show');
    }

    let currentOvertimeRejectionId = null;
    let isBatchOvertimeRejection = false;

    function approveOvertime(maTangCa, trangThai) {
        if (trangThai === "Từ chối") {
            currentOvertimeRejectionId = maTangCa;
            isBatchOvertimeRejection = false;
            $('#overtimeRejectionModal').modal('show');
        } else {
            submitOvertimeApproval(maTangCa, trangThai, "");
        }
    }

    function submitOvertimeRejection() {
        const comment = document.getElementById('overtimeRejectionComment').value;
        if (isBatchOvertimeRejection) {
            submitMultipleOvertimeApproval(selectedOvertimeIds, "Từ chối", comment);
        } else if (currentOvertimeRejectionId) {
            submitOvertimeApproval(currentOvertimeRejectionId, "Từ chối", comment);
        }
        $('#overtimeRejectionModal').modal('hide');
        document.getElementById('overtimeRejectionComment').value = '';
        currentOvertimeRejectionId = null;
        isBatchOvertimeRejection = false;
    }

    function submitOvertimeApproval(maTangCa, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveOvertimeDerector", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCong: maTangCa, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            alert(data.message);
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) {
                    fetchOvertimeRecords(selected);
                }
            }
        });
    }

    function submitMultipleOvertimeApproval(maTangCaList, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveMultipleOvertimeDerector", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCongList: maTangCaList, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            alert(data.message);
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) {
                    fetchOvertimeRecords(selected);
                }
            }
        });
    }

    // Makeup work functions
    function fetchMakeupRecords(maNv) {
        fetch(`/api/AttendanceManager/GetMakeupRecordsDerector?maNv=${maNv}`)
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    selectedMakeupIds = [];
                    renderMakeupTable(data.records);
                }
            });
    }

    function renderMakeupTable(records) {
        const body = document.getElementById("makeupTableBody");
        body.innerHTML = records.map(r => `
            <tr>
                <td><input type="checkbox" value="${r.maLamBu}" onchange="updateSelectedMakeup(${r.maLamBu}, this.checked)"></td>
                <td>${r.ngayLamViec}</td>
                <td>${r.gioVao || "-"}</td>
                <td>${r.gioRa || "-"}</td>
                <td>${r.tongGio || "-"}</td>
                <td class="${getStatusClass(r.trangThai)}">${trangThaiMap[r.trangThai] || r.trangThai}</td>
                <td>${r.ghiChu || "-"}</td>
                <td>
                    <button class="btn btn-success btn-sm me-1" onclick="approveMakeup(${r.maLamBu}, 'Đã duyệt')">✔</button>
                    <button class="btn btn-danger btn-sm" onclick="approveMakeup(${r.maLamBu}, 'Từ chối')">✖</button>
                </td>
            </tr>
        `).join("");
        document.getElementById("selectAllMakeup").checked = false;
    }

    function updateSelectedMakeup(maLamBu, isChecked) {
        if (isChecked) {
            selectedMakeupIds.push(maLamBu);
        } else {
            selectedMakeupIds = selectedMakeupIds.filter(id => id !== maLamBu);
        }
    }

    function approveSelectedMakeup(trangThai) {
        if (selectedMakeupIds.length === 0) {
            alert("Vui lòng chọn ít nhất một bản ghi để duyệt.");
            return;
        }
        submitMultipleMakeupApproval(selectedMakeupIds, trangThai, "");
    }

    function rejectSelectedMakeup() {
        if (selectedMakeupIds.length === 0) {
            alert("Vui lòng chọn ít nhất một bản ghi để từ chối.");
            return;
        }
        isBatchMakeupRejection = true;
        $('#makeupRejectionModal').modal('show');
    }

    let currentMakeupRejectionId = null;
    let isBatchMakeupRejection = false;

    function approveMakeup(maLamBu, trangThai) {
        if (trangThai === "Từ chối") {
            currentMakeupRejectionId = maLamBu;
            isBatchMakeupRejection = false;
            $('#makeupRejectionModal').modal('show');
        } else {
            submitMakeupApproval(maLamBu, trangThai, "");
        }
    }

    function submitMakeupRejection() {
        const comment = document.getElementById('makeupRejectionComment').value;
        if (isBatchMakeupRejection) {
            submitMultipleMakeupApproval(selectedMakeupIds, "Từ chối", comment);
        } else if (currentMakeupRejectionId) {
            submitMakeupApproval(currentMakeupRejectionId, "Từ chối", comment);
        }
        $('#makeupRejectionModal').modal('hide');
        document.getElementById('makeupRejectionComment').value = '';
        currentMakeupRejectionId = null;
        isBatchMakeupRejection = false;
    }

    function submitMakeupApproval(maLamBu, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveMakeupDerector", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCong: maLamBu, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            alert(data.message);
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) {
                    fetchMakeupRecords(selected);
                }
            }
        });
    }

    function submitMultipleMakeupApproval(maLamBuList, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveMultipleMakeupDerector", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCongList: maLamBuList, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            alert(data.message);
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) {
                    fetchMakeupRecords(selected);
                }
            }
        });
    }
</script>