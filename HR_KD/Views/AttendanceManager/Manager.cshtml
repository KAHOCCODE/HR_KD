@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}

<!-- External Styles -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

<!-- Main Container -->
<div class="min-h-screen bg-gray-50 p-6">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-semibold text-gray-800 flex items-center animate-fade-in">
                <i class="fas fa-fingerprint mr-3 text-indigo-600"></i> Quản Lý Chấm Công
            </h1>
            <p class="text-gray-500 mt-2 animate-fade-in">Duyệt và quản lý chấm công, tăng ca, và làm bù của nhân viên một cách hiệu quả.</p>
        </div>

        <!-- Filters Section -->
        <div class="bg-white shadow-md rounded-xl p-6 mb-8 animate-fade-in">
            <h2 class="text-lg font-semibold text-gray-700 mb-4">Bộ Lọc</h2>
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                <div>
                    <label for="departmentFilter" class="block text-sm font-medium text-gray-600">Phòng ban</label>
                    <select id="departmentFilter" class="w-full p-2.5 border rounded-lg focus:ring-2 focus:ring-indigo-500 text-sm transition duration-200">
                        <option value="">Tất cả</option>
                    </select>
                </div>
                <div>
                    <label for="positionFilter" class="block text-sm font-medium text-gray-600">Chức vụ</label>
                    <select id="positionFilter" class="w-full p-2.5 border rounded-lg focus:ring-2 focus:ring-indigo-500 text-sm transition duration-200">
                        <option value="">Tất cả</option>
                    </select>
                </div>
                <div>
                    <label for="employeeFilter" class="block text-sm font-medium text-gray-600">Nhân viên</label>
                    <select id="employeeFilter" class="w-full p-2.5 border rounded-lg focus:ring-2 focus:ring-indigo-500 text-sm transition duration-200">
                        <option value="">Chọn nhân viên</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Makeup Section (Full Width) -->
        <div class="bg-white shadow-md rounded-xl p-6 mb-8 animate-fade-in">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold text-gray-700 flex items-center">
                    <i class="fas fa-sync-alt mr-2 text-indigo-600"></i> Làm Bù
                </h2>
                <div class="space-x-2 flex items-center">
                    <button class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 flex items-center text-sm transition duration-200" onclick="approveSelectedMakeup('Đã duyệt')" data-bs-toggle="tooltip" title="Duyệt các bản ghi đã chọn">
                        <i class="fas fa-check mr-1"></i> Duyệt
                    </button>
                    <button class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 flex items-center text-sm transition duration-200" onclick="rejectSelectedMakeup()" data-bs-toggle="tooltip" title="Từ chối các bản ghi đã chọn">
                        <i class="fas fa-times mr-1"></i> Từ chối
                    </button>
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="w-full table-auto text-sm">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="p-3 text-left"><input type="checkbox" id="selectAllMakeup" onclick="toggleSelectAll('makeup')" class="h-4 w-4"></th>
                            <th class="p-3 text-left">Ngày</th>
                            <th class="p-3 text-left">Giờ vào</th>
                            <th class="p-3 text-left">Giờ ra</th>
                            <th class="p-3 text-left">Tổng giờ</th>
                            <th class="p-3 text-left">Trạng thái</th>
                            <th class="p-3 text-left">Ghi chú</th>
                            <th class="p-3 text-left">Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="makeupTableBody"></tbody>
                </table>
            </div>
        </div>

        <!-- Divider -->
        <div class="my-8 border-t border-gray-200"></div>

        <!-- Attendance and Overtime Sections (Two Columns) -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 animate-fade-in">
            <!-- Attendance Section -->
            <div class="bg-white shadow-md rounded-xl p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-semibold text-gray-700 flex items-center">
                        <i class="fas fa-calendar-check mr-2 text-indigo-600"></i> Chấm Công
                    </h2>
                    <div class="space-x-2 flex items-center">
                        <button class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 flex items-center text-sm transition duration-200" onclick="approveSelectedAttendance('Đã duyệt')" data-bs-toggle="tooltip" title="Duyệt các bản ghi đã chọn">
                            <i class="fas fa-check mr-1"></i> Duyệt
                        </button>
                        <button class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 flex items-center text-sm transition duration-200" onclick="rejectSelectedAttendance()" data-bs-toggle="tooltip" title="Từ chối các bản ghi đã chọn">
                            <i class="fas fa-times mr-1"></i> Từ chối
                        </button>
                        <button id="approveAllBtn" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 flex items-center text-sm transition duration-200" onclick="approveAllAttendanceForDepartment()" data-bs-toggle="tooltip" title="Duyệt tất cả bản ghi đủ điều kiện">
                            <i class="fas fa-check-circle mr-1"></i> Duyệt tổng thể
                        </button>
                    </div>
                </div>
                <div class="overflow-x-auto">
                    <table class="w-full table-auto text-sm">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="p-3 text-left"><input type="checkbox" id="selectAllAttendance" onclick="toggleSelectAll('attendance')" class="h-4 w-4"></th>
                                <th class="p-3 text-left">Ngày</th>
                                <th class="p-3 text-left">Giờ vào</th>
                                <th class="p-3 text-left">Giờ ra</th>
                                <th class="p-3 text-left">Tổng giờ</th>
                                <th class="p-3 text-left">Trạng thái</th>
                                <th class="p-3 text-left">Ghi chú</th>
                                <th class="p-3 text-left">Hành động</th>
                            </tr>
                        </thead>
                        <tbody id="attendanceTableBody"></tbody>
                    </table>
                </div>
            </div>

            <!-- Overtime Section -->
            <div class="bg-white shadow-md rounded-xl p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-semibold text-gray-700 flex items-center">
                        <i class="fas fa-clock mr-2 text-indigo-600"></i> Tăng Ca
                    </h2>
                    <div class="space-x-2 flex items-center">
                        <button class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 flex items-center text-sm transition duration-200" onclick="approveSelectedOvertime('Đã duyệt')" data-bs-toggle="tooltip" title="Duyệt các bản ghi đã chọn">
                            <i class="fas fa-check mr-1"></i> Duyệt
                        </button>
                        <button class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 flex items-center text-sm transition duration-200" onclick="rejectSelectedOvertime()" data-bs-toggle="tooltip" title="Từ chối các bản ghi đã chọn">
                            <i class="fas fa-times mr-1"></i> Từ chối
                        </button>
                    </div>
                </div>
                <div class="overflow-x-auto">
                    <table class="w-full table-auto text-sm">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="p-3 text-left"><input type="checkbox" id="selectAllOvertime" onclick="toggleSelectAll('overtime')" class="h-4 w-4"></th>
                                <th class="p-3 text-left">Ngày</th>
                                <th class="p-3 text-left">Số giờ</th>
                                <th class="p-3 text-left">Tỉ lệ</th>
                                <th class="p-3 text-left">Trạng thái</th>
                                <th class="p-3 text-left">Hành động</th>
                            </tr>
                        </thead>
                        <tbody id="overtimeTableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Rejection Modal -->
<div class="modal fade" id="rejectionModal" tabindex="-1" aria-labelledby="rejectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-xl">
            <div class="modal-header border-b-0">
                <h5 class="modal-title text-lg font-semibold" id="rejectionModalLabel">Lý Do Từ Chối Chấm Công</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="rejectionComment" class="block text-sm font-medium text-gray-600 mb-2">Ghi chú</label>
                <textarea id="rejectionComment" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200" rows="5" placeholder="Nhập lý do từ chối..."></textarea>
            </div>
            <div class="modal-footer border-t-0">
                <button type="button" class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition duration-200" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition duration-200" onclick="submitRejection()">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

<!-- Overtime Rejection Modal -->
<div class="modal fade" id="overtimeRejectionModal" tabindex="-1" aria-labelledby="overtimeRejectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-xl">
            <div class="modal-header border-b-0">
                <h5 class="modal-title text-lg font-semibold" id="overtimeRejectionModalLabel">Lý Do Từ Chối Tăng Ca</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="overtimeRejectionComment" class="block text-sm font-medium text-gray-600 mb-2">Ghi chú</label>
                <textarea id="overtimeRejectionComment" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200" rows="5" placeholder="Nhập lý do từ chối..."></textarea>
            </div>
            <div class="modal-footer border-t-0">
                <button type="button" class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition duration-200" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition duration-200" onclick="submitOvertimeRejection()">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

<!-- Makeup Rejection Modal -->
<div class="modal fade" id="makeupRejectionModal" tabindex="-1" aria-labelledby="makeupRejectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-xl">
            <div class="modal-header border-b-0">
                <h5 class="modal-title text-lg font-semibold" id="makeupRejectionModalLabel">Lý Do Từ Chối Làm Bù</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="makeupRejectionComment" class="block text-sm font-medium text-gray-600 mb-2">Ghi chú</label>
                <textarea id="makeupRejectionComment" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200" rows="5" placeholder="Nhập lý do từ chối..."></textarea>
            </div>
            <div class="modal-footer border-t-0">
                <button type="button" class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition duration-200" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition duration-200" onclick="submitMakeupRejection()">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

<!-- External Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<!-- JavaScript Logic -->
<script>
    let trangThaiMap = {};
    let selectedAttendanceIds = [];
    let selectedOvertimeIds = [];
    let selectedMakeupIds = [];

    document.addEventListener("DOMContentLoaded", function () {
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        loadTrangThai();
        loadDepartments();
        loadPositions();
        loadEmployees();

        document.getElementById("departmentFilter").addEventListener("change", loadEmployees);
        document.getElementById("positionFilter").addEventListener("change", loadEmployees);
        document.getElementById("employeeFilter").addEventListener("change", function () {
            const maNv = this.value;
            if (maNv) {
                fetchAttendanceRecords(maNv);
                fetchOvertimeRecords(maNv);
                fetchMakeupRecords(maNv);
            } else {
                clearTables();
            }
        });
    });

    function loadTrangThai() {
        fetch("/api/AttendanceManager/GetTrangThai")
            .then(res => res.json())
            .then(data => {
                trangThaiMap = {};
                data.forEach(tt => {
                    trangThaiMap[tt.maTrangThai] = tt.tenTrangThai;
                });
            });
    }

    function clearTables() {
        document.getElementById("attendanceTableBody").innerHTML = '';
        document.getElementById("overtimeTableBody").innerHTML = '';
        document.getElementById("makeupTableBody").innerHTML = '';
        selectedAttendanceIds = [];
        selectedOvertimeIds = [];
        selectedMakeupIds = [];
    }

    function loadDepartments() {
        fetch("/api/AttendanceManager/GetDepartmentsManager")
            .then(res => res.json())
            .then(data => {
                const select = document.getElementById("departmentFilter");
                select.innerHTML = '<option value="">Tất cả</option>';
                data.forEach(d => select.innerHTML += `<option value="${d.maPhongBan}">${d.tenPhongBan}</option>`);
            });
    }

    function loadPositions() {
        fetch("/api/AttendanceManager/GetPositionsManager")
            .then(res => res.json())
            .then(data => {
                const select = document.getElementById("positionFilter");
                select.innerHTML = '<option value="">Tất cả</option>';
                data.forEach(d => select.innerHTML += `<option value="${d.maChucVu}">${d.tenChucVu}</option>`);
            });
    }

    function loadEmployees() {
        const pb = document.getElementById("departmentFilter").value;
        const cv = document.getElementById("positionFilter").value;

        fetch(`/api/AttendanceManager/GetEmployeesManager?maPhongBan=${pb}&maChucVu=${cv}`)
            .then(res => res.json())
            .then(data => {
                const select = document.getElementById("employeeFilter");
                select.innerHTML = '<option value="">Chọn nhân viên</option>';
                data.forEach(d => select.innerHTML += `<option value="${d.maNv}">${d.hoTen}</option>`);

                if (data.length > 0) {
                    select.value = data[0].maNv;
                    fetchAttendanceRecords(data[0].maNv);
                    fetchOvertimeRecords(data[0].maNv);
                    fetchMakeupRecords(data[0].maNv);
                } else {
                    clearTables();
                }
            });
    }

    function toggleSelectAll(type) {
        const checkboxes = document.querySelectorAll(`#${type}TableBody input[type="checkbox"]`);
        const selectAll = document.getElementById(`selectAll${type.charAt(0).toUpperCase() + type.slice(1)}`);
        if (type === 'attendance') {
            selectedAttendanceIds = [];
            checkboxes.forEach(cb => {
                cb.checked = selectAll.checked;
                if (cb.checked) selectedAttendanceIds.push(parseInt(cb.value));
            });
        } else if (type === 'overtime') {
            selectedOvertimeIds = [];
            checkboxes.forEach(cb => {
                cb.checked = selectAll.checked;
                if (cb.checked) selectedOvertimeIds.push(parseInt(cb.value));
            });
        } else if (type === 'makeup') {
            selectedMakeupIds = [];
            checkboxes.forEach(cb => {
                cb.checked = selectAll.checked;
                if (cb.checked) selectedMakeupIds.push(parseInt(cb.value));
            });
        }
    }

    function fetchAttendanceRecords(maNv) {
        fetch(`/api/AttendanceManager/GetAttendanceManagerRecords?maNv=${maNv}`)
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    selectedAttendanceIds = [];
                    renderAttendanceTable(data.records);
                }
            });
    }

    function renderAttendanceTable(records) {
        const body = document.getElementById("attendanceTableBody");
        body.innerHTML = records.map(r => `
            <tr class="hover:bg-gray-50 transition duration-200">
                <td class="p-3"><input type="checkbox" value="${r.maChamCong}" onchange="updateSelectedAttendance(${r.maChamCong}, this.checked)" class="h-4 w-4"></td>
                <td class="p-3">${r.ngayLamViec}</td>
                <td class="p-3">${r.gioVao || "-"}</td>
                <td class="p-3">${r.gioRa || "-"}</td>
                <td class="p-3">${r.tongGio}</td>
                <td class="p-3"><span class="${getStatusClass(r.trangThai)}">${trangThaiMap[r.trangThai] || r.trangThai}</span></td>
                <td class="p-3">${r.ghiChu || "-"}</td>
                <td class="p-3 flex space-x-2">
                    <button class="bg-green-500 text-white p-2 rounded-lg hover:bg-green-600 transition duration-200" onclick="approveAttendance(${r.maChamCong}, 'Đã duyệt')" data-bs-toggle="tooltip" title="Duyệt bản ghi"><i class="fas fa-check"></i></button>
                    <button class="bg-red-500 text-white p-2 rounded-lg hover:bg-red-600 transition duration-200" onclick="approveAttendance(${r.maChamCong}, 'Từ chối')" data-bs-toggle="tooltip" title="Từ chối bản ghi"><i class="fas fa-times"></i></button>
                </td>
            </tr>
        `).join("");
        document.getElementById("selectAllAttendance").checked = false;
    }

    function updateSelectedAttendance(maChamCong, isChecked) {
        if (isChecked) {
            selectedAttendanceIds.push(maChamCong);
        } else {
            selectedAttendanceIds = selectedAttendanceIds.filter(id => id !== maChamCong);
        }
    }

    function approveSelectedAttendance(trangThai) {
        if (selectedAttendanceIds.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một bản ghi để duyệt.',
                confirmButtonText: 'OK'
            });
            return;
        }
        submitMultipleApproval(selectedAttendanceIds, trangThai, "");
    }

    function rejectSelectedAttendance() {
        if (selectedAttendanceIds.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một bản ghi để từ chối.',
                confirmButtonText: 'OK'
            });
            return;
        }
        isBatchRejection = true;
        $('#rejectionModal').modal('show');
    }

    function getStatusClass(maTrangThai) {
        const tenTrangThai = trangThaiMap[maTrangThai] || maTrangThai;
        return tenTrangThai === "Đã duyệt" ? "inline-block px-2 py-1 text-xs font-semibold text-green-800 bg-green-100 rounded" :
               tenTrangThai === "Từ chối" ? "inline-block px-2 py-1 text-xs font-semibold text-red-800 bg-red-100 rounded" :
               "inline-block px-2 py-1 text-xs font-semibold text-yellow-800 bg-yellow-100 rounded";
    }

    let currentRejectionId = null;
    let isBatchRejection = false;

    function approveAttendance(maChamCong, trangThai) {
        if (trangThai === "Từ chối") {
            currentRejectionId = maChamCong;
            isBatchRejection = false;
            $('#rejectionModal').modal('show');
        } else {
            submitApproval(maChamCong, trangThai, "");
        }
    }

    function submitRejection() {
        const comment = document.getElementById('rejectionComment').value;
        if (isBatchRejection) {
            submitMultipleApproval(selectedAttendanceIds, "Từ chối", comment);
        } else if (currentRejectionId) {
            submitApproval(currentRejectionId, "Từ chối", comment);
        }
        $('#rejectionModal').modal('hide');
        document.getElementById('rejectionComment').value = '';
        currentRejectionId = null;
        isBatchRejection = false;
    }

    function submitApproval(maChamCong, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveAttendanceManager", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCong: maChamCong, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            Swal.fire({
                icon: data.success ? 'success' : 'error',
                title: data.success ? 'Thành công!' : 'Lỗi!',
                text: data.message,
                confirmButtonText: 'OK'
            });
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) fetchAttendanceRecords(selected);
            }
        });
    }

    function submitMultipleApproval(maChamCongList, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveMultipleAttendanceManager", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCongList: maChamCongList, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            Swal.fire({
                icon: data.success ? 'success' : 'error',
                title: data.success ? 'Thành công!' : 'Lỗi!',
                text: data.message,
                confirmButtonText: 'OK'
            });
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) fetchAttendanceRecords(selected);
            }
        });
    }

    function fetchOvertimeRecords(maNv) {
        fetch(`/api/AttendanceManager/GetOvertimeRecords?maNv=${maNv}`)
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    selectedOvertimeIds = [];
                    renderOvertimeTable(data.records);
                }
            });
    }

    function renderOvertimeTable(records) {
        const body = document.getElementById("overtimeTableBody");
        body.innerHTML = records.map(r => `
            <tr class="hover:bg-gray-50 transition duration-200">
                <td class="p-3"><input type="checkbox" value="${r.maTangCa}" onchange="updateSelectedOvertime(${r.maTangCa}, this.checked)" class="h-4 w-4"></td>
                <td class="p-3">${r.ngayTangCa}</td>
                <td class="p-3">${r.soGioTangCa || "-"}</td>
                <td class="p-3">${r.tyLeTangCa || "-"}</td>
                <td class="p-3"><span class="${getStatusClass(r.trangThai)}">${trangThaiMap[r.trangThai] || r.trangThai}</span></td>
                <td class="p-3 flex space-x-2">
                    <button class="bg-green-500 text-white p-2 rounded-lg hover:bg-green-600 transition duration-200" onclick="approveOvertime(${r.maTangCa}, 'Đã duyệt')" data-bs-toggle="tooltip" title="Duyệt bản ghi"><i class="fas fa-check"></i></button>
                    <button class="bg-red-500 text-white p-2 rounded-lg hover:bg-red-600 transition duration-200" onclick="approveOvertime(${r.maTangCa}, 'Từ chối')" data-bs-toggle="tooltip" title="Từ chối bản ghi"><i class="fas fa-times"></i></button>
                </td>
            </tr>
        `).join("");
        document.getElementById("selectAllOvertime").checked = false;
    }

    function updateSelectedOvertime(maTangCa, isChecked) {
        if (isChecked) {
            selectedOvertimeIds.push(maTangCa);
        } else {
            selectedOvertimeIds = selectedOvertimeIds.filter(id => id !== maTangCa);
        }
    }

    function approveSelectedOvertime(trangThai) {
        if (selectedOvertimeIds.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một bản ghi để duyệt.',
                confirmButtonText: 'OK'
            });
            return;
        }
        submitMultipleOvertimeApproval(selectedOvertimeIds, trangThai, "");
    }

    function rejectSelectedOvertime() {
        if (selectedOvertimeIds.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một bản ghi để từ chối.',
                confirmButtonText: 'OK'
            });
            return;
        }
        isBatchOvertimeRejection = true;
        $('#overtimeRejectionModal').modal('show');
    }

    let currentOvertimeRejectionId = null;
    let isBatchOvertimeRejection = false;

    function approveOvertime(maTangCa, trangThai) {
        if (trangThai === "Từ chối") {
            currentOvertimeRejectionId = maTangCa;
            isBatchOvertimeRejection = false;
            $('#overtimeRejectionModal').modal('show');
        } else {
            submitOvertimeApproval(maTangCa, trangThai, "");
        }
    }

    function submitOvertimeRejection() {
        const comment = document.getElementById('overtimeRejectionComment').value;
        if (isBatchOvertimeRejection) {
            submitMultipleOvertimeApproval(selectedOvertimeIds, "Từ chối", comment);
        } else if (currentOvertimeRejectionId) {
            submitOvertimeApproval(currentOvertimeRejectionId, "Từ chối", comment);
        }
        $('#overtimeRejectionModal').modal('hide');
        document.getElementById('overtimeRejectionComment').value = '';
        currentOvertimeRejectionId = null;
        isBatchOvertimeRejection = false;
    }

    function submitOvertimeApproval(maTangCa, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveOvertime", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCong: maTangCa, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            Swal.fire({
                icon: data.success ? 'success' : 'error',
                title: data.success ? 'Thành công!' : 'Lỗi!',
                text: data.message,
                confirmButtonText: 'OK'
            });
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) fetchOvertimeRecords(selected);
            }
        });
    }

    function submitMultipleOvertimeApproval(maTangCaList, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveMultipleOvertime", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCongList: maTangCaList, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            Swal.fire({
                icon: data.success ? 'success' : 'error',
                title: data.success ? 'Thành công!' : 'Lỗi!',
                text: data.message,
                confirmButtonText: 'OK'
            });
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) fetchOvertimeRecords(selected);
            }
        });
    }

    function fetchMakeupRecords(maNv) {
        fetch(`/api/AttendanceManager/GetMakeupRecords?maNv=${maNv}`)
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    selectedMakeupIds = [];
                    renderMakeupTable(data.records);
                }
            });
    }

    function renderMakeupTable(records) {
        const body = document.getElementById("makeupTableBody");
        body.innerHTML = records.map(r => `
            <tr class="hover:bg-gray-50 transition duration-200">
                <td class="p-3"><input type="checkbox" value="${r.maLamBu}" onchange="updateSelectedMakeup(${r.maLamBu}, this.checked)" class="h-4 w-4"></td>
                <td class="p-3">${r.ngayLamViec}</td>
                <td class="p-3">${r.gioVao || "-"}</td>
                <td class="p-3">${r.gioRa || "-"}</td>
                <td class="p-3">${r.tongGio || "-"}</td>
                <td class="p-3"><span class="${getStatusClass(r.trangThai)}">${trangThaiMap[r.trangThai] || r.trangThai}</span></td>
                <td class="p-3">${r.ghiChu || "-"}</td>
                <td class="p-3 flex space-x-2">
                    <button class="bg-green-500 text-white p-2 rounded-lg hover:bg-green-600 transition duration-200" onclick="approveMakeup(${r.maLamBu}, 'Đã duyệt')" data-bs-toggle="tooltip" title="Duyệt bản ghi"><i class="fas fa-check"></i></button>
                    <button class="bg-red-500 text-white p-2 rounded-lg hover:bg-red-600 transition duration-200" onclick="approveMakeup(${r.maLamBu}, 'Từ chối')" data-bs-toggle="tooltip" title="Từ chối bản ghi"><i class="fas fa-times"></i></button>
                </td>
            </tr>
        `).join("");
        document.getElementById("selectAllMakeup").checked = false;
    }

    function updateSelectedMakeup(maLamBu, isChecked) {
        if (isChecked) {
            selectedMakeupIds.push(maLamBu);
        } else {
            selectedMakeupIds = selectedMakeupIds.filter(id => id !== maLamBu);
        }
    }

    function approveSelectedMakeup(trangThai) {
        if (selectedMakeupIds.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một bản ghi để duyệt.',
                confirmButtonText: 'OK'
            });
            return;
        }
        submitMultipleMakeupApproval(selectedMakeupIds, trangThai, "");
    }

    function rejectSelectedMakeup() {
        if (selectedMakeupIds.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một bản ghi để từ chối.',
                confirmButtonText: 'OK'
            });
            return;
        }
        isBatchMakeupRejection = true;
        $('#makeupRejectionModal').modal('show');
    }

    let currentMakeupRejectionId = null;
    let isBatchMakeupRejection = false;

    function approveMakeup(maLamBu, trangThai) {
        if (trangThai === "Từ chối") {
            currentMakeupRejectionId = maLamBu;
            isBatchMakeupRejection = false;
            $('#makeupRejectionModal').modal('show');
        } else {
            submitMakeupApproval(maLamBu, trangThai, "");
        }
    }

    function submitMakeupRejection() {
        const comment = document.getElementById('makeupRejectionComment').value;
        if (isBatchMakeupRejection) {
            submitMultipleMakeupApproval(selectedMakeupIds, "Từ chối", comment);
        } else if (currentMakeupRejectionId) {
            submitMakeupApproval(currentMakeupRejectionId, "Từ chối", comment);
        }
        $('#makeupRejectionModal').modal('hide');
        document.getElementById('makeupRejectionComment').value = '';
        currentMakeupRejectionId = null;
        isBatchMakeupRejection = false;
    }

    function submitMakeupApproval(maLamBu, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveMakeup", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCong: maLamBu, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            Swal.fire({
                icon: data.success ? 'success' : 'error',
                title: data.success ? 'Thành công!' : 'Lỗi!',
                text: data.message,
                confirmButtonText: 'OK'
            });
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) fetchMakeupRecords(selected);
            }
        });
    }

    function submitMultipleMakeupApproval(maLamBuList, trangThai, ghiChu) {
        fetch("/api/AttendanceManager/ApproveMultipleMakeup", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                maChamCongList: maLamBuList, 
                trangThai: trangThai,
                ghiChu: ghiChu
            })
        })
        .then(res => res.json())
        .then(data => {
            Swal.fire({
                icon: data.success ? 'success' : 'error',
                title: data.success ? 'Thành công!' : 'Lỗi!',
                text: data.message,
                confirmButtonText: 'OK'
            });
            if (data.success) {
                const selected = document.getElementById("employeeFilter").value;
                if (selected) fetchMakeupRecords(selected);
            }
        });
    }

    function approveAllAttendanceForDepartment() {
        const btn = document.getElementById('approveAllBtn');
        btn.disabled = true;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Đang xử lý...';
        fetch('/api/AttendanceManager/ApproveAllAttendanceForDepartment', {
            method: 'POST'
        })
        .then(res => res.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'Thành công!',
                text: `Đã duyệt: ${data.totalApproved} bản ghi. Không duyệt: ${data.totalFailed} bản ghi.`,
                confirmButtonText: 'OK'
            });
            const selected = document.getElementById("employeeFilter").value;
            if (selected) fetchAttendanceRecords(selected);
        })
        .catch(err => {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Có lỗi xảy ra khi duyệt tổng thể!',
                confirmButtonText: 'OK'
            });
        })
        .finally(() => {
            btn.disabled = false;
            btn.innerHTML = '<i class="fas fa-check-circle mr-1"></i> Duyệt tổng thể';
        });
    }
</script>