```cshtml
@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css">
<link rel="stylesheet" href="~/css/attendrequest.css">
<style>
    .dashboard-card {
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .table th, .table td {
        vertical-align: middle;
    }

    #selectedDates div {
        padding: 5px;
        background-color: #f8f9fa;
        margin-bottom: 5px;
        border-radius: 4px;
    }

    #attendanceCalendar {
        background-color: #fff;
    }
</style>

<div id="attendanceSection" class="dashboard-card bg-white p-4 rounded shadow">
    <h5 class="mb-4 text-primary"><i class="fas fa-fingerprint me-2"></i> Yêu Cầu Chấm Công</h5>

    <!-- Email Reminder Section -->
    <div class="row mb-4">
        <div class="col-md-6">
            <label for="emailWeekPicker" class="form-label fw-bold">Chọn tuần để gửi email nhắc nhở</label>
            <input type="text" class="form-control" id="emailWeekPicker" placeholder="Chọn tuần">
        </div>
        <div class="col-md-6 d-flex align-items-end">
            <button class="btn btn-warning w-100" id="sendReminderEmails"><i class="fas fa-envelope me-2"></i> Gửi Email Nhắc Nhở</button>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="row mb-4">
        <div class="col-md-4">
            <label for="departmentFilter" class="form-label fw-bold">Phòng Ban</label>
            <select class="form-control" id="departmentFilter">
                <option value="">Tất cả</option>
            </select>
        </div>
        <div class="col-md-4">
            <label for="positionFilter" class="form-label fw-bold">Chức Vụ</label>
            <select class="form-control" id="positionFilter">
                <option value="">Tất cả</option>
            </select>
        </div>
        <div class="col-md-4">
            <label for="employeeFilter" class="form-label fw-bold">Nhân Viên</label>
            <select class="form-control" id="employeeFilter">
                <option value="">Chọn nhân viên</option>
            </select>
        </div>
    </div>

    <!-- Date and Calendar Section -->
    <div class="row mb-4">
        <div class="col-md-6">
            <label for="attendanceDateRange" class="form-label fw-bold">Chọn Ngày Làm Việc</label>
            <input type="text" class="form-control" id="attendanceDateRange" placeholder="Chọn ngày làm việc">
            <div class="mt-3">
                <label class="form-label fw-bold">Các ngày làm việc đã chọn</label>
                <div id="selectedDates" class="border p-2 rounded"></div>
            </div>
        </div>
        <div class="col-md-6">
            <div id="attendanceCalendar" class="border rounded p-2"></div>
        </div>
    </div>

    <!-- Time Input Section -->
    <div class="row mb-4">
        <div class="col-md-6">
            <label for="checkInTime" class="form-label fw-bold">Giờ Check-in</label>
            <input type="time" class="form-control" id="checkInTime" value="08:00">
        </div>
        <div class="col-md-6">
            <label for="checkOutTime" class="form-label fw-bold">Giờ Check-out</label>
            <input type="time" class="form-control" id="checkOutTime" value="18:00">
        </div>
    </div>

    <!-- Weekly Hours and Note -->
    <div class="row mb-4">
        <div class="col-md-6">
            <label for="weeklyHours" class="form-label fw-bold">Tổng Số Giờ Làm</label>
            <input type="text" class="form-control" id="weeklyHours" readonly>
        </div>
        <div class="col-md-6">
            <label for="attendanceNote" class="form-label fw-bold">Ghi Chú</label>
            <textarea class="form-control" id="attendanceNote" rows="3" placeholder="Nhập ghi chú (nếu có)"></textarea>
        </div>
    </div>

    <!-- Submit Button -->
    <div class="mb-4">
        <button class="btn btn-primary w-100" id="submitAttendance"><i class="fas fa-check me-2"></i> Gửi Yêu Cầu Chấm Công</button>
    </div>

    <!-- Attendance Records Table -->
    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="table-primary">
                <tr>
                    <th>Ngày Làm Việc</th>
                    <th>Giờ Vào</th>
                    <th>Giờ Ra</th>
                    <th>Tổng Giờ</th>
                    <th>Trạng Thái</th>
                    <th>Ghi Chú</th>
                </tr>
            </thead>
            <tbody id="attendanceTableBody"></tbody>
        </table>
    </div>
</div>

@section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                // DOM Elements
                const selectedWorkDays = new Set();
                const departmentFilter = document.getElementById("departmentFilter");
                const positionFilter = document.getElementById("positionFilter");
                const employeeFilter = document.getElementById("employeeFilter");
                const attendanceDateRange = document.getElementById("attendanceDateRange");
                const emailWeekPicker = document.getElementById("emailWeekPicker");
                const sendReminderEmailsBtn = document.getElementById("sendReminderEmails");
                const attendanceTableBody = document.getElementById("attendanceTableBody");
                const checkInTime = document.getElementById("checkInTime");
                const checkOutTime = document.getElementById("checkOutTime");
                const weeklyHours = document.getElementById("weeklyHours");
                const selectedDatesDiv = document.getElementById("selectedDates");
                const attendanceNote = document.getElementById("attendanceNote");
                const submitAttendanceBtn = document.getElementById("submitAttendance");

                // Initialize
                init();

                function init() {
                    loadSelectOptions("/api/AttendanceRequestManager/GetDepartmentsManager", departmentFilter, "maPhongBan", "tenPhongBan");
                    loadSelectOptions("/api/AttendanceRequestManager/GetPositionsManager", positionFilter, "maChucVu", "tenChucVu");

                    departmentFilter.addEventListener("change", loadEmployees);
                    positionFilter.addEventListener("change", loadEmployees);
                    employeeFilter.addEventListener("change", () => {
                        if (employeeFilter.value) {
                            fetchAttendanceRecords(employeeFilter.value);
                            calendar.refetchEvents();
                        } else {
                            attendanceTableBody.innerHTML = "";
                            calendar.refetchEvents();
                        }
                    });

                    initFlatpickrs();
                    initCalendar();
                    initEvents();
                    updateTotalHours(); // Calculate initial hours based on default times
                }

                // Load dropdown options
                function loadSelectOptions(url, selectElement, valueField, textField) {
                    fetch(url)
                        .then(res => res.json())
                        .then(data => {
                            selectElement.innerHTML = '<option value="">Tất cả</option>';
                            data.forEach(item => {
                                const option = document.createElement("option");
                                option.value = item[valueField];
                                option.textContent = item[textField];
                                selectElement.appendChild(option);
                            });
                        })
                        .catch(error => console.error(`Error loading ${textField}:`, error));
                }

                // Load employees based on filters
                function loadEmployees() {
                    const maPhongBan = departmentFilter.value;
                    const maChucVu = positionFilter.value;
                    const url = `/api/AttendanceRequestManager/GetEmployeesManager?maPhongBan=${maPhongBan || ''}&maChucVu=${maChucVu || ''}`;
                    fetch(url)
                        .then(res => res.json())
                        .then(data => {
                            employeeFilter.innerHTML = '<option value="">Chọn nhân viên</option>';
                            data.forEach(emp => {
                                const option = document.createElement("option");
                                option.value = emp.maNv;
                                option.textContent = emp.hoTen;
                                employeeFilter.appendChild(option);
                            });
                        })
                        .catch(error => console.error("Error loading employees:", error));
                }

                // Fetch and render attendance records
                function fetchAttendanceRecords(maNv) {
                    fetch(`/api/AttendanceRequestManager/GetAttendanceManagerRecords?maNv=${maNv}`)
                        .then(res => res.json())
                        .then(data => {
                            if (data.success) {
                                renderAttendanceTable(data.records);
                            } else {
                                attendanceTableBody.innerHTML = '<tr><td colspan="6" class="text-center">Không có dữ liệu</td></tr>';
                            }
                        })
                        .catch(error => {
                            console.error("Error fetching attendance records:", error);
                            attendanceTableBody.innerHTML = '<tr><td colspan="6" class="text-center">Lỗi tải dữ liệu</td></tr>';
                        });
                }

                // Render attendance table
                function renderAttendanceTable(records) {
                    attendanceTableBody.innerHTML = records.length ? records.map(record => `
                        <tr>
                            <td>${record.ngayLamViec}</td>
                            <td>${record.gioVao || '-'}</td>
                            <td>${record.gioRa || '-'}</td>
                            <td>${record.tongGio || '0'}</td>
                            <td>${record.trangThai || 'Chưa duyệt'}</td>
                            <td>${record.ghiChu || '-'}</td>
                        </tr>
                    `).join('') : '<tr><td colspan="6" class="text-center">Không có dữ liệu</td></tr>';
                }

                // Initialize Flatpickr for date pickers
                function initFlatpickrs() {
                    flatpickr(attendanceDateRange, {
                        mode: "multiple",
                        dateFormat: "Y-m-d",
                        disable: [date => date.getDay() === 0], // Disable Sundays
                        locale: { firstDayOfWeek: 1 },
                        onChange(selectedDates) {
                            selectedWorkDays.clear();
                            selectedDates.forEach(date => {
                                const localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
                                selectedWorkDays.add(localDate.toISOString().split('T')[0]);
                            });
                            selectedDatesDiv.innerHTML = [...selectedWorkDays].map(date => `<div>${date}</div>`).join('');
                            updateTotalHours();
                        }
                    });

                    flatpickr(emailWeekPicker, {
                        mode: "single",
                        dateFormat: "Y-m-d",
                        weekNumbers: true,
                        onChange(selectedDates) {
                            if (selectedDates.length) {
                                const selectedDate = new Date(selectedDates[0]);
                                const startOfWeek = new Date(selectedDate.setDate(selectedDate.getDate() - selectedDate.getDay() + 1));
                                const endOfWeek = new Date(startOfWeek);
                                endOfWeek.setDate(startOfWeek.getDate() + 6);
                                emailWeekPicker.value = `${startOfWeek.toISOString().split('T')[0]}`;
                            }
                        }
                    });
                }

                // Initialize FullCalendar
                function initCalendar() {
                    const calendarEl = document.getElementById("attendanceCalendar");
                    if (!calendarEl) {
                        console.error("Calendar element not found!");
                        return;
                    }
                    calendar = new FullCalendar.Calendar(calendarEl, {
                        initialView: "dayGridMonth",
                        locale: "vi",
                        height: "auto",
                        events: (fetchInfo, successCallback, failureCallback) => {
                            if (!employeeFilter.value) return successCallback([]);
                            fetch(`/api/AttendanceRequestManager/GetAttendanceManagerRecords?maNv=${employeeFilter.value}`)
                                .then(res => res.json())
                                .then(data => {
                                    if (data.success) {
                                        const events = data.records.map(r => ({
                                            title: r.trangThai === "Chờ duyệt" ? "Chưa duyệt" : "Đã duyệt",
                                            start: r.ngayLamViec,
                                            color: r.trangThai === "Chờ duyệt" ? "#007bff" : "#28a745"
                                        }));
                                        successCallback(events);
                                    } else {
                                        successCallback([]);
                                    }
                                })
                                .catch(() => successCallback([]));
                        },
                        eventClick: function(info) {
                            Swal.fire({
                                title: info.event.title,
                                text: `Ngày: ${info.event.start.toISOString().split('T')[0]}`,
                                icon: "info"
                            });
                        }
                    });
                    calendar.render();
                }

                // Initialize event listeners
                function initEvents() {
                    checkInTime.addEventListener("change", updateTotalHours);
                    checkOutTime.addEventListener("change", updateTotalHours);
                    submitAttendanceBtn.addEventListener("click", submitAttendanceRequest);
                    sendReminderEmailsBtn.addEventListener("click", sendReminderEmails);
                }

                // Calculate daily working hours (subtract 2-hour lunch break)
                function calculateDailyHours(checkIn, checkOut) {
                    if (!checkIn || !checkOut) return 0;
                    const inTime = new Date(`2000-01-01T${checkIn}:00`);
                    const outTime = new Date(`2000-01-01T${checkOut}:00`);
                    if (outTime <= inTime) return 0;
                    const totalHours = (outTime - inTime) / 3600000; // Convert milliseconds to hours
                    const workingHours = totalHours - 2; // Subtract 2-hour lunch break
                    return workingHours > 0 ? workingHours.toFixed(2) : 0;
                }

                // Update total weekly hours
                function updateTotalHours() {
                    const checkIn = checkInTime.value;
                    const checkOut = checkOutTime.value;
                    const dailyHours = calculateDailyHours(checkIn, checkOut);
                    const total = [...selectedWorkDays].reduce((sum) => sum + parseFloat(dailyHours || 0), 0);
                    weeklyHours.value = total.toFixed(2);
                }

                // Reset form after submission
                function resetForm() {
                    attendanceDateRange._flatpickr.clear();
                    selectedDatesDiv.innerHTML = "";
                    checkInTime.value = "08:00"; // Reset to default
                    checkOutTime.value = "18:00"; // Reset to default
                    attendanceNote.value = "";
                    weeklyHours.value = "";
                    selectedWorkDays.clear();
                    updateTotalHours(); // Update hours after reset
                    if (employeeFilter.value) fetchAttendanceRecords(employeeFilter.value);
                }

                // Submit attendance request
                function submitAttendanceRequest() {
                    const maNv = employeeFilter.value;
                    if (!maNv) return Swal.fire("Lỗi!", "Vui lòng chọn nhân viên.", "error");
                    if (!selectedWorkDays.size) return Swal.fire("Lỗi!", "Vui lòng chọn ít nhất một ngày làm việc.", "error");
                    if (!checkInTime.value || !checkOutTime.value) return Swal.fire("Lỗi!", "Vui lòng nhập giờ check-in và check-out.", "error");

                    const attendanceData = [...selectedWorkDays].map(day => ({
                        ngayLamViec: day,
                        gioVaoMoi: checkInTime.value,
                        gioRaMoi: checkOutTime.value,
                        tongGio: parseFloat(calculateDailyHours(checkInTime.value, checkOutTime.value)),
                        lyDo: attendanceNote.value.trim() || null
                    }));

                    fetch('/api/AttendanceRequestManager/SubmitAttendanceRequest', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(attendanceData)
                    })
                        .then(res => res.json())
                        .then(data => {
                            Swal.fire({
                                icon: data.success ? "success" : "error",
                                title: data.success ? "Thành công!" : "Lỗi!",
                                text: data.message || (data.success ? "Yêu cầu chấm công đã được gửi." : "Không thể gửi yêu cầu.")
                            }).then(() => {
                                if (data.success) resetForm();
                            });
                        })
                        .catch(() => Swal.fire("Lỗi!", "Không thể kết nối đến server.", "error"));
                }

                // Send reminder emails
                function sendReminderEmails() {
                    const startDate = emailWeekPicker.value;
                    if (!startDate) return Swal.fire("Lỗi!", "Vui lòng chọn tuần để gửi email nhắc nhở.", "error");

                    Swal.fire({
                        title: "Xác nhận",
                        text: `Bạn có chắc muốn gửi email nhắc nhở cho tuần bắt đầu từ ${startDate}?`,
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonText: "Gửi",
                        cancelButtonText: "Hủy"
                    }).then(result => {
                        if (result.isConfirmed) {
                            fetch('/api/AttendanceRequestManager/SendReminderEmails', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ startDate })
                            })
                                .then(res => res.json())
                                .then(data => {
                                    Swal.fire({
                                        icon: data.success ? "success" : "error",
                                        title: data.success ? "Thành công!" : "Lỗi!",
                                        text: data.message || (data.success ? "Email đã được gửi thành công." : "Không thể gửi email.")
                                    });
                                })
                                .catch(() => Swal.fire("Lỗi!", "Không thể kết nối đến server.", "error"));
                        }
                    });
                }
            });
        </script>
}
```