@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css">
<link rel="stylesheet" href="~/css/attendrequest.css">
<style>
    .dashboard-card {
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .table th, .table td {
        vertical-align: middle;
    }

    #selectedDates div {
        padding: 5px;
        background-color: #f8f9fa;
        margin-bottom: 5px;
        border-radius: 4px;
    }

    #attendanceCalendar {
        background-color: #fff;
    }

    .section-title {
        color: #0d6efd;
        margin-bottom: 1.5rem;
    }

    .btn-send-email {
        width: 100%;
    }
</style>

<!-- Section 1: Attendance Requests -->
<div id="attendanceSection" class="dashboard-card bg-white p-4">
    <h5 class="section-title"><i class="fas fa-fingerprint me-2"></i> Yêu Cầu Chấm Công</h5>
    
    <div class="row mb-4">
        <div class="col-md-6">
            <label for="attendanceWeekPicker" class="form-label fw-bold">Chọn tuần để kiểm tra chấm công</label>
            <input type="text" class="form-control" id="attendanceWeekPicker" placeholder="Chọn tuần">
        </div>
        <div class="col-md-6 d-flex align-items-end">
            <button class="btn btn-primary btn-send-email" id="sendAttendanceReminders">
                <i class="fas fa-envelope me-2"></i> Gửi Email Nhắc Nhở Chấm Công
            </button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="table-primary">
                <tr>
                    <th>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="selectAllAttendance">
                            <label class="form-check-label" for="selectAllAttendance">Chọn tất cả</label>
                        </div>
                    </th>
                    <th>Mã NV</th>
                    <th>Họ Tên</th>
                    <th>Phòng Ban</th>
                    <th>Ngày Thiếu</th>
                    <th>Trạng Thái</th>
                </tr>
            </thead>
            <tbody id="attendanceTableBody"></tbody>
        </table>
    </div>
</div>

<!-- Section 2: Make-up Work Requests -->
<div id="makeupSection" class="dashboard-card bg-white p-4">
    <h5 class="section-title"><i class="fas fa-clock me-2"></i> Yêu Cầu Làm Bù</h5>
    
    <div class="row mb-4">
        <div class="col-md-6">
            <label for="makeupWeekPicker" class="form-label fw-bold">Chọn tuần để kiểm tra giờ làm bù</label>
            <input type="text" class="form-control" id="makeupWeekPicker" placeholder="Chọn tuần">
        </div>
        <div class="col-md-6 d-flex align-items-end">
            <button class="btn btn-warning btn-send-email" id="sendMakeupReminders">
                <i class="fas fa-envelope me-2"></i> Gửi Email Nhắc Nhở Làm Bù
            </button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="table-primary">
                <tr>
                    <th>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="selectAllMakeup">
                            <label class="form-check-label" for="selectAllMakeup">Chọn tất cả</label>
                        </div>
                    </th>
                    <th>Mã NV</th>
                    <th>Họ Tên</th>
                    <th>Phòng Ban</th>
                    <th>Số Giờ Cần Bù</th>
                    <th>Thời Hạn</th>
                </tr>
            </thead>
            <tbody id="makeupTableBody"></tbody>
        </table>
    </div>
</div>

@* <!-- Section 3: Overtime Requests -->
<div id="overtimeSection" class="dashboard-card bg-white p-4">
    <h5 class="section-title"><i class="fas fa-business-time me-2"></i> Yêu Cầu Tăng Ca</h5>
    
    <div class="row mb-4">
        <div class="col-md-4">
            <label for="overtimeDepartment" class="form-label fw-bold">Phòng Ban</label>
            <select class="form-control" id="overtimeDepartment">
                <option value="">Tất cả</option>
            </select>
        </div>
        <div class="col-md-4">
            <label for="overtimePosition" class="form-label fw-bold">Chức Vụ</label>
            <select class="form-control" id="overtimePosition">
                <option value="">Tất cả</option>
            </select>
        </div>
        <div class="col-md-4">
            <label for="overtimeEmployee" class="form-label fw-bold">Nhân Viên</label>
            <select class="form-control" id="overtimeEmployee">
                <option value="">Chọn nhân viên</option>
            </select>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <label for="overtimeWeekPicker" class="form-label fw-bold">Chọn tuần tăng ca</label>
            <input type="text" class="form-control" id="overtimeWeekPicker" placeholder="Chọn tuần">
        </div>
        <div class="col-md-6">
            <label for="overtimeHours" class="form-label fw-bold">Số giờ tăng ca</label>
            <input type="number" class="form-control" id="overtimeHours" min="1" max="40" value="1">
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <button class="btn btn-success btn-send-email" id="sendOvertimeRequest">
                <i class="fas fa-envelope me-2"></i> Gửi Yêu Cầu Tăng Ca
            </button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="table-primary">
                <tr>
                    <th>Mã NV</th>
                    <th>Họ Tên</th>
                    <th>Phòng Ban</th>
                    <th>Tuần Tăng Ca</th>
                    <th>Số Giờ</th>
                    <th>Trạng Thái</th>
                </tr>
            </thead>
            <tbody id="overtimeTableBody"></tbody>
        </table>
    </div> *@
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Initialize all components
            initFlatpickrs();
            initSelects();
            initEventListeners();
            initSelectAllCheckboxes();
        });

        function initFlatpickrs() {
            // Initialize all week pickers with week selection mode
            const weekPickers = ['attendanceWeekPicker', 'makeupWeekPicker', 'overtimeWeekPicker'];
            weekPickers.forEach(id => {
                flatpickr(`#${id}`, {
                    mode: "single",
                    dateFormat: "Y-m-d",
                    weekNumbers: true,
                    onChange: function(selectedDates) {
                        if (selectedDates.length) {
                            const selectedDate = new Date(selectedDates[0]);
                            const startOfWeek = new Date(selectedDate);
                            startOfWeek.setDate(selectedDate.getDate() - selectedDate.getDay() + 1);
                            const endOfWeek = new Date(startOfWeek);
                            endOfWeek.setDate(startOfWeek.getDate() + 6);

                            // Update the respective table based on which picker was changed
                            if (id === 'attendanceWeekPicker') {
                                fetchAttendanceData(startOfWeek, endOfWeek);
                            } else if (id === 'makeupWeekPicker') {
                                fetchMakeupData(startOfWeek, endOfWeek);
                            } else if (id === 'overtimeWeekPicker') {
                                fetchOvertimeData(startOfWeek, endOfWeek);
                            }
                        }
                    }
                });
            });
        }

        function initSelects() {
            // Load departments
            fetch('/api/AttendanceRequestManager/GetDepartmentsManager')
                .then(res => res.json())
                .then(data => {
                    const deptSelect = document.getElementById('overtimeDepartment');
                    data.forEach(dept => {
                        const option = document.createElement('option');
                        option.value = dept.maPhongBan;
                        option.textContent = dept.tenPhongBan;
                        deptSelect.appendChild(option);
                    });
                });

            // Load positions
            fetch('/api/AttendanceRequestManager/GetPositionsManager')
                .then(res => res.json())
                .then(data => {
                    const posSelect = document.getElementById('overtimePosition');
                    data.forEach(pos => {
                        const option = document.createElement('option');
                        option.value = pos.maChucVu;
                        option.textContent = pos.tenChucVu;
                        posSelect.appendChild(option);
                    });
                });

            // Add event listeners for department and position changes
            document.getElementById('overtimeDepartment').addEventListener('change', loadEmployees);
            document.getElementById('overtimePosition').addEventListener('change', loadEmployees);
        }

        function loadEmployees() {
            const deptId = document.getElementById('overtimeDepartment').value;
            const posId = document.getElementById('overtimePosition').value;
            
            fetch(`/api/AttendanceRequestManager/GetEmployeesManager?maPhongBan=${deptId}&maChucVu=${posId}`)
                .then(res => res.json())
                .then(data => {
                    const empSelect = document.getElementById('overtimeEmployee');
                    empSelect.innerHTML = '<option value="">Chọn nhân viên</option>';
                    data.forEach(emp => {
                        const option = document.createElement('option');
                        option.value = emp.maNv;
                        option.textContent = emp.hoTen;
                        empSelect.appendChild(option);
                    });
                });
        }

        function initEventListeners() {
            // Attendance reminder button
            document.getElementById('sendAttendanceReminders').addEventListener('click', function() {
                const weekPicker = document.getElementById('attendanceWeekPicker');
                if (!weekPicker.value) {
                    Swal.fire('Lỗi!', 'Vui lòng chọn tuần để gửi nhắc nhở.', 'error');
                    return;
                }
                sendAttendanceReminders(weekPicker.value);
            });

            // Makeup reminder button
            document.getElementById('sendMakeupReminders').addEventListener('click', function() {
                const weekPicker = document.getElementById('makeupWeekPicker');
                if (!weekPicker.value) {
                    Swal.fire('Lỗi!', 'Vui lòng chọn tuần để gửi nhắc nhở.', 'error');
                    return;
                }
                sendMakeupReminders(weekPicker.value);
            });

            // Overtime request button
            document.getElementById('sendOvertimeRequest').addEventListener('click', function() {
                const employeeId = document.getElementById('overtimeEmployee').value;
                const weekPicker = document.getElementById('overtimeWeekPicker');
                const hours = document.getElementById('overtimeHours').value;

                if (!employeeId || !weekPicker.value || !hours) {
                    Swal.fire('Lỗi!', 'Vui lòng điền đầy đủ thông tin.', 'error');
                    return;
                }
                sendOvertimeRequest(employeeId, weekPicker.value, hours);
            });
        }

        function fetchAttendanceData(startDate, endDate) {
            fetch(`/api/AttendanceRequestManager/GetMissingAttendance?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`)
                .then(res => res.json())
                .then(data => {
                    const tbody = document.getElementById('attendanceTableBody');
                    tbody.innerHTML = data.map(emp => `
                        <tr>
                            <td>
                                <div class="form-check">
                                    <input class="form-check-input attendance-checkbox" type="checkbox" 
                                           value="${emp.maNv}" data-email="${emp.email}">
                                </div>
                            </td>
                            <td>${emp.maNv}</td>
                            <td>${emp.hoTen}</td>
                            <td>${emp.tenPhongBan}</td>
                            <td>${emp.ngayThieu.join(', ')}</td>
                            <td>${emp.trangThai}</td>
                        </tr>
                    `).join('');
                });
        }

        function fetchMakeupData(startDate, endDate) {
            fetch(`/api/AttendanceRequestManager/GetMakeupHours?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`)
                .then(res => res.json())
                .then(data => {
                    const tbody = document.getElementById('makeupTableBody');
                    tbody.innerHTML = data.map(emp => `
                        <tr>
                            <td>
                                <div class="form-check">
                                    <input class="form-check-input makeup-checkbox" type="checkbox" 
                                           value="${emp.maNv}" data-email="${emp.email}">
                                </div>
                            </td>
                            <td>${emp.maNv}</td>
                            <td>${emp.hoTen}</td>
                            <td>${emp.tenPhongBan}</td>
                            <td>${emp.soGioCanBu}</td>
                            <td>${emp.thoiHan}</td>
                        </tr>
                    `).join('');
                });
        }

        function fetchOvertimeData(startDate, endDate) {
            const employeeId = document.getElementById('overtimeEmployee').value;
            if (!employeeId) return;

            fetch(`/api/AttendanceRequestManager/GetOvertimeRequests?maNv=${employeeId}&startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`)
                .then(res => res.json())
                .then(data => {
                    const tbody = document.getElementById('overtimeTableBody');
                    tbody.innerHTML = data.map(req => `
                        <tr>
                            <td>${req.maNv}</td>
                            <td>${req.hoTen}</td>
                            <td>${req.tenPhongBan}</td>
                            <td>${req.tuanTangCa}</td>
                            <td>${req.soGio}</td>
                            <td>${req.trangThai}</td>
                        </tr>
                    `).join('');
                });
        }

        function sendAttendanceReminders(startDate) {
            const selectedEmployees = Array.from(document.querySelectorAll('.attendance-checkbox:checked'))
                .map(checkbox => ({
                    maNv: checkbox.value,
                    email: checkbox.dataset.email
                }));

            if (selectedEmployees.length === 0) {
                Swal.fire('Lỗi!', 'Vui lòng chọn ít nhất một nhân viên để gửi nhắc nhở.', 'error');
                return;
            }

            Swal.fire({
                title: 'Xác nhận',
                text: `Bạn có chắc muốn gửi email nhắc nhở chấm công cho ${selectedEmployees.length} nhân viên đã chọn?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Gửi',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/api/AttendanceRequestManager/SendAttendanceReminders', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            startDate,
                            selectedEmployees 
                        })
                    })
                    .then(res => res.json())
                    .then(data => {
                        Swal.fire('Thành công!', data.message, 'success');
                    })
                    .catch(() => {
                        Swal.fire('Lỗi!', 'Không thể gửi email nhắc nhở.', 'error');
                    });
                }
            });
        }

        function sendMakeupReminders(startDate) {
            const selectedEmployees = Array.from(document.querySelectorAll('.makeup-checkbox:checked'))
                .map(checkbox => ({
                    maNv: checkbox.value,
                    email: checkbox.dataset.email
                }));

            if (selectedEmployees.length === 0) {
                Swal.fire('Lỗi!', 'Vui lòng chọn ít nhất một nhân viên để gửi nhắc nhở.', 'error');
                return;
            }

            Swal.fire({
                title: 'Xác nhận',
                text: `Bạn có chắc muốn gửi email nhắc nhở làm bù cho ${selectedEmployees.length} nhân viên đã chọn?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Gửi',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/api/AttendanceRequestManager/SendMakeupReminders', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            startDate,
                            selectedEmployees 
                        })
                    })
                    .then(res => res.json())
                    .then(data => {
                        Swal.fire('Thành công!', data.message, 'success');
                    })
                    .catch(() => {
                        Swal.fire('Lỗi!', 'Không thể gửi email nhắc nhở.', 'error');
                    });
                }
            });
        }

        function sendOvertimeRequest(employeeId, startDate, hours) {
            Swal.fire({
                title: 'Xác nhận',
                text: 'Bạn có chắc muốn gửi yêu cầu tăng ca này?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Gửi',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/api/AttendanceRequestManager/SendOvertimeRequest', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            maNv: employeeId,
                            startDate,
                            soGio: hours
                        })
                    })
                    .then(res => res.json())
                    .then(data => {
                        Swal.fire('Thành công!', data.message, 'success');
                        // Refresh overtime table
                        const weekPicker = document.getElementById('overtimeWeekPicker');
                        if (weekPicker.value) {
                            const selectedDate = new Date(weekPicker.value);
                            const startOfWeek = new Date(selectedDate.setDate(selectedDate.getDate() - selectedDate.getDay() + 1));
                            const endOfWeek = new Date(startOfWeek);
                            endOfWeek.setDate(startOfWeek.getDate() + 6);
                            fetchOvertimeData(startOfWeek, endOfWeek);
                        }
                    })
                    .catch(() => {
                        Swal.fire('Lỗi!', 'Không thể gửi yêu cầu tăng ca.', 'error');
                    });
                }
            });
        }

        function initSelectAllCheckboxes() {
            // Select all for attendance table
            document.getElementById('selectAllAttendance').addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.attendance-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });

            // Select all for makeup table
            document.getElementById('selectAllMakeup').addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.makeup-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });

            // Update select all checkbox state when individual checkboxes change
            document.addEventListener('change', function(e) {
                if (e.target.classList.contains('attendance-checkbox')) {
                    updateSelectAllState('selectAllAttendance', '.attendance-checkbox');
                } else if (e.target.classList.contains('makeup-checkbox')) {
                    updateSelectAllState('selectAllMakeup', '.makeup-checkbox');
                }
            });
        }

        function updateSelectAllState(selectAllId, checkboxClass) {
            const selectAll = document.getElementById(selectAllId);
            const checkboxes = document.querySelectorAll(checkboxClass);
            const checkedCount = document.querySelectorAll(`${checkboxClass}:checked`).length;
            
            if (checkedCount === 0) {
                selectAll.checked = false;
                selectAll.indeterminate = false;
            } else if (checkedCount === checkboxes.length) {
                selectAll.checked = true;
                selectAll.indeterminate = false;
            } else {
                selectAll.checked = false;
                selectAll.indeterminate = true;
            }
        }
    </script>
}
