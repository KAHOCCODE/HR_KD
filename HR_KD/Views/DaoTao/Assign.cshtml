@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
    ViewData["Title"] = "Gán nhân viên vào khóa đào tạo";
}
<link rel="stylesheet" href="~/css/assign.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-lg-12">
            <!-- Page Header with Breadcrumbs -->
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-light p-3 rounded shadow-sm">
                    <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i></a></li>
                    <li class="breadcrumb-item"><a href="/DaoTao/Index">Đào tạo</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Gán nhân viên</li>
                </ol>
            </nav>
            
            <!-- Main Card -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-gradient-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-user-plus mr-2"></i>Gán nhân viên vào khóa: <span id="tenKhoaDaoTao" class="font-weight-bold"></span></h5>
                    <div>
                        <a href="/DaoTao/Index" class="btn btn-light btn-sm">
                            <i class="fas fa-arrow-circle-left mr-1"></i> Quay lại

                        </a>
                    </div>
                </div>
                
                <div class="card-body">
                    <!-- Status Messages -->
                    <div id="statusMessage"></div>
                    
                    <!-- Course Info Summary -->
                    <div class="course-info-summary mb-4 d-none" id="courseInfoSummary">
                        <div class="row bg-light rounded p-3">
                            <div class="col-md-3">
                                <div class="text-muted small">Mã khóa đào tạo</div>
                                <div class="font-weight-bold" id="maKhoaDaoTao"></div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-muted small">Ngày bắt đầu</div>
                                <div class="font-weight-bold" id="ngayBatDau"></div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-muted small">Ngày kết thúc</div>
                                <div class="font-weight-bold" id="ngayKetThuc"></div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-muted small">Trạng thái</div>
                                <div><span class="badge badge-success" id="courseStatus">Đang diễn ra</span></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Search and Filter Tools -->
                    <div class="row mb-4">
                        <div class="col-md-8">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text bg-white"><i class="fas fa-search text-primary"></i></span>
                                </div>
                                <input type="text" class="form-control" id="searchEmployee" placeholder="Tìm kiếm theo tên, mã nhân viên hoặc email...">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="d-flex justify-content-end">
                                <button id="btnAssignSelected" class="btn btn-success" disabled>
                                    <i class="fas fa-user-plus mr-1"></i> Gán nhân viên đã chọn
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Employee List -->
                    <div id="employeeList" class="mb-4">
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Đang tải...</span>
                            </div>
                            <p class="mt-2 text-muted">Đang tải danh sách nhân viên...</p>
                        </div>
                    </div>
                    
                    <!-- Pagination -->
                    <div class="d-flex justify-content-between align-items-center" id="paginationContainer">
                        <div class="text-muted small" id="employeeCount"></div>
                        <ul class="pagination pagination-sm" id="pagination"></ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        $(document).ready(function () {
            // Variables
            const urlParams = new URLSearchParams(window.location.search);
            const maDaoTao = urlParams.get('id');
            let employees = [];
            let currentPage = 1;
            const itemsPerPage = 10;
            let selectedEmployees = [];
            
            // Check training course ID
            if (!maDaoTao || isNaN(maDaoTao)) {
                showError('ID khóa đào tạo không hợp lệ.');
                return;
            }
            
            // Get training course details
            $.ajax({
                url: `/api/DaoTaoApi/${maDaoTao}`,
                method: 'GET',
                xhrFields: {
                    withCredentials: true
                },
                success: function (daoTaoData) {
                    $('#tenKhoaDaoTao').text(daoTaoData.tenDaoTao);
                    $('#maKhoaDaoTao').text(daoTaoData.maDaoTao);
                    
                    // Format dates if available
                    if (daoTaoData.ngayBatDau) {
                        $('#ngayBatDau').text(formatDate(daoTaoData.ngayBatDau));
                    } else {
                        $('#ngayBatDau').text('Chưa xác định');
                    }
                    
                    if (daoTaoData.ngayKetThuc) {
                        $('#ngayKetThuc').text(formatDate(daoTaoData.ngayKetThuc));
                    } else {
                        $('#ngayKetThuc').text('Chưa xác định');
                    }
                    
                    // Set course status
                    if (daoTaoData.trangThai) {
                        $('#courseStatus').text(daoTaoData.trangThai);
                        
                        // Set appropriate badge color based on status
                        if (daoTaoData.trangThai.toLowerCase().includes('hoàn thành')) {
                            $('#courseStatus').removeClass('badge-success').addClass('badge-info');
                        } else if (daoTaoData.trangThai.toLowerCase().includes('sắp')) {
                            $('#courseStatus').removeClass('badge-success').addClass('badge-warning');
                        }
                    }
                    
                    // Show course info summary
                    $('#courseInfoSummary').removeClass('d-none');
                },
                error: function (xhr) {
                    console.error('Lỗi khi tải thông tin khóa đào tạo:', xhr.responseText);
                    showError('Không thể tải thông tin khóa đào tạo. Vui lòng thử lại sau.');
                }
            });
            
            // Load employees
            loadEmployees();
            
            // Search functionality
            $('#searchEmployee').on('keyup', function() {
                filterEmployees();
            });
            
            // "Assign Selected" button click event
            $('#btnAssignSelected').on('click', function() {
                if (selectedEmployees.length > 0) {
                    if (confirm(`Bạn có chắc muốn gán ${selectedEmployees.length} nhân viên đã chọn vào khóa đào tạo này?`)) {
                        assignMultipleEmployees(maDaoTao, selectedEmployees);
                    }
                }
            });
            
            // Functions
            function loadEmployees() {
                $.ajax({
                    url: `/api/DaoTaoApi/assign/${maDaoTao}`,
                    method: 'GET',
                    xhrFields: {
                        withCredentials: true
                    },
                    success: function (data) {
                        employees = data;
                        
                        if (employees && employees.length > 0) {
                            $('#employeeCount').text(`Hiển thị ${Math.min(itemsPerPage, employees.length)} / ${employees.length} nhân viên`);
                            displayEmployees();
                            setupPagination();
                        } else {
                            showEmpty();
                        }
                    },
                    error: function (xhr) {
                        console.error('Lỗi khi tải danh sách nhân viên:', xhr.responseText);
                        showError(`Không thể tải danh sách nhân viên. Vui lòng thử lại sau.`);
                    }
                });
            }
            
            function displayEmployees(filteredEmployees = null) {
                const displayData = filteredEmployees || employees;
                
                // Calculate pagination
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = Math.min(startIndex + itemsPerPage, displayData.length);
                const pageEmployees = displayData.slice(startIndex, endIndex);
                
                if (pageEmployees.length > 0) {
                    let tableHtml = `
                        <div class="table-responsive">
                            <table class="table table-borderless table-hover">
                                <thead class="thead-light">
                                    <tr>
                                        <th width="40px">
                                            <div class="custom-control custom-checkbox">
                                                <input type="checkbox" class="custom-control-input" id="selectAll">
                                                <label class="custom-control-label" for="selectAll"></label>
                                            </div>
                                        </th>
                                        <th width="80px">Mã NV</th>
                                        <th>Họ tên</th>
                                        <th>Email</th>
                                        <th>Phòng ban</th>
                                        <th width="100px">Hành động</th>
                                    </tr>
                                </thead>
                                <tbody>
                    `;
                    
                    pageEmployees.forEach(function (employee) {
                        const isSelected = selectedEmployees.includes(employee.maNv);
                        tableHtml += `
                            <tr class="${isSelected ? 'table-active' : ''}">
                                <td>
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" class="custom-control-input employee-checkbox" 
                                            id="check${employee.maNv}" 
                                            data-manv="${employee.maNv}" 
                                            ${isSelected ? 'checked' : ''}>
                                        <label class="custom-control-label" for="check${employee.maNv}"></label>
                                    </div>
                                </td>
                                <td><span class="badge badge-light">${employee.maNv}</span></td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-circle mr-2 bg-primary text-white">
                                            ${getInitials(employee.hoTen)}
                                        </div>
                                        <div>${employee.hoTen}</div>
                                    </div>
                                </td>
                                <td>${employee.email || '<span class="text-muted">Không có</span>'}</td>
                                <td>${employee.phongBan || '<span class="text-muted">Không có</span>'}</td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm btn-assign"
                                            data-manv="${employee.maNv}" data-name="${employee.hoTen}">
                                        <i class="fas fa-user-plus mr-1"></i> Gán
                                    </button>
                                </td>
                            </tr>
                        `;
                    });
                    
                    tableHtml += `
                                </tbody>
                            </table>
                        </div>
                    `;
                    
                    $('#employeeList').html(tableHtml);
                    
                    // Update the count display
                    if (filteredEmployees) {
                        $('#employeeCount').text(`Hiển thị ${Math.min(itemsPerPage, filteredEmployees.length)} / ${filteredEmployees.length} nhân viên (đã lọc)`);
                    } else {
                        $('#employeeCount').text(`Hiển thị ${Math.min(itemsPerPage, employees.length)} / ${employees.length} nhân viên`);
                    }
                    
                    // Setup event handlers for the newly created elements
                    setupEventHandlers();
                } else {
                    showEmpty(filteredEmployees ? 'Không tìm thấy nhân viên nào phù hợp với từ khóa tìm kiếm.' : 'Không có nhân viên nào có thể được gán vào khóa đào tạo này.');
                }
            }
            
            function setupEventHandlers() {
                // Individual assignment buttons
                $('.btn-assign').on('click', function() {
                    const maNv = $(this).data('manv');
                    const tenNv = $(this).data('name');
                    
                    if (confirm(`Bạn có chắc muốn gán nhân viên ${tenNv} vào khóa đào tạo này?`)) {
                        assignEmployee(maDaoTao, maNv);
                    }
                });
                
                // Checkbox events
                $('.employee-checkbox').on('change', function() {
                    const maNv = $(this).data('manv');
                    if ($(this).is(':checked')) {
                        if (!selectedEmployees.includes(maNv)) {
                            selectedEmployees.push(maNv);
                            $(this).closest('tr').addClass('table-active');
                        }
                    } else {
                        selectedEmployees = selectedEmployees.filter(id => id !== maNv);
                        $(this).closest('tr').removeClass('table-active');
                    }
                    
                    // Update "Select All" checkbox state
                    updateSelectAllCheckbox();
                    
                    // Enable/disable the "Assign Selected" button
                    $('#btnAssignSelected').prop('disabled', selectedEmployees.length === 0);
                });
                
                // "Select All" checkbox
                $('#selectAll').on('change', function() {
                    const isChecked = $(this).is(':checked');
                    
                    $('.employee-checkbox').each(function() {
                        const maNv = $(this).data('manv');
                        $(this).prop('checked', isChecked);
                        
                        if (isChecked) {
                            if (!selectedEmployees.includes(maNv)) {
                                selectedEmployees.push(maNv);
                            }
                            $(this).closest('tr').addClass('table-active');
                        } else {
                            selectedEmployees = selectedEmployees.filter(id => id !== maNv);
                            $(this).closest('tr').removeClass('table-active');
                        }
                    });
                    
                    // Enable/disable the "Assign Selected" button
                    $('#btnAssignSelected').prop('disabled', selectedEmployees.length === 0);
                });
            }
            
            function updateSelectAllCheckbox() {
                const checkboxes = $('.employee-checkbox');
                const checkedBoxes = $('.employee-checkbox:checked');
                
                if (checkboxes.length > 0) {
                    $('#selectAll').prop('checked', checkboxes.length === checkedBoxes.length);
                    $('#selectAll').prop('indeterminate', checkedBoxes.length > 0 && checkedBoxes.length < checkboxes.length);
                }
            }
            
            function setupPagination() {
                const pageCount = Math.ceil(employees.length / itemsPerPage);
                let paginationHtml = '';
                
                if (pageCount > 1) {
                    // Previous button
                    paginationHtml += `
                        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                            <a class="page-link" href="#" data-page="${currentPage - 1}">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>
                    `;
                    
                    // Page numbers
                    for (let i = 1; i <= pageCount; i++) {
                        // Show limited page numbers with ellipsis
                        if (
                            i === 1 || 
                            i === pageCount || 
                            (i >= currentPage - 1 && i <= currentPage + 1)
                        ) {
                            paginationHtml += `
                                <li class="page-item ${i === currentPage ? 'active' : ''}">
                                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                                </li>
                            `;
                        } else if (
                            i === currentPage - 2 || 
                            i === currentPage + 2
                        ) {
                            paginationHtml += `
                                <li class="page-item disabled">
                                    <a class="page-link" href="#">...</a>
                                </li>
                            `;
                        }
                    }
                    
                    // Next button
                    paginationHtml += `
                        <li class="page-item ${currentPage === pageCount ? 'disabled' : ''}">
                            <a class="page-link" href="#" data-page="${currentPage + 1}">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    `;
                    
                    $('#pagination').html(paginationHtml);
                    
                    // Pagination click events
                    $('.page-link').on('click', function(e) {
                        e.preventDefault();
                        
                        if (!$(this).parent().hasClass('disabled') && !$(this).parent().hasClass('active')) {
                            const newPage = parseInt($(this).data('page'));
                            
                            if (!isNaN(newPage) && newPage !== currentPage) {
                                currentPage = newPage;
                                displayEmployees();
                                setupPagination();
                                
                                // Scroll to top of table
                                $('html, body').animate({
                                    scrollTop: $('#employeeList').offset().top - 100
                                }, 200);
                            }
                        }
                    });
                } else {
                    $('#pagination').html('');
                }
            }
            
            function filterEmployees() {
                const searchTerm = $('#searchEmployee').val().toLowerCase().trim();
                
                if (searchTerm === '') {
                    currentPage = 1;
                    displayEmployees();
                    setupPagination();
                    return;
                }
                
                const filtered = employees.filter(employee => {
                    return (
                        employee.maNv.toString().toLowerCase().includes(searchTerm) ||
                        employee.hoTen.toLowerCase().includes(searchTerm) ||
                        (employee.email && employee.email.toLowerCase().includes(searchTerm)) ||
                        (employee.phongBan && employee.phongBan.toLowerCase().includes(searchTerm))
                    );
                });
                
                currentPage = 1;
                displayEmployees(filtered);
                
                // Hide pagination for search results
                $('#pagination').html('');
            }
            
            function assignEmployee(maDaoTao, maNv) {
                $.ajax({
                    url: '/api/DaoTaoApi/assign',
                    method: 'POST',
                    contentType: 'application/json',
                    xhrFields: {
                        withCredentials: true
                    },
                    data: JSON.stringify({
                        maDaoTao: maDaoTao,
                        maNvs: [maNv]
                    }),
                    success: function () {
                        showSuccess('Đã gán nhân viên thành công!');
                        
                        // Remove the assigned employee from the list
                        employees = employees.filter(emp => emp.maNv !== maNv);
                        selectedEmployees = selectedEmployees.filter(id => id !== maNv);
                        
                        // Update display
                        if (employees.length > 0) {
                            displayEmployees();
                            setupPagination();
                        } else {
                            showEmpty();
                        }
                        
                        // Enable/disable the "Assign Selected" button
                        $('#btnAssignSelected').prop('disabled', selectedEmployees.length === 0);
                    },
                    error: function (xhr) {
                        console.error('Lỗi khi gán nhân viên:', xhr.responseText);
                        showError('Không thể gán nhân viên. Vui lòng thử lại sau.');
                    }
                });
            }
            
            function assignMultipleEmployees(maDaoTao, maNvs) {
                $.ajax({
                    url: '/api/DaoTaoApi/assign',
                    method: 'POST',
                    contentType: 'application/json',
                    xhrFields: {
                        withCredentials: true
                    },
                    data: JSON.stringify({
                        maDaoTao: maDaoTao,
                        maNvs: maNvs
                    }),
                    success: function () {
                        showSuccess(`Đã gán ${maNvs.length} nhân viên thành công!`);
                        
                        // Remove the assigned employees from the list
                        employees = employees.filter(emp => !maNvs.includes(emp.maNv));
                        selectedEmployees = [];
                        
                        // Update display
                        if (employees.length > 0) {
                            displayEmployees();
                            setupPagination();
                        } else {
                            showEmpty();
                        }
                        
                        // Disable the "Assign Selected" button
                        $('#btnAssignSelected').prop('disabled', true);
                    },
                    error: function (xhr) {
                        console.error('Lỗi khi gán nhiều nhân viên:', xhr.responseText);
                        showError('Không thể gán nhân viên. Vui lòng thử lại sau.');
                    }
                });
            }
            
            function showEmpty(message = 'Không có nhân viên nào có thể được gán vào khóa đào tạo này.') {
                $('#employeeList').html(`
                    <div class="text-center py-5">
                        <div class="empty-state-icon mb-3">
                            <i class="fas fa-users text-muted fa-3x"></i>
                        </div>
                        <h5 class="text-muted">Danh sách trống</h5>
                        <p class="text-muted">${message}</p>
                    </div>
                `);
                
                $('#employeeCount').text('0 nhân viên');
                $('#pagination').html('');
                $('#btnAssignSelected').prop('disabled', true);
            }
            
            function showError(message) {
                $('#statusMessage').html(`
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-exclamation-circle mr-2"></i>
                            <div>${message}</div>
                        </div>
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                `);
            }
            
            function showSuccess(message) {
                $('#statusMessage').html(`
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-check-circle mr-2"></i>
                            <div>${message}</div>
                        </div>
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                `);
            }
            
            // Helper functions
            function formatDate(dateString) {
                if (!dateString) return 'Chưa xác định';
                
                const date = new Date(dateString);
                if (isNaN(date.getTime())) return dateString;
                
                return new Intl.DateTimeFormat('vi-VN', { 
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric'
                }).format(date);
            }
            
            function getInitials(name) {
                if (!name) return '';
                
                return name
                    .split(' ')
                    .map(part => part.charAt(0))
                    .join('')
                    .toUpperCase()
                    .substring(0, 2);
            }
        });
    </script>
}
