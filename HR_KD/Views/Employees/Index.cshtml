```cshtml
@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}
<link rel="stylesheet" href="~/css/employee.css">
<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow border-0">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="mb-0">Quản Lý Nhân Viên</h3>
                        <button class="btn btn-light btn-sm" id="toggleAvatar">
                            <i class="fa fa-image me-1"></i> Ẩn/Hiện Ảnh
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Thông báo lỗi -->
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fa fa-exclamation-circle me-2"></i> @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <!-- Bộ lọc & Tìm kiếm -->
                    <div class="row mb-4">
                        <div class="col-md-3 mb-2 mb-md-0">
                            <div class="input-group">
                                <span class="input-group-text bg-light">
                                    <i class="fa fa-search text-muted"></i>
                                </span>
                                <input type="text" id="searchInput" class="form-control" placeholder="Tìm theo tên, email, SĐT...">
                            </div>
                        </div>
                        <div class="col-md-3 mb-2 mb-md-0">
                            <select id="filterPhongBan" class="form-select">
                                <option value="">Tất cả Phòng Ban</option>
                            </select>
                        </div>
                        <div class="col-md-3 mb-2 mb-md-0">
                            <select id="filterChucVu" class="form-select">
                                <option value="">Tất cả Chức Vụ</option>
                            </select>
                        </div>
                        <div class="col-md-3 d-flex justify-content-end">
                            <div class="btn-group">
                                <button class="btn btn-success" id="exportExcel">
                                    <i class="fa fa-file-excel me-1"></i> Xuất Excel
                                </button>
                                <button class="btn btn-danger" id="exportPdf">
                                    <i class="fa fa-file-pdf me-1"></i> Xuất PDF
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Thống kê nhanh -->
                    <div class="row mb-4">
                        <div class="col-md-3 mb-3 mb-md-0">
                            <div class="card border-0 bg-primary bg-opacity-10">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="text-primary fw-bold mb-0">Tổng nhân viên</h6>
                                            <h3 class="mt-2 mb-0" id="totalEmployees">0</h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3 mb-md-0">
                            <div class="card border-0 bg-success bg-opacity-10">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="text-success fw-bold mb-0">Nam</h6>
                                            <h3 class="mt-2 mb-0" id="maleCount">0</h3>
                                        </div>
                                        <div class="bg-success bg-opacity-25 p-3 rounded-circle">
                                            <i class="fa fa-male fa-2x" style="color: white;"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3 mb-md-0">
                            <div class="card border-0 bg-info bg-opacity-10">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="text-info fw-bold mb-0">Nữ</h6>
                                            <h3 class="mt-2 mb-0" id="femaleCount">0</h3>
                                        </div>
                                        <div class="bg-info bg-opacity-25 p-3 rounded-circle">
                                            <i class="fa fa-female fa-2x" style="color: white;"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3 mb-md-0">
                            <div class="card border-0 bg-warning bg-opacity-10">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="text-warning fw-bold mb-0">Người phụ thuộc</h6>
                                            <h3 class="mt-2 mb-0" id="dependentCount">0</h3>
                                        </div>
                                        <div class="bg-warning bg-opacity-25 p-3 rounded-circle">
                                            <i class="fa fa-users fa-2x" style="color: white;"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Danh Sách Nhân Viên -->
                    <div class="table-responsive">
                        <table id="employeeTable" class="table table-hover align-middle">
                            <thead class="table-light">
                                <tr>
                                    <th class="avatar-col text-center">Ảnh</th>
                                    <th>ID</th>
                                    <th>Họ Tên</th>
                                    <th>Ngày Sinh</th>
                                    <th>Giới Tính</th>
                                    <th>Người PT</th>
                                    <th>SĐT</th>
                                    <th>Email</th>
                                    <th>Phòng Ban</th>
                                    <th>Chức Vụ</th>
                                    <th>Lương</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Dữ liệu sẽ được tải từ API -->
                            </tbody>
                        </table>
                    </div>

                    <!-- Phân trang -->
                    <nav aria-label="Page navigation" class="mt-4">
                        <ul class="pagination justify-content-center" id="pagination">
                            <!-- Phân trang sẽ được tạo động -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Thông Tin Lương -->
<div class="modal fade" id="salaryModal" tabindex="-1" aria-labelledby="salaryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="salaryModalLabel">Thông Tin Lương</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Tên nhân viên -->
                <div class="text-center mb-4">
                    <h5 id="modalSalaryName" class="mb-0"></h5>
                    <small class="text-muted">Mã NV: <span id="modalSalaryId"></span></small>
                </div>

                <!-- Thông tin lương -->
                <div id="salaryDetails">
                    <div class="card border-0 shadow-sm mb-3">
                        <div class="card-body">
                            <h6 class="fw-bold text-primary mb-3"><i class="fa fa-file-invoice-dollar me-2"></i>Lương & Phụ Cấp</h6>
                            <div class="row mb-2">
                                <div class="col-7">Lương Cơ Bản:</div>
                                <div class="col-5 text-end fw-bold" id="modalLuongCoBan"></div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-7">Phụ Cấp Cố Định:</div>
                                <div class="col-5 text-end" id="modalPhuCapCoDinh"></div>
                            </div>
                            <div class="row">
                                <div class="col-7">Thưởng Cố Định:</div>
                                <div class="col-5 text-end" id="modalThuongCoDinh"></div>
                            </div>
                        </div>
                    </div>

                    <div class="card border-0 shadow-sm mb-3">
                        <div class="card-body">
                            <h6 class="fw-bold text-primary mb-3"><i class="fa fa-shield-alt me-2"></i>Bảo Hiểm</h6>
                            <div class="row mb-2">
                                <div class="col-7">BHXH:</div>
                                <div class="col-5 text-end" id="modalBHXH"></div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-7">BHYT:</div>
                                <div class="col-5 text-end" id="modalBHYT"></div>
                            </div>
                            <div class="row">
                                <div class="col-7">BHTN:</div>
                                <div class="col-5 text-end" id="modalBHTN"></div>
                            </div>
                        </div>
                    </div>

                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <h6 class="fw-bold text-primary mb-3"><i class="fa fa-info-circle me-2"></i>Thông Tin Khác</h6>
                            <div class="row mb-2">
                                <div class="col-7">Ngày Áp Dụng:</div>
                                <div class="col-5 text-end" id="modalNgayApDung"></div>
                            </div>
                            <div class="row">
                                <div class="col-12">Ghi Chú:</div>
                                <div class="col-12 mt-1">
                                    <p class="border rounded p-2 bg-light" id="modalGhiChu"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Thông báo không có lương -->
                <div id="noSalaryMessage" style="display: none;">
                    <div class="text-center py-4">
                        <div class="mb-3">
                            <i class="fa fa-exclamation-circle fa-4x text-muted"></i>
                        </div>
                        <h5>Nhân viên này chưa có thông tin lương</h5>
                        <p class="text-muted">Bạn có muốn thêm thông tin lương không?</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer bg-light">
                <button type="button" class="btn btn-success btn-add-salary" style="display: none;">
                    <i class="fa fa-plus me-1"></i> Thêm Thông Tin Lương
                </button>
                <button type="button" class="btn btn-primary btn-edit-salary" style="display: none;">
                    <i class="fa fa-edit me-1"></i> Chỉnh Sửa Lương
                </button>
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="fa fa-times me-1"></i> Đóng
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Link Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">

<!-- Link SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Script -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        loadEmployees();
        loadFilters();
        let showAvatar = localStorage.getItem('showAvatar') !== 'false'; // Khởi tạo từ localStorage

        // Thiết lập số lượng nhân viên hiển thị trên mỗi trang
        const itemsPerPage = 10;
        let currentPage = 1;
        let allEmployeesData = [];

        // Kiểm tra vai trò người dùng
        let isDirector = false;
        let userMaPhongBan = "";
        fetch('/api/EmployeesApi/CheckRole')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Lỗi khi kiểm tra vai trò: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                isDirector = data.isDirector;
                userMaPhongBan = data.maPhongBan || "";
                if (!isDirector) {
                    // Vô hiệu hóa bộ lọc phòng ban nếu không phải Director
                    document.getElementById("filterPhongBan").disabled = true;
                    document.getElementById("filterPhongBan").value = userMaPhongBan;
                }
            })
            .catch(error => {
                console.error('Error checking role:', error);
                Swal.fire({
                    icon: "error",
                    title: "Lỗi",
                    text: "Không thể kiểm tra vai trò người dùng."
                });
            });

        // Cập nhật sự kiện nút ẩn/hiện ảnh
        document.getElementById("toggleAvatar").addEventListener("click", function () {
            showAvatar = !showAvatar;
            localStorage.setItem('showAvatar', showAvatar);
            // Áp dụng trạng thái ẩn/hiện cho cả cột header và các hàng trong tbody
            document.querySelectorAll(".avatar-col").forEach(el => {
                el.style.display = showAvatar ? "table-cell" : "none";
            });
            // Đảm bảo bảng được cập nhật lại bố cục
            document.getElementById("employeeTable").style.width = "100%";
        });

        // Áp dụng trạng thái ban đầu từ localStorage
        if (!showAvatar) {
            document.querySelectorAll(".avatar-col").forEach(el => {
                el.style.display = "none";
            });
        }

        // Các sự kiện lọc
        document.getElementById("filterPhongBan").addEventListener("change", applyFilters);
        document.getElementById("filterChucVu").addEventListener("change", applyFilters);
        document.getElementById("searchInput").addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                applyFilters();
            }
        });

        // Sự kiện xuất báo cáo
        document.getElementById("exportExcel").addEventListener("click", function () {
            Swal.fire({
                title: "Xuất Excel",
                text: "Bạn có muốn xuất danh sách nhân viên ra Excel?",
                icon: "question",
                showCancelButton: true,
                confirmButtonText: "Xuất",
                cancelButtonText: "Hủy",
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire("Thành công!", "Xuất Excel thành công!", "success");
                }
            });
        });

        document.getElementById("exportPdf").addEventListener("click", function () {
            Swal.fire({
                title: "Xuất PDF",
                text: "Bạn có muốn xuất danh sách nhân viên ra PDF?",
                icon: "question",
                showCancelButton: true,
                confirmButtonText: "Xuất",
                cancelButtonText: "Hủy",
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire("Thành công!", "Xuất PDF thành công!", "success");
                }
            });
        });

        function loadFilters() {
            fetch('/api/PhongBanApi')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Lỗi khi tải danh sách phòng ban: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    let filterPhongBan = document.getElementById("filterPhongBan");
                    filterPhongBan.innerHTML = '<option value="">Tất cả Phòng Ban</option>';
                    data.forEach(pb => {
                        let option = document.createElement("option");
                        option.value = pb.maPhongBan;
                        option.text = pb.tenPhongBan;
                        filterPhongBan.appendChild(option);
                    });
                    if (!isDirector && userMaPhongBan) {
                        filterPhongBan.value = userMaPhongBan;
                    }
                })
                .catch(error => {
                    console.error('Error loading PhongBan:', error);
                    Swal.fire({
                        icon: "error",
                        title: "Lỗi",
                        text: "Không thể tải danh sách phòng ban. Vui lòng kiểm tra lại."
                    });
                });

            fetch('/api/ChucVuApi')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Lỗi khi tải danh sách chức vụ: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    let filterChucVu = document.getElementById("filterChucVu");
                    filterChucVu.innerHTML = '<option value="">Tất cả Chức Vụ</option>';
                    data.forEach(cv => {
                        let option = document.createElement("option");
                        option.value = cv.maChucVu;
                        option.text = cv.tenChucVu;
                        filterChucVu.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading ChucVu:', error);
                    Swal.fire({
                        icon: "error",
                        title: "Lỗi",
                        text: "Không thể tải danh sách chức vụ. Vui lòng kiểm tra lại."
                    });
                });
        }

        function loadEmployees(phongBan = "", chucVu = "", search = "") {
            Swal.fire({
                title: 'Đang tải...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            let url = '/api/EmployeesApi';
            const params = new URLSearchParams();
            if (phongBan && isDirector) {
                params.append('phongBan', phongBan);
            }
            if (chucVu) {
                params.append('chucVu', chucVu);
            }
            if (search) {
                params.append('search', search);
            }
            if (params.toString()) {
                url += `?${params.toString()}`;
            }

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Lỗi khi tải danh sách nhân viên: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.close();
                    allEmployeesData = data;
                    window.allEmployees = data;
                    updateStatistics(data);
                    renderEmployees(data, currentPage, itemsPerPage);
                })
                .catch(error => {
                    console.error('Error loading Employees:', error);
                    Swal.close();
                    Swal.fire({
                        icon: "error",
                        title: "Lỗi",
                        text: "Không thể tải danh sách nhân viên. Vui lòng kiểm tra lại."
                    });
                });
        }

        function updateStatistics(data) {
            document.getElementById("totalEmployees").textContent = data.length;
            const maleCount = data.filter(emp => emp.gioiTinh === "Nam").length;
            const femaleCount = data.filter(emp => emp.gioiTinh === "Nữ").length;
            document.getElementById("maleCount").textContent = maleCount;
            document.getElementById("femaleCount").textContent = femaleCount;
            const totalDependents = data.reduce((sum, emp) => sum + (emp.soNguoiPhuThuoc || 0), 0);
            document.getElementById("dependentCount").textContent = totalDependents;
        }

        function applyFilters() {
            let phongBanFilter = document.getElementById("filterPhongBan").value;
            let chucVuFilter = document.getElementById("filterChucVu").value;
            let searchKeyword = document.getElementById("searchInput").value.trim();

            // Tải dữ liệu từ API với bộ lọc
            loadEmployees(phongBanFilter, chucVuFilter, searchKeyword);

            currentPage = 1;
            updateStatistics(allEmployeesData);
            renderEmployees(allEmployeesData, currentPage, itemsPerPage);
        }

        function renderEmployees(data, page, itemsPerPage) {
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, data.length);
            const displayedData = data.slice(startIndex, endIndex);

            let tableContent = "";
            if (displayedData.length === 0) {
                tableContent = `
                    <tr>
                        <td colspan="${showAvatar ? 11 : 10}" class="text-center py-4">
                            <div class="text-muted">
                                <i class="fa fa-search fa-2x mb-3"></i>
                                <p>Không tìm thấy nhân viên nào phù hợp với điều kiện tìm kiếm</p>
                            </div>
                        </td>
                    </tr>`;
            } else {
                displayedData.forEach(employee => {
                    const genderBadge = (employee.gioiTinh === "Nam")
                        ? '<span class="badge bg-primary bg-opacity-10 text-primary">Nam</span>'
                        : (employee.gioiTinh === "Nữ")
                            ? '<span class="badge bg-info bg-opacity-10 text-info">Nữ</span>'
                            : '<span class="badge bg-secondary bg-opacity-10 text-muted">Không xác định</span>';

                    tableContent += `
                        <tr>
                            <td class="avatar-col text-center" style="display: ${showAvatar ? 'table-cell' : 'none'};">
                                <img src="${employee.avatarUrl || '/images/employees/Avatar.jpg'}" class="rounded-circle border" width="40" height="40" style="object-fit: cover;">
                            </td>
                            <td><span class="badge bg-light text-dark">${employee.maNv}</span></td>
                            <td><div class="fw-bold">${employee.hoTen}</div></td>
                            <td>${new Date(employee.ngaySinh).toLocaleDateString('vi-VN')}</td>
                            <td>${genderBadge}</td>
                            <td>${employee.soNguoiPhuThuoc || 0}</td>
                            <td>${employee.sdt}</td>
                            <td>${employee.email}</td>
                            <td>${employee.phongBan || '<span class="text-muted fst-italic">Chưa cập nhật</span>'}</td>
                            <td>${employee.chucVu || '<span class="text-muted fst-italic">Chưa cập nhật</span>'}</td>
                            <td>
                                <button class="btn btn-sm btn-outline-info btn-view-salary" data-manv="${employee.maNv}">
                                    <i class="fa fa-money-bill me-1"></i> Xem lương
                                </button>
                            </td>
                        </tr>`;
                });
            }

            document.querySelector("#employeeTable tbody").innerHTML = tableContent;
            renderPagination(data.length, page, itemsPerPage);

            // Áp dụng lại trạng thái ẩn/hiện ảnh cho header
            document.querySelectorAll(".avatar-col").forEach(el => {
                el.style.display = showAvatar ? "table-cell" : "none";
            });

            document.querySelectorAll(".btn-view-salary").forEach(button => {
                button.addEventListener("click", function (e) {
                    e.stopPropagation();
                    let maNv = this.getAttribute("data-manv");
                    fetchSalaryDetails(maNv);
                });
            });
        }

        function renderPagination(totalItems, currentPage, itemsPerPage) {
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            let paginationHTML = '';

            if (totalPages <= 1) {
                document.getElementById("pagination").innerHTML = '';
                return;
            }

            paginationHTML += `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">
                        <span aria-hidden="true">«</span>
                    </a>
                </li>`;

            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);

            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }

            if (startPage > 1) {
                paginationHTML += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
                if (startPage > 2) {
                    paginationHTML += `<li class="page-item disabled"><a class="page-link" href="#">...</a></li>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>`;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHTML += `<li class="page-item disabled"><a class="page-link" href="#">...</a></li>`;
                }
                paginationHTML += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
            }

            paginationHTML += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">
                        <span aria-hidden="true">»</span>
                    </a>
                </li>`;

            document.getElementById("pagination").innerHTML = paginationHTML;

            document.querySelectorAll("#pagination .page-link").forEach(link => {
                link.addEventListener("click", function (e) {
                    e.preventDefault();
                    const pageNumber = parseInt(this.getAttribute("data-page"));
                    if (!isNaN(pageNumber)) {
                        currentPage = pageNumber;
                        renderEmployees(window.allEmployees, currentPage, itemsPerPage);
                    }
                });
            });
        }

        function fetchSalaryDetails(maNv) {
            const employee = window.allEmployees.find(emp => emp.maNv == maNv);
            if (employee) {
                document.getElementById("modalSalaryName").textContent = employee.hoTen;
                document.getElementById("modalSalaryId").textContent = employee.maNv;
            }

            Swal.fire({
                title: 'Đang tải...',
                text: 'Vui lòng đợi trong giây lát',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                },
                timer: 1000,
                timerProgressBar: true
            });

            fetch(`/api/SalaryApi/${maNv}`)
                .then(response => {
                    if (!response.ok) {
                        if (response.status === 401) {
                            throw new Error("Bạn không có quyền truy cập thông tin lương.");
                        }
                        if (response.status === 404) {
                            throw new Error("Không tìm thấy thông tin lương.");
                        }
                        return response.text().then(text => {
                            throw new Error(`Lỗi khi lấy thông tin lương: ${response.status}, Phản hồi: ${text}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.close();
                    document.getElementById("salaryModal").setAttribute("data-maLuongNV", data.maLuongNV);
                    document.getElementById("salaryModal").setAttribute("data-maNv", maNv);
                    document.getElementById("salaryDetails").style.display = "block";
                    document.getElementById("noSalaryMessage").style.display = "none";
                    document.querySelector(".btn-add-salary").style.display = "none";
                    document.querySelector(".btn-edit-salary").style.display = "inline-block";
                    document.getElementById("modalLuongCoBan").textContent = formatCurrency(data.luongCoBan);
                    document.getElementById("modalPhuCapCoDinh").textContent = formatCurrency(data.phuCapCoDinh || 0);
                    document.getElementById("modalThuongCoDinh").textContent = formatCurrency(data.thuongCoDinh || 0);
                    document.getElementById("modalBHXH").textContent = formatCurrency(data.bhxh);
                    document.getElementById("modalBHYT").textContent = formatCurrency(data.bhyt);
                    document.getElementById("modalBHTN").textContent = formatCurrency(data.bhtn);
                    document.getElementById("modalNgayApDung").textContent = new Date(data.ngayApDung).toLocaleDateString('vi-VN');
                    document.getElementById("modalGhiChu").textContent = data.ghiChu || "Không có ghi chú";
                    new bootstrap.Modal(document.getElementById("salaryModal")).show();
                })
                .catch(error => {
                    console.error('Error fetching salary details:', error);
                    Swal.close();
                    document.getElementById("salaryDetails").style.display = "none";
                    document.getElementById("noSalaryMessage").style.display = "block";
                    document.querySelector(".btn-add-salary").style.display = "inline-block";
                    document.querySelector(".btn-edit-salary").style.display = "none";
                    document.getElementById("salaryModal").setAttribute("data-maNv", maNv);
                    document.getElementById("salaryModal").removeAttribute("data-maLuongNV");
                    new bootstrap.Modal(document.getElementById("salaryModal")).show();
                });
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
        }

        document.querySelector(".btn-add-salary").addEventListener("click", function () {
            let maNv = document.getElementById("salaryModal").getAttribute("data-maNv");
            Swal.fire({
                title: 'Thêm thông tin lương',
                text: 'Bạn sẽ được chuyển đến trang thiết lập lương cho nhân viên này. Tiếp tục?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Tiếp tục',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = `/Employees/SetupSalary?maNv=${maNv}`;
                }
            });
        });

        document.querySelector(".btn-edit-salary").addEventListener("click", function () {
            let maLuongNV = document.getElementById("salaryModal").getAttribute("data-maLuongNV");
            let maNv = document.getElementById("salaryModal").getAttribute("data-maNv");
            Swal.fire({
                title: 'Chỉnh sửa lương',
                text: 'Bạn sẽ được chuyển đến trang chỉnh sửa lương cho nhân viên này. Tiếp tục?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Tiếp tục',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = `/Employees/EditSalary?maLuongNV=${maLuongNV}&maNv=${maNv}`;
                }
            });
        });

        setTimeout(function () {
            document.querySelectorAll('.card').forEach((card, index) => {
                setTimeout(() => {
                    card.style.transition = 'all 0.3s ease';
                    card.style.transform = 'translateY(0)';
                    card.style.opacity = '1';
                }, index * 100);
            });
        }, 300);
    });
</script>
```