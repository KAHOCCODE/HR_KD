@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="~/css/holiday.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h2 class="text-primary">Quản lý Ngày Lễ</h2>
        <button type="button" class="btn btn-warning" id="requestOpenApproval">Gửi Yêu Cầu Mở Duyệt</button>
    </div>

    <div class="alert alert-info" id="holidayPeriodAlert" style="display: none;">
        <strong>Lưu ý:</strong> <span id="alertMessage"></span>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="mt-4">Danh Sách Ngày Lễ</h3>
        <div class="d-flex align-items-center">
            <label class="me-2">Năm:</label>
            <select id="yearFilter" class="form-select" style="width: 150px;">
                <option value="">Tất cả</option>
            </select>
        </div>
    </div>

    <table class="table table-bordered mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Tên Ngày Lễ</th>
                <th>Ngày</th>
                <th>Số Ngày Nghỉ</th>
                <th>Trạng Thái</th>
                <th>Mô Tả</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody id="holidayTableBody"></tbody>
    </table>

    <form id="holidayForm">
        <div class="mb-3">
            <label class="form-label">Tên Ngày Lễ</label>
            <input type="text" class="form-control" id="tenNgayLe" required>
        </div>
        <div class="mb-3">
            <label class="form-label">Ngày Lễ</label>
            <input type="text" class="form-control date-picker" id="holidayDate" placeholder="Chọn ngày lễ" required>
        </div>
        <div class="mb-3">
            <label class="form-label">Số Ngày Nghỉ</label>
            <input type="number" class="form-control" id="soNgayNghi" min="1" value="1">
        </div>
        <div class="mb-3">
            <label class="form-label">Mô Tả</label>
            <textarea class="form-control" id="moTa"></textarea>
        </div>
        <button type="button" class="btn btn-primary" id="saveHoliday">Lưu Ngày Lễ</button>
        <div class="d-inline-flex align-items-center ms-2">
            <label class="form-label me-2">Năm:</label>
            <select id="fixedHolidayYear" class="form-select" style="width: 100px;">
                <option value="">Năm nay</option>
            </select>
            <button type="button" class="btn btn-success ms-2" id="saveFixedHolidays">Lưu Lễ Có Sẵn</button>
        </div>
    </form>
</div>

<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Xác nhận xóa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Bạn có chắc chắn muốn xóa ngày lễ này?</p>
                <p class="text-danger"><strong>Lưu ý:</strong> Tất cả dữ liệu chấm công của nhân viên liên quan đến ngày lễ này cũng sẽ bị xóa.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Xóa</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Kiểm tra thời gian hiện tại có nằm trong khoảng 1/12-30/12 không
        function isInHolidayPeriod() {
            const today = new Date();
            const currentMonth = today.getMonth() + 1;
            const currentDay = today.getDate();
            return currentMonth === 12 && currentDay >= 1 && currentDay <= 30;
        }

        // Kiểm tra xem có yêu cầu mở duyệt đang chờ xử lý cho năm cụ thể không
        function checkPendingRequest(year) {
            return fetch(`/api/Holidays/CheckOpenApprovalRequest?year=${year}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => response.json())
            .then(data => data.exists);
        }

        // Hiển thị thông báo và quản lý trạng thái form/nút
        function checkHolidayPeriod() {
            const currentYear = new Date().getFullYear();
            const selectedYear = document.getElementById('yearFilter').value || currentYear;
            const isInPeriod = isInHolidayPeriod();
            const holidayForm = document.getElementById('holidayForm');
            const saveButton = document.getElementById('saveHoliday');
            const saveFixedButton = document.getElementById('saveFixedHolidays');
            const alertElement = document.getElementById('holidayPeriodAlert');
            const alertMessage = document.getElementById('alertMessage');
            const deleteButtons = document.querySelectorAll('.delete-btn');

            if (isInPeriod) {
                holidayForm.style.opacity = '1';
                holidayForm.style.pointerEvents = 'auto';
                saveButton.disabled = false;
                saveFixedButton.disabled = false;
                deleteButtons.forEach(button => {
                    button.disabled = false;
                    button.style.opacity = '1';
                    button.style.cursor = 'pointer';
                });
                alertElement.style.display = 'none';
            } else {
                checkPendingRequest(currentYear).then(hasPendingRequest => {
                    if (hasPendingRequest) {
                        holidayForm.style.opacity = '0.5';
                        holidayForm.style.pointerEvents = 'none';
                        saveButton.disabled = true;
                        saveFixedButton.disabled = true;
                        deleteButtons.forEach(button => {
                            button.disabled = true;
                            button.style.opacity = '0.5';
                            button.style.cursor = 'not-allowed';
                        });
                        alertMessage.textContent = `Có yêu cầu mở duyệt ngày lễ đang chờ xử lý cho năm ${currentYear}. Vui lòng chờ phản hồi từ quản lý.`;
                        alertElement.style.display = 'block';
                    } else {
                        fetch(`/api/Holidays/CheckApprovedRequest?year=${currentYear}`, {
                            method: 'GET',
                            headers: { 'Content-Type': 'application/json' }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.exists) {
                                holidayForm.style.opacity = '1';
                                holidayForm.style.pointerEvents = 'auto';
                                saveButton.disabled = false;
                                saveFixedButton.disabled = false;
                                deleteButtons.forEach(button => {
                                    button.disabled = false;
                                    button.style.opacity = '1';
                                    button.style.cursor = 'pointer';
                                });
                                alertElement.style.display = 'none';
                            } else {
                                holidayForm.style.opacity = '0.5';
                                holidayForm.style.pointerEvents = 'none';
                                saveButton.disabled = true;
                                saveFixedButton.disabled = true;
                                deleteButtons.forEach(button => {
                                    button.disabled = true;
                                    button.style.opacity = '0.5';
                                    button.style.cursor = 'not-allowed';
                                });
                                alertMessage.textContent = `Chức năng thêm/xóa ngày lễ chỉ được mở trong khoảng thời gian từ 1/12 đến 30/12 hoặc khi có yêu cầu được duyệt cho năm ${currentYear}.`;
                                alertElement.style.display = 'block';
                            }
                            updateRequestButtonState();
                        });
                    }
                });
            }
        }

        // Cập nhật trạng thái nút yêu cầu mở duyệt
        function updateRequestButtonState() {
            const isInPeriod = isInHolidayPeriod();
            const requestButton = document.getElementById('requestOpenApproval');
            const currentYear = new Date().getFullYear();

            if (isInPeriod) {
                requestButton.disabled = true;
                requestButton.style.opacity = '0.5';
                requestButton.style.cursor = 'not-allowed';
                requestButton.title = 'Chức năng mở duyệt không khả dụng trong thời gian từ 1/12 đến 30/12';
            } else {
                checkPendingRequest(currentYear).then(hasPendingRequest => {
                    if (hasPendingRequest) {
                        requestButton.disabled = true;
                        requestButton.style.opacity = '0.5';
                        requestButton.style.cursor = 'not-allowed';
                        requestButton.title = `Đã có yêu cầu mở duyệt đang chờ xử lý cho năm ${currentYear}`;
                    } else {
                        requestButton.disabled = false;
                        requestButton.style.opacity = '1';
                        requestButton.style.cursor = 'pointer';
                        requestButton.title = 'Gửi yêu cầu để mở chức năng quản lý ngày lễ';
                    }
                });
            }
        }

        // Xử lý sự kiện nút gửi yêu cầu mở duyệt
        document.getElementById('requestOpenApproval').addEventListener('click', function() {
            const currentYear = new Date().getFullYear();
            if (isInHolidayPeriod()) {
                alert("Yêu cầu mở duyệt không khả dụng trong khoảng thời gian từ 1/12 đến 30/12.");
                return;
            }

            checkPendingRequest(currentYear).then(exists => {
                if (exists) {
                    alert(`Đã có yêu cầu mở duyệt đang chờ xử lý cho năm ${currentYear}. Vui lòng chờ phản hồi từ quản lý.`);
                } else {
                    fetch('/api/Holidays/RequestOpenApproval', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            TenYeuCau: "Yêu cầu mở duyệt ngày lễ",
                            MoTa: `Yêu cầu mở chức năng quản lý ngày lễ năm ${currentYear} ngoài khoảng thời gian 1/12-30/12`
                        })
                    })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            alert("Yêu cầu mở duyệt đã được gửi thành công!");
                            checkHolidayPeriod();
                        } else {
                            alert("Lỗi khi gửi yêu cầu: " + (result.message || "Không xác định"));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert("Đã xảy ra lỗi khi gửi yêu cầu!");
                    });
                }
            });
        });

        // Biến lưu ID ngày lễ cần xóa
        let holidayIdToDelete = null;
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
        let existingHolidays = [];

        // Khởi tạo DatePicker
        function initializeDatePicker() {
            flatpickr("#holidayDate", {
                dateFormat: "Y-m-d",
                disable: [
                    function(date) {
                        let today = new Date();
                        today.setHours(0, 0, 0, 0);
                        if (date < today) {
                            return true; // Disable past dates
                        }
                        const dateString = date.toISOString().split("T")[0];
                        return existingHolidays.includes(dateString); // Disable existing holiday dates
                    }
                ],
                locale: { firstDayOfWeek: 1 }
            });
        }

        // Lấy danh sách ngày lễ đã tồn tại
        function fetchExistingHolidays() {
            return fetch('/api/Holidays/GetAll')
                .then(response => response.json())
                .then(data => {
                    existingHolidays = data.map(h => h.ngayLe1);
                    return existingHolidays;
                });
        }

        // Fetch fixed holidays from the server
        async function fetchFixedHolidays() {
            try {
                const response = await fetch('/api/Holidays/GetFixedHolidays', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                return data.map(h => ({
                    ten: h.tenNgayLe,
                    ngay: h.ngayLe1.toString().slice(5, 10), // Extract MM-DD from YYYY-MM-DD
                    soNgayNghi: h.soNgayNghi || 1,
                    moTa: h.moTa || ''
                }));
            } catch (error) {
                console.error('Error fetching fixed holidays:', error);
                return []; // Fallback to empty array on error
            }
        }

        // Lưu ngày lễ cố định
        async function saveFixedHolidaysForYear(year) {
            const fixedHolidays = await fetchFixedHolidays();
            const requests = [];
            const holidaysToReschedule = [];

            fixedHolidays.forEach(holiday => {
                const fullDate = `${year}-${holiday.ngay}`;
                const currentDate = new Date(fullDate);
                const formattedDate = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}-${currentDate.getDate().toString().padStart(2, '0')}`;

                if (!existingHolidays.includes(formattedDate)) {
                    requests.push(
                        fetch('/api/Holidays/Add', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                TenNgayLe: holiday.ten,
                                NgayLe1: formattedDate,
                                SoNgayNghi: holiday.soNgayNghi,
                                MoTa: holiday.moTa || `Ngày lễ ${holiday.ten} của năm ${year}`
                            })
                        }).then(response => response.json())
                    );
                }

                if (currentDate.getDay() === 0 || currentDate.getDay() === 6) {
                    holidaysToReschedule.push({ holiday, originalDate: formattedDate });
                }
            });

            Promise.all(requests).then(results => {
                const successfulAdds = results.filter(res => res.success !== false).length;
                holidaysToReschedule.forEach(({ holiday, originalDate }) => {
                    let rescheduleDate = new Date(originalDate);
                    let daysToAdd = 1;

                    if (holiday.ten === "Ngày Giải Phóng miền Nam") {
                        const mayFirst = new Date(`${rescheduleDate.getFullYear()}-05-01`);
                        if (mayFirst.getDay() === 1) {
                            daysToAdd = 2;
                        }
                    }

                    if (new Date(originalDate).getDay() === 6) {
                        daysToAdd = 2;
                    }

                    rescheduleDate.setDate(rescheduleDate.getDate() + daysToAdd);
                    let rescheduledFormattedDate = `${rescheduleDate.getFullYear()}-${(rescheduleDate.getMonth() + 1).toString().padStart(2, '0')}-${rescheduleDate.getDate().toString().padStart(2, '0')}`;
                    let rescheduleName = holiday.ten;
                    let rescheduleDescription = `Nghỉ bù cho ngày lễ ${holiday.ten} (${originalDate}) rơi vào cuối tuần`;

                    if (holiday.ten === "Ngày Giải Phóng miền Nam" && daysToAdd === 2) {
                        rescheduleName = "Ngày Giải Phóng miền Nam (Nghỉ bù)";
                        rescheduleDescription = `Nghỉ bù cho ngày lễ ${holiday.ten} (${originalDate}) rơi vào cuối tuần và đi liền với Ngày Quốc Tế Lao Động`;
                    } else if (holiday.ten !== "Ngày Giải Phóng miền Nam") {
                        rescheduleName = `Nghỉ bù ${holiday.ten}`;
                    }

                    while (existingHolidays.includes(rescheduledFormattedDate)) {
                        rescheduleDate.setDate(rescheduleDate.getDate() + 1);
                        rescheduledFormattedDate = `${rescheduleDate.getFullYear()}-${(rescheduleDate.getMonth() + 1).toString().padStart(2, '0')}-${rescheduleDate.getDate().toString().padStart(2, '0')}`;
                    }

                    requests.push(
                        fetch('/api/Holidays/Add', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                TenNgayLe: rescheduleName,
                                NgayLe1: rescheduledFormattedDate,
                                SoNgayNghi: holiday.soNgayNghi,
                                MoTa: rescheduleDescription
                            })
                        }).then(response => response.json())
                    );
                });

                Promise.all(requests.slice(successfulAdds)).then(rescheduledResults => {
                    const allResults = [...results, ...rescheduledResults];
                    if (allResults.every(res => res.success !== false)) {
                        alert(`Đã thêm ${allResults.length} ngày lễ cho năm ${year} thành công!`);
                        fetchExistingHolidays().then(() => {
                            initializeDatePicker();
                            fetchHolidays(document.getElementById('yearFilter').value);
                            updateFixedHolidayYearOptions();
                            window.location.reload();
                        });
                    } else {
                        alert("Có lỗi xảy ra khi thêm một số ngày lễ.");
                    }
                });
            }).catch(error => {
                console.error("Lỗi khi thêm ngày lễ:", error);
                alert("Đã xảy ra lỗi khi thêm ngày lễ.");
            });
        }

        // Xử lý nút lưu ngày lễ
        document.getElementById("saveHoliday").addEventListener("click", function () {
            const tenNgayLe = document.getElementById("tenNgayLe").value;
            const holidayDate = document.getElementById("holidayDate").value;
            const soNgayNghi = document.getElementById("soNgayNghi").value;
            const moTa = document.getElementById("moTa").value;

            if (!tenNgayLe || !holidayDate) {
                alert("Vui lòng nhập đầy đủ Tên Ngày Lễ và Ngày Lễ.");
                return;
            }

            const selectedDate = new Date(holidayDate);
            const dayOfWeek = selectedDate.getDay();
            const requests = [];

            requests.push(
                fetch('/api/Holidays/Add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        TenNgayLe: tenNgayLe,
                        NgayLe1: holidayDate,
                        SoNgayNghi: parseInt(soNgayNghi),
                        MoTa: moTa
                    })
                }).then(response => response.json())
            );

            if (dayOfWeek === 0 || dayOfWeek === 6) {
                let compensatoryDate = new Date(selectedDate);
                compensatoryDate.setDate(compensatoryDate.getDate() + (dayOfWeek === 0 ? 1 : 2));
                const compensatoryDateString = compensatoryDate.toISOString().split("T")[0];

                if (!existingHolidays.includes(compensatoryDateString)) {
                    requests.push(
                        fetch('/api/Holidays/Add', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                TenNgayLe: `Nghỉ bù ${tenNgayLe}`,
                                NgayLe1: compensatoryDateString,
                                SoNgayNghi: parseInt(soNgayNghi),
                                MoTa: `Nghỉ bù cho ngày lễ ${tenNgayLe} (${holidayDate}) rơi vào ${dayOfWeek === 0 ? 'Chủ Nhật' : 'Thứ Bảy'}`
                            })
                        }).then(response => response.json())
                    );
                }
            }

            Promise.all(requests).then(results => {
                if (results.every(res => res.success)) {
                    alert(`Ngày lễ ${tenNgayLe} đã được thêm thành công!` + 
                          (results.length > 1 ? ` Ngày nghỉ bù cũng đã được thêm.` : ""));
                    document.getElementById("holidayForm").reset();
                    fetchExistingHolidays().then(() => {
                        initializeDatePicker();
                        fetchHolidays(document.getElementById('yearFilter').value);
                    });
                } else {
                    const errorMessages = results.filter(res => !res.success).map(res => res.message).join("; ");
                    alert("Lỗi khi thêm ngày lễ: " + (errorMessages || "Không xác định"));
                }
            }).catch(error => {
                console.error('Error:', error);
                alert("Đã xảy ra lỗi khi thêm ngày lễ!");
            });
        });

        // Xử lý nút lưu lễ có sẵn
        document.getElementById("saveFixedHolidays").addEventListener("click", function () {
            const selectedYear = document.getElementById("fixedHolidayYear").value;
            const yearToSave = selectedYear === "" ? new Date().getFullYear() : parseInt(selectedYear);
            saveFixedHolidaysForYear(yearToSave);
        });

        // Lấy và hiển thị danh sách ngày lễ
        function fetchHolidays(year) {
            fetch('/api/Holidays/GetAll')
                .then(response => response.json())
                .then(data => {
                    existingHolidays = data.map(h => h.ngayLe1);
                    let filteredData = year ? data.filter(h => h.ngayLe1 && new Date(h.ngayLe1).getFullYear() === parseInt(year)) : data;

                    let tableBody = document.getElementById("holidayTableBody");
                    tableBody.innerHTML = "";
                    filteredData.forEach(h => {
                        let statusText = h.trangThai === 'NL1' ? 'Ngày lễ thường' : 
                                         h.trangThai === 'NL2' ? 'Ngày lễ cuối tuần' : 
                                         h.trangThai === 'NL3' ? 'Ngày nghỉ bù' : 
                                         h.trangThai || '-';

                        let row = `<tr>
                                    <td>${h.maNgayLe}</td>
                                    <td>${h.tenNgayLe}</td>
                                    <td>${h.ngayLe1}</td>
                                    <td>${h.soNgayNghi || '-'}</td>
                                    <td>${statusText}</td>
                                    <td>${h.moTa || '-'}</td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm delete-btn"
                                                data-id="${h.maNgayLe}" data-name="${h.tenNgayLe}" data-date="${h.ngayLe1}">
                                            Xóa
                                        </button>
                                    </td>
                                </tr>`;
                        tableBody.innerHTML += row;
                    });

                    document.querySelectorAll('.delete-btn').forEach(button => {
                        button.addEventListener('click', function() {
                            const currentYear = new Date().getFullYear();
                            if (!isInHolidayPeriod()) {
                                checkPendingRequest(currentYear).then(hasPendingRequest => {
                                    if (hasPendingRequest) {
                                        alert(`Có yêu cầu mở duyệt ngày lễ đang chờ xử lý cho năm ${currentYear}. Vui lòng chờ phản hồi từ quản lý.`);
                                    } else {
                                        alert(`Chức năng xóa ngày lễ chỉ được mở trong khoảng thời gian từ 1/12 đến 30/12 hoặc khi có yêu cầu được duyệt cho năm ${currentYear}.`);
                                    }
                                });
                                return;
                            }

                            holidayIdToDelete = this.getAttribute('data-id');
                            document.querySelector('#deleteConfirmModal .modal-body p:first-child').textContent =
                                `Bạn có chắc chắn muốn xóa ngày lễ "${this.getAttribute('data-name')}" (${this.getAttribute('data-date')})?`;
                            deleteModal.show();
                        });
                    });

                    updateYearOptions(data);
                    checkHolidayPeriod();
                });
        }

        // Xử lý xóa ngày lễ
        document.getElementById('confirmDelete').addEventListener('click', function() {
            if (holidayIdToDelete) {
                fetch(`/api/Holidays/Delete/${holidayIdToDelete}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        deleteModal.hide();
                        alert(`Đã xóa ngày lễ và ${result.deletedAttendanceCount} bản ghi chấm công liên quan thành công!`);
                        fetchExistingHolidays().then(() => {
                            initializeDatePicker();
                            fetchHolidays(document.getElementById('yearFilter').value);
                        });
                    } else {
                        alert("Lỗi khi xóa: " + (result.message || "Không xác định"));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert("Đã xảy ra lỗi khi xóa ngày lễ!");
                });
            }
        });

        // Cập nhật danh sách năm cho bộ lọc
        function updateYearOptions(data) {
            const yearSelect = document.getElementById('yearFilter');
            if (yearSelect.options.length <= 1) {
                const years = new Set(data.filter(h => h.ngayLe1).map(h => new Date(h.ngayLe1).getFullYear()));
                const yearArray = [...years].sort((a, b) => b - a);
                const currentYear = new Date().getFullYear();
                if (!yearArray.includes(currentYear)) {
                    yearArray.unshift(currentYear);
                }
                yearArray.forEach(year => {
                    const option = document.createElement('option');
                    option.value = year;
                    option.textContent = year;
                    yearSelect.appendChild(option);
                });
                yearSelect.value = currentYear;
            }
        }

        // Cập nhật danh sách năm cho lễ có sẵn
        function updateFixedHolidayYearOptions() {
            const fixedHolidayYearSelect = document.getElementById('fixedHolidayYear');
            const currentYear = new Date().getFullYear();
            while (fixedHolidayYearSelect.options.length > 1) {
                fixedHolidayYearSelect.remove(1);
            }
            for (let i = 1; i <= 5; i++) {
                const year = currentYear + i;
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                fixedHolidayYearSelect.appendChild(option);
            }
        }

        // Sự kiện thay đổi năm bộ lọc
        document.getElementById('yearFilter').addEventListener('change', function() {
            fetchHolidays(this.value);
        });

        // Khởi tạo ứng dụng
        fetchExistingHolidays().then(() => {
            initializeDatePicker();
            updateFixedHolidayYearOptions();
            fetchHolidays(new Date().getFullYear());
        });
    });
</script>