@{
    ViewData["Title"] = "Duyệt yêu cầu";
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}

<!-- Tailwind CSS via CDN -->
<script src="https://cdn.tailwindcss.com"></script>

<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<div class="container mx-auto px-4 py-8 max-w-7xl">
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <!-- Header -->
        <div class="bg-gradient-to-r from-blue-600 to-blue-800 px-6 py-4">
            <div class="flex justify-between items-center">
                <h1 class="text-2xl font-bold text-white flex items-center">
                    <i class="fas fa-list mr-3"></i>Duyệt yêu cầu
                </h1>
                <a href="/Holiday/Management" class="inline-flex items-center px-4 py-2 bg-white text-blue-700 rounded-lg hover:bg-blue-50 transition-colors duration-200 font-medium text-sm shadow">
                    <i class="fas fa-calendar-alt mr-2"></i>Quản lý ngày lễ
                </a>
            </div>
        </div>

        <!-- Main Content -->
        <div class="p-6">
            <!-- Table Container -->
            <div class="overflow-x-auto">
                <table class="w-full border-collapse">
                    <thead>
                        <tr class="bg-gray-100">
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider border-b border-gray-200">Tên Yêu Cầu</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider border-b border-gray-200">Mô Tả</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider border-b border-gray-200">Người Tạo</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider border-b border-gray-200">Ngày Tạo</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider border-b border-gray-200">Trạng Thái</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider border-b border-gray-200">Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="requestTableBody" class="divide-y divide-gray-200">
                        <!-- Data will be loaded here via JavaScript -->
                    </tbody>
                </table>
            </div>

            <!-- Empty State -->
            <div id="emptyState" class="hidden flex flex-col items-center justify-center py-12">
                <i class="fas fa-inbox text-5xl text-gray-300 mb-4"></i>
                <p class="text-gray-500 text-xl">Không có yêu cầu nào</p>
            </div>
        </div>
    </div>
</div>

<!-- Loading Spinner Overlay -->
<div id="loadingSpinner" class="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50 hidden">
    <div class="bg-white p-5 rounded-lg shadow-lg flex items-center">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mr-3"></div>
        <span class="text-gray-700 font-medium">Đang tải...</span>
    </div>
</div>

<!-- Script -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        loadRequests();
    });

    function showLoading() {
        document.getElementById('loadingSpinner').classList.remove('hidden');
    }

    function hideLoading() {
        document.getElementById('loadingSpinner').classList.add('hidden');
    }

    function loadRequests() {
        showLoading();
        fetch('/api/holidaymanager/requests', { headers: { 'Accept': 'application/json' } })
            .then(response => {
                if (!response.ok) throw new Error('Không thể tải dữ liệu yêu cầu: ' + response.status);
                return response.json();
            })
            .then(data => {
                const tableBody = document.getElementById('requestTableBody');
                const emptyState = document.getElementById('emptyState');

                tableBody.innerHTML = '';

                if (data && data.length > 0) {
                    tableBody.classList.remove('hidden');
                    emptyState.classList.add('hidden');

                    data.forEach(request => {
                        const row = document.createElement('tr');
                        row.className = 'hover:bg-gray-50 transition-colors duration-150';

                        // Name
                        const nameCell = document.createElement('td');
                        nameCell.className = 'px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900';
                        nameCell.textContent = request.tenYeuCau;
                        row.appendChild(nameCell);

                        // Description
                        const descCell = document.createElement('td');
                        descCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-500';
                        descCell.textContent = request.moTa || '-';
                        row.appendChild(descCell);

                        // Creator
                        const creatorCell = document.createElement('td');
                        creatorCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-500';
                        creatorCell.textContent = request.maNvTao || '-';
                        row.appendChild(creatorCell);

                        // Date
                        const dateCell = document.createElement('td');
                        dateCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-500';
                        dateCell.textContent = request.ngayTao ? new Date(request.ngayTao).toLocaleString('vi-VN') : '-';
                        row.appendChild(dateCell);

                        // Status
                        const statusCell = document.createElement('td');
                        statusCell.className = 'px-6 py-4 whitespace-nowrap text-sm';

                        const statusBadge = document.createElement('span');
                        if (request.trangThai) {
                            statusBadge.className = 'px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800';
                            statusBadge.textContent = 'Đã duyệt';
                        } else {
                            statusBadge.className = 'px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800';
                            statusBadge.textContent = 'Chờ xử lý';
                        }
                        statusCell.appendChild(statusBadge);
                        row.appendChild(statusCell);

                        // Actions
                        const actionsCell = document.createElement('td');
                        actionsCell.className = 'px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2';

                        if (!request.trangThai) {
                            const approveButton = document.createElement('button');
                            approveButton.className = 'inline-flex items-center px-3 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700 transition-colors duration-150';
                            approveButton.innerHTML = '<i class="fas fa-check mr-1"></i> Duyệt';
                            approveButton.addEventListener('click', () => approveRequest(request.maYeuCau));
                            actionsCell.appendChild(approveButton);

                            const rejectButton = document.createElement('button');
                            rejectButton.className = 'inline-flex items-center px-3 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700 transition-colors duration-150';
                            rejectButton.innerHTML = '<i class="fas fa-times mr-1"></i> Từ chối';
                            rejectButton.addEventListener('click', () => rejectRequest(request.maYeuCau));
                            actionsCell.appendChild(rejectButton);
                        } else {
                            const cancelButton = document.createElement('button');
                            cancelButton.className = 'inline-flex items-center px-3 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700 transition-colors duration-150';
                            cancelButton.innerHTML = '<i class="fas fa-undo mr-1"></i> Hủy';
                            cancelButton.addEventListener('click', () => cancelRequest(request.maYeuCau));
                            actionsCell.appendChild(cancelButton);
                        }

                        row.appendChild(actionsCell);
                        tableBody.appendChild(row);
                    });
                } else {
                    tableBody.classList.add('hidden');
                    emptyState.classList.remove('hidden');
                }
                hideLoading();
            })
            .catch(error => {
                console.error('Lỗi khi tải danh sách yêu cầu:', error);
                const tableBody = document.getElementById('requestTableBody');
                tableBody.innerHTML = `
                        <tr>
                            <td colspan="6" class="px-6 py-8 text-center">
                                <div class="flex flex-col items-center">
                                    <i class="fas fa-exclamation-triangle text-red-500 text-2xl mb-3"></i>
                                    <p class="text-red-500 text-lg">Không thể tải dữ liệu yêu cầu</p>
                                    <p class="text-gray-500 mt-1">${error.message}</p>
                                </div>
                            </td>
                        </tr>
                    `;
                hideLoading();
            });
    }

    function approveRequest(requestId) {
        if (confirm('Bạn có chắc chắn muốn duyệt yêu cầu này?')) {
            showLoading();
            fetch(`/api/holidaymanager/requests/approve/${requestId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
                .then(response => {
                    if (!response.ok) throw new Error('Không thể duyệt yêu cầu: ' + response.status);
                    return response.json();
                })
                .then(result => {
                    showNotification(result.message, 'success');
                    loadRequests();
                    hideLoading();
                })
                .catch(error => {
                    console.error('Lỗi khi duyệt yêu cầu:', error);
                    showNotification('Đã xảy ra lỗi khi duyệt yêu cầu: ' + error.message, 'error');
                    hideLoading();
                });
        }
    }

    function rejectRequest(requestId) {
        if (confirm('Bạn có chắc chắn muốn từ chối yêu cầu này?')) {
            showLoading();
            fetch(`/api/holidaymanager/requests/reject/${requestId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
                .then(response => {
                    if (!response.ok) throw new Error('Không thể từ chối yêu cầu: ' + response.status);
                    return response.json();
                })
                .then(result => {
                    showNotification(result.message, 'success');
                    loadRequests();
                    hideLoading();
                })
                .catch(error => {
                    console.error('Lỗi khi từ chối yêu cầu:', error);
                    showNotification('Đã xảy ra lỗi khi từ chối yêu cầu: ' + error.message, 'error');
                    hideLoading();
                });
        }
    }

    function cancelRequest(requestId) {
        if (confirm('Bạn có chắc chắn muốn hủy duyệt yêu cầu này? Trạng thái sẽ trở về "Chờ xử lý".')) {
            showLoading();
            fetch(`/api/holidaymanager/requests/cancel/${requestId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
                .then(response => {
                    if (!response.ok) throw new Error('Không thể hủy yêu cầu: ' + response.status);
                    return response.json();
                })
                .then(result => {
                    showNotification(result.message, 'success');
                    loadRequests();
                    hideLoading();
                })
                .catch(error => {
                    console.error('Lỗi khi hủy yêu cầu:', error);
                    showNotification('Đã xảy ra lỗi khi hủy yêu cầu: ' + error.message, 'error');
                    hideLoading();
                });
        }
    }

    // Toast notification system
    function showNotification(message, type = 'success') {
        // Create notification element
        const notification = document.createElement('div');

        // Set appropriate styles based on type
        if (type === 'success') {
            notification.className = 'fixed bottom-4 right-4 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg flex items-center z-50';
            notification.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${message}`;
        } else {
            notification.className = 'fixed bottom-4 right-4 bg-red-600 text-white px-6 py-3 rounded-lg shadow-lg flex items-center z-50';
            notification.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>${message}`;
        }

        // Add to document
        document.body.appendChild(notification);

        // Remove after 3 seconds
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transition = 'opacity 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }
</script>