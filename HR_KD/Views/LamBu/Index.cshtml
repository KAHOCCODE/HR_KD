@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
    var maNv = User.Claims.FirstOrDefault(c => c.Type == "MaNV")?.Value;
    if (string.IsNullOrEmpty(maNv))
    {
                <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
                <script>
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Không tìm thấy mã nhân viên. Vui lòng đăng nhập lại.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/Login';
                    });
                </script>
        return;
    }
}

<!-- External Styles -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<!-- Custom Styles -->

<!-- Main Container -->
<div class="min-h-screen bg-gray-50 p-6">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-4xl font-bold text-gray-900 flex items-center">
                <i class="fas fa-calendar-alt mr-3 text-blue-600"></i> Quản Lý Làm Bù
            </h1>
            <p class="text-gray-600 mt-2 text-lg">Đăng ký và quản lý lịch làm bù của bạn một cách dễ dàng.</p>
        </div>

        <!-- Remaining Hours Card -->
        <div class="mb-6 bg-white shadow-md rounded-lg p-6">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Thông Tin Giờ Làm Bù</h2>
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                <div>
                    <label class="text-sm font-medium text-gray-700">Số giờ cần bù</label>
                    <p id="_remainingHours" class="mt-1 text-lg font-bold text-blue-600"><span class="spinner"></span> Đang tải...</p>
                </div>
                <div>
                    <label class="text-sm font-medium text-gray-700">Tổng giờ còn thiếu</label>
                    <p id="_tongGioConThieu" class="mt-1 text-lg text-gray-600"><span class="spinner"></span> Đang tải...</p>
                </div>
                <div>
                    <label class="text-sm font-medium text-gray-700">Tổng giờ đã bù</label>
                    <p id="_tongGioLamBu" class="mt-1 text-lg text-gray-600"><span class="spinner"></span> Đang tải...</p>
                </div>
            </div>
        </div>

        <!-- Input Section -->
        <div class="mb-6 bg-white shadow-md rounded-lg p-6" id="compensatoryControls">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Đăng Ký Làm Bù</h2>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Date Range Picker -->
                <div>
                    <label for="workDateRange" class="text-sm font-medium text-gray-700">Chọn ngày làm bù</label>
                    <div class="relative mt-1">
                        <input type="text" id="workDateRange" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="Chọn ngày hoặc khoảng ngày">
                        <i class="fas fa-calendar-alt absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    </div>
                </div>
                <!-- Time Inputs -->
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <label for="checkInTime" class="text-sm font-medium text-gray-700">Giờ vào</label>
                        <input type="time" id="checkInTime" class="w-full p-3 border rounded-lg mt-1 focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="checkOutTime" class="text-sm font-medium text-gray-700">Giờ ra</label>
                        <input type="time" id="checkOutTime" class="w-full p-3 border rounded-lg mt-1 focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="totalHours" class="text-sm font-medium text-gray-700">Tổng giờ</label>
                        <input type="text" id="totalHours" class="w-full p-3 border rounded-lg mt-1 bg-gray-100" readonly>
                    </div>
                    <div>
                        <label for="attendanceNote" class="text-sm font-medium text-gray-700">Ghi chú</label>
                        <textarea id="attendanceNote" class="w-full p-3 border rounded-lg mt-1 focus:ring-2 focus:ring-blue-500" rows="2" placeholder="Nhập ghi chú (nếu có)"></textarea>
                    </div>
                </div>
            </div>
            <!-- Quick Set Buttons -->
            <div class="flex space-x-4 mt-4">
                <button id="set4hBtn" class="bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 flex items-center">
                    <i class="fas fa-clock mr-2"></i> 4h Làm Bù
                </button>
                <button id="set8hBtn" class="bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 flex items-center">
                    <i class="fas fa-clock mr-2"></i> 8h Làm Bù
                </button>
                <button id="applyToSelected" class="bg-green-600 text-white p-3 rounded-lg hover:bg-green-700 flex items-center">
                    <i class="fas fa-check mr-2"></i> Áp dụng
                </button>
                
                <button id="submitAll" class="bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 flex items-center">
                    <i class="fas fa-save mr-2"></i> Lưu Tất Cả
                </button>
            
            </button>
        </div>

        <!-- Work Schedule Table -->
        <div class="mt-6 bg-white shadow-md rounded-lg p-6">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Lịch Làm Bù</h2>
            <div class="overflow-x-auto">
                <table class="w-full table-auto border-collapse">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="p-4 text-left text-sm font-semibold text-gray-700">
                                <input type="checkbox" id="selectAll">
                            </th>
                            <th class="p-4 text-left text-sm font-semibold text-gray-700">Ngày làm bù</th>
                            <th class="p-4 text-left text-sm font-semibold text-gray-700">Giờ làm bù</th>
                            <th class="p-4 text-left text-sm font-semibold text-gray-700">Tổng giờ</th>
                            <th class="p-4 text-left text-sm font-semibold text-gray-700">Ghi chú</th>
                        </tr>
                    </thead>
                    <tbody id="workScheduleBody">
                        <tr><td colspan="5" class="p-4 text-center text-gray-600">Chưa có dữ liệu</td></tr>
                    </tbody>
                </table>
            </div>
           
        </div>
    </div>
</div>

<!-- External Scripts -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

<!-- JavaScript Logic -->
<script>
    const maNv = '@maNv';
    let selectedWorkDays = [];
    let workScheduleData = {};

    document.addEventListener('DOMContentLoaded', () => {
        if (!maNv) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Mã nhân viên không hợp lệ.',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.href = '/Login';
            });
            return;
        }

        // Initialize Flatpickr
        flatpickr("#workDateRange", {
            mode: "range",
            dateFormat: "d/m/Y",
            weekNumbers: true,
            locale: { firstDayOfWeek: 1 },
            onClose: handleDateRangeClose
        });

        // Fetch remaining hours
        fetchRemainingHours();
    });

    async function fetchRemainingHours() {
        try {
            const response = await fetch(`/api/LamBu/GetRemainingHours/${maNv}`, {
                headers: { 'Accept': 'application/json' }
            });
            const result = await response.json();
            if (result.success) {
                document.getElementById('_remainingHours').textContent = `${result.remainingHours.toFixed(2)}h`;
                document.getElementById('_tongGioConThieu').textContent = `${result.tongGioConThieu.toFixed(2)}h`;
                document.getElementById('_tongGioLamBu').textContent = `${result.tongGioLamBu.toFixed(2)}h`;
                if (result.remainingHours === 0) {
                    disableControls();
                    Swal.fire({
                        icon: 'info',
                        title: 'Thông báo',
                        text: 'Bạn không có giờ cần bù, các chức năng đã bị khóa.',
                        confirmButtonText: 'OK'
                    });
                }
            } else {
                document.getElementById('_remainingHours').textContent = `0.00h`;
                document.getElementById('_tongGioConThieu').textContent = `0.00h`;
                document.getElementById('_tongGioLamBu').textContent = `0.00h`;
                disableControls();
                Swal.fire({
                    icon: 'info',
                    title: 'Thông báo',
                    text: 'Không có dữ liệu giờ cần bù, các chức năng đã bị khóa.',
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            document.getElementById('_remainingHours').textContent = `0.00h`;
            document.getElementById('_tongGioConThieu').textContent = `0.00h`;
            document.getElementById('_tongGioLamBu').textContent = `0.00h`;
            disableControls();
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Không thể tải dữ liệu giờ cần bù: ' + error.message,
                confirmButtonText: 'OK'
            });
        }
    }

    function disableControls() {
        document.querySelectorAll('#workDateRange, #checkInTime, #checkOutTime, #totalHours, #attendanceNote, #set4hBtn, #set8hBtn, #applyToSelected, #submitAll, #selectAll').forEach(element => {
            element.disabled = true;
        });
        document.querySelectorAll('.date-checkbox').forEach(checkbox => {
            checkbox.disabled = true;
        });
        document.getElementById('compensatoryControls').classList.add('disabled-section');
        flatpickr("#workDateRange").disable();
    }

    function handleDateRangeClose(selectedDates) {
        selectedWorkDays = [];
        if (selectedDates.length === 2) {
            let currentDate = new Date(selectedDates[0]);
            const endDate = new Date(selectedDates[1]);
            while (currentDate <= endDate) {
                const dateStr = formatDateToYMD(currentDate);
                selectedWorkDays.push(dateStr);
                if (!workScheduleData[dateStr]) {
                    workScheduleData[dateStr] = {
                        selected: false,
                        checkIn: '',
                        checkOut: '',
                        totalHours: 0,
                        attendanceNote: ''
                    };
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }
        } else if (selectedDates.length === 1) {
            const dateStr = formatDateToYMD(selectedDates[0]);
            selectedWorkDays.push(dateStr);
            if (!workScheduleData[dateStr]) {
                workScheduleData[dateStr] = {
                    selected: false,
                    checkIn: '',
                    checkOut: '',
                    totalHours: 0,
                    attendanceNote: ''
                };
            }
        }
        updateWorkScheduleTable();
    }

    function formatDateToYMD(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    function formatDate(date) {
        return moment(date).format('DD/MM/YYYY');
    }

    function updateWorkScheduleTable() {
        const tbody = document.getElementById('workScheduleBody');
        tbody.innerHTML = '';
        if (selectedWorkDays.length === 0) {
            tbody.innerHTML = '<tr><td colspan="5" class="p-4 text-center text-gray-600">Chưa có dữ liệu</td></tr>';
            return;
        }
        selectedWorkDays.forEach(date => {
            const data = workScheduleData[date];
            const row = document.createElement('tr');
            row.className = 'border-b border-gray-200';
            row.innerHTML = `
                <td class="p-4"><input type="checkbox" class="date-checkbox" data-date="${date}" ${data.selected ? 'checked' : ''}></td>
                <td class="p-4 text-gray-800">${formatDate(new Date(date))}</td>
                <td class="p-4 text-gray-800">${data.checkIn ? `${data.checkIn} - ${data.checkOut}` : '-'}</td>
                <td class="p-4 text-gray-800">${data.totalHours > 0 ? `${data.totalHours.toFixed(2)}h` : '-'}</td>
                <td class="p-4 text-gray-800">${data.attendanceNote || '-'}</td>
            `;
            tbody.appendChild(row);
        });

        document.querySelectorAll('.date-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                workScheduleData[this.dataset.date].selected = this.checked;
            });
        });
    }

    function calculateHours(startTime, endTime) {
        if (!startTime || !endTime) return 0;
        const start = new Date(`2000-01-01T${startTime}`);
        let end = new Date(`2000-01-01T${endTime}`);
        if (end < start) end.setDate(end.getDate() + 1);
        let hours = (end - start) / (1000 * 60 * 60);
        if (hours > 4) hours -= 1; // Apply 1-hour break for shifts over 4 hours
        return Math.max(0, parseFloat(hours.toFixed(2)));
    }

    function updateTotalHours() {
        const checkIn = document.getElementById('checkInTime');
        const checkOut = document.getElementById('checkOutTime');
        const totalHoursInput = document.getElementById('totalHours');
        checkIn.classList.remove('invalid-input');
        checkOut.classList.remove('invalid-input');

        if (checkIn.value && checkOut.value) {
            const hours = calculateHours(checkIn.value, checkOut.value);
            totalHoursInput.value = `${hours.toFixed(2)}h`;
        } else {
            totalHoursInput.value = '';
        }
    }

    function validateHours(checkIn, checkOut, date) {
        const dateObj = new Date(date);
        const dayOfWeek = dateObj.getDay();
        const checkInInput = document.getElementById('checkInTime');
        const checkOutInput = document.getElementById('checkOutTime');
        const hours = calculateHours(checkIn, checkOut);

        if (checkIn && checkOut) {
            if (dayOfWeek >= 1 && dayOfWeek <= 5) {
                if (checkIn < '18:00' || checkIn > '22:00' || checkOut < '18:00' || checkOut > '22:00' || hours > 4) {
                    checkInInput.classList.add('invalid-input');
                    checkOutInput.classList.add('invalid-input');
                    return false;
                }
            } else if (dayOfWeek === 0 || dayOfWeek === 6) {
                if (checkIn < '08:00' || checkIn > '22:00' || checkOut < '08:00' || checkOut > '22:00') {
                    checkInInput.classList.add('invalid-input');
                    checkOutInput.classList.add('invalid-input');
                    return false;
                }
            }
        }
        return true;
    }

    document.getElementById('checkInTime').addEventListener('change', updateTotalHours);
    document.getElementById('checkOutTime').addEventListener('change', updateTotalHours);

    function addHours(time, hours) {
        const [hoursStr, minutesStr] = time.split(':');
        let newHours = parseInt(hoursStr) + hours;
        if (newHours >= 24) newHours -= 24;
        return `${newHours.toString().padStart(2, '0')}:${minutesStr}`;
    }

    document.getElementById('set4hBtn').addEventListener('click', () => {
        const checkIn = document.getElementById('checkInTime');
        const checkOut = document.getElementById('checkOutTime');
        const selectedDates = Object.entries(workScheduleData)
            .filter(([_, data]) => data.selected)
            .map(([date]) => date);

        if (selectedDates.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một ngày để áp dụng.',
                confirmButtonText: 'OK'
            });
            return;
        }

        const date = selectedDates[0];
        const dayOfWeek = new Date(date).getDay();
        if (dayOfWeek >= 1 && dayOfWeek <= 5) {
            checkIn.value = '18:00';
            checkOut.value = '22:00';
        } else {
            checkIn.value = '08:00';
            checkOut.value = '12:00';
        }
        updateTotalHours();
    });

    document.getElementById('set8hBtn').addEventListener('click', () => {
        const checkIn = document.getElementById('checkInTime');
        const checkOut = document.getElementById('checkOutTime');
        const selectedDates = Object.entries(workScheduleData)
            .filter(([_, data]) => data.selected)
            .map(([date]) => date);

        if (selectedDates.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một ngày để áp dụng.',
                confirmButtonText: 'OK'
            });
            return;
        }

        const date = selectedDates[0];
        const dayOfWeek = new Date(date).getDay();
        if (dayOfWeek >= 1 && dayOfWeek <= 5) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Ngày thường chỉ được làm bù tối đa 4 giờ (18:00-22:00).',
                confirmButtonText: 'OK'
            });
            return;
        } else {
            checkIn.value = '08:00';
            checkOut.value = '18:00';
        }
        updateTotalHours();
    });

    document.getElementById('selectAll').addEventListener('change', function() {
        document.querySelectorAll('.date-checkbox').forEach(checkbox => {
            checkbox.checked = this.checked;
            workScheduleData[checkbox.dataset.date].selected = this.checked;
        });
    });

    document.getElementById('applyToSelected').addEventListener('click', async () => {
        const checkIn = document.getElementById('checkInTime').value;
        const checkOut = document.getElementById('checkOutTime').value;
        const attendanceNote = document.getElementById('attendanceNote').value;

        const selectedDates = Object.entries(workScheduleData)
            .filter(([_, data]) => data.selected)
            .map(([date]) => date);

        if (selectedDates.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một ngày.',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (checkIn && checkOut) {
            for (const date of selectedDates) {
                if (!validateHours(checkIn, checkOut, date)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: `Giờ làm bù không hợp lệ cho ngày ${formatDate(new Date(date))}.`,
                        confirmButtonText: 'OK'
                    });
                    return;
                }
            }
        }

        selectedDates.forEach(date => {
            workScheduleData[date] = {
                ...workScheduleData[date],
                checkIn,
                checkOut,
                totalHours: checkIn && checkOut ? calculateHours(checkIn, checkOut) : 0,
                attendanceNote
            };
        });

        updateWorkScheduleTable();

        document.getElementById('checkInTime').value = '';
        document.getElementById('checkOutTime').value = '';
        document.getElementById('totalHours').value = '';
        document.getElementById('attendanceNote').value = '';

        selectedDates.forEach(date => workScheduleData[date].selected = false);
        document.getElementById('selectAll').checked = false;

        updateWorkScheduleTable();
        Swal.fire({
            icon: 'success',
            title: 'Thành công!',
            text: 'Đã áp dụng dữ liệu cho các ngày đã chọn.',
            confirmButtonText: 'OK'
        });
    });

    document.getElementById('submitAll').addEventListener('click', async () => {
        if (!maNv) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Mã nhân viên không hợp lệ.',
                confirmButtonText: 'OK'
            });
            return;
        }

        const selectedDates = Object.entries(workScheduleData)
            .filter(([_, data]) => data.selected)
            .map(([date, data]) => ({ date, ...data }));

        if (selectedDates.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn ít nhất một ngày.',
                confirmButtonText: 'OK'
            });
            return;
        }

        try {
            const response = await fetch('/api/LamBu/SubmitLamBu', {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    lamBu: selectedDates
                        .filter(date => date.checkIn && date.checkOut)
                        .map(date => ({
                            NgayLamViec: date.date,
                            GioVao: date.checkIn,
                            GioRa: date.checkOut,
                            TongGio: date.totalHours,
                            TrangThai: 'LB1',
                            GhiChu: date.attendanceNote,
                            MaNV: parseInt(maNv)
                        }))
                })
            });

            const result = await response.json();
            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: 'Lưu dữ liệu làm bù thành công.',
                    confirmButtonText: 'OK'
                });
                workScheduleData = {};
                selectedWorkDays = [];
                updateWorkScheduleTable();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: result.message || 'Không thể lưu dữ liệu.',
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Có lỗi xảy ra khi lưu dữ liệu: ' + error.message,
                confirmButtonText: 'OK'
            });
        }
    });
</script>