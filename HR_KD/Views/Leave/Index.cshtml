@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
@* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> *@
<!-- Font Awesome -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css">

<style>
    .dashboard-card {
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .dashboard-card:hover {
            transform: translateY(-5px);
        }

    .leave-history {
        margin-top: 2rem;
        padding: 1.5rem;
        background-color: #f8f9fa;
        border-radius: 12px;
    }

        .leave-history h6 {
            color: #495057;
            font-weight: 600;
        }

        .leave-history table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 8px;
        }

            .leave-history table th,
            .leave-history table td {
                padding: 12px;
                background-color: #fff;
            }

            .leave-history table th {
                background-color: #e9ecef;
                font-weight: 600;
            }

            .leave-history table tr {
                border-radius: 8px;
                overflow: hidden;
            }

    .btn-success {
        background-color: #28a745;
        border: none;
        padding: 10px 20px;
        margin-top: 20px;
        font-size: 16px;
        border-radius: 8px;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .form-control,
    .form-select {
        border-radius: 8px;
        padding: 10px;
        border: 1px solid #ced4da;
    }

        .form-control:focus,
        .form-select:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .leave-info-card {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .leave-info-card:hover {
            transform: translateY(-5px);
        }

        .leave-info-card h6 {
            color: #495057;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .leave-info-card p {
            font-size: 1.25rem;
            color: #28a745;
            font-weight: 600;
            margin-bottom: 0;
        }

    #selectedDates {
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 8px;
        padding: 10px;
        font-size: 14px;
        color: #495057;
    }

    .status {
        font-weight: bold;
        display: inline-block;
        width: 100%; /* Chiếm toàn bộ chiều rộng của ô */
        height: 100%; /* Chiếm toàn bộ chiều cao của ô */
        text-align: center; /* Căn giữa nội dung */
    }

    .bg-warning-subtle {
        background-color: rgba(255, 193, 7, 0.2);
    }

    .bg-success-subtle {
        background-color: rgba(40, 167, 69, 0.2);
    }

    .bg-danger-subtle {
        background-color: rgba(220, 53, 69, 0.2);
    }
    /* Điều chỉnh chiều rộng và style cho dropdown */
    #sortDropdown {
        width: 250px; /* Điều chỉnh chiều rộng */
        padding: 8px 12px; /* Thêm padding */
        border: 1px solid #ccc; /* Thêm border */
        border-radius: 4px; /* Bo góc */
        font-size: 14px; /* Điều chỉnh kích thước font */
        background-color: #f9f9f9; /* Màu nền */
        transition: border-color 0.3s ease; /* Hiệu ứng hover */
    }

        #sortDropdown:hover {
            border-color: #888; /* Đổi màu border khi hover */
        }

        #sortDropdown:focus {
            outline: none; /* Loại bỏ outline khi focus */
            border-color: #007bff; /* Đổi màu border khi focus */
        }
    /* Điều chỉnh vị trí của pagination */
    .pagination {
        display: flex;
        justify-content: center; /* Căn giữa theo chiều ngang */
        align-items: center; /* Căn giữa theo chiều dọc */
        margin-top: 20px; /* Thêm khoảng cách phía trên */
    }

        /* Điều chỉnh khoảng cách giữa các button */
        .pagination button {
            margin: 0 5px; /* Thêm khoảng cách giữa các button */
        }
    /* Điều chỉnh vị trí của pagination */
    .pagination {
        display: flex;
        justify-content: center; /* Căn giữa theo chiều ngang */
        align-items: center; /* Căn giữa theo chiều dọc */
        margin-top: 20px; /* Thêm khoảng cách phía trên */
    }

        /* Điều chỉnh khoảng cách giữa các button */
        .pagination button {
            margin: 0 5px; /* Thêm khoảng cách giữa các button */
        }
    /* Căn giữa nội dung trong các thẻ <th> và <td> */
    .table th,
    .table td {
        text-align: center; /* Căn giữa theo chiều ngang */
        vertical-align: middle; /* Căn giữa theo chiều dọc */
    }

    /* Tùy chỉnh style cho bảng */
    .table {
        width: 100%; /* Chiều rộng bảng */
        border-collapse: collapse; /* Gộp border */
        margin-top: 20px; /* Thêm khoảng cách phía trên */
    }

        .table th {
            background-color: #f2f2f2; /* Màu nền header */
            font-weight: bold; /* Đậm chữ */
        }

        .table td {
            border: 1px solid #ddd; /* Thêm border cho các ô */
            padding: 10px; /* Thêm padding */
        }

        /* Hiệu ứng hover cho các hàng */
        .table tbody tr:hover {
            background-color: #f5f5f5; /* Đổi màu nền khi hover */
        }

</style>

<div id="leaveSection" class="dashboard-card bg-white p-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-calendar-alt me-2"></i>Đăng ký nghỉ phép</h5>
    <form id="leaveForm">
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Loại nghỉ phép</label>
                <select id="leaveTypeSelect" class="form-select" name="leaveType" required>
                    <option value="">Chọn loại nghỉ</option>
                </select>
                <div id="leaveTypeError" class="text-danger mt-2"></div>
            </div>
            <div class="col-md-6">
                <label class="form-label">Chọn Ngày</label>
                <input type="text" id="datePicker" class="form-control" placeholder="Chọn ngày..." required>
            </div>
            <div class="col-md-6">
                <label class="form-label">Ngày đã chọn</label>
                <div id="selectedDates" class="form-control" style="height: auto; min-height: 38px;"></div>
            </div>
            <div class="col-12">
                <label class="form-label">Lý do</label>
                <textarea class="form-control" name="leaveReason" rows="3" placeholder="Nhập lý do..."></textarea>
            </div>
            <div class="col-12">
                <button type="submit" id="submitButton" class="btn btn-success">
                    <i class="fas fa-paper-plane me-2"></i>Gửi yêu cầu
                </button>

            </div>
        </div>
    </form>
</div>
<div class="dashboard-card bg-white p-4 mt-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-info-circle me-2"></i>Thông tin nghỉ phép khả dụng</h5>
    <div class="row">
        <div class="col-md-12">
            <div class="leave-info-card">
                <h6>Nghỉ phép năm</h6>
                <p>Số ngày còn lại: <strong>Đang tải...</strong></p>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-12">
            <div class="leave-notes p-3 bg-light rounded">
                <p class="small mb-1"><strong>Lưu ý:</strong></p>
                <ul class="small mb-0">
                    <li>Luật lao động: Làm ở công ty 5 năm, tăng thêm 1 ngày phép.</li>
                    <li>Luật Công ty: Cứ 5 năm tăng thêm 1 ngày phép.</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="leave-history bg-white p-4 mt-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-history me-2"></i>Lịch sử đăng ký nghỉ phép</h5>
    <div class="mb-3">
        <label for="sortDropdown">Sắp xếp theo:</label>
        <select id="sortDropdown" class="form-select">
            <option value="dateDesc">Sắp xếp theo ngày gần nhất</option>
            <option value="pending">Chờ duyệt</option>
            <option value="approved">Đã duyệt</option>
            <option value="rejected">Từ chối</option>
        </select>
    </div>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Loại nghỉ</th>
                <th>Ngày nghỉ</th>
                <th>Lý do</th>
                <th>Trạng thái</th>
            </tr>
        </thead>
        <tbody id="leaveHistoryBody"></tbody>
    </table>
    <div class="pagination">
        <button id="prevPage" class="btn btn-secondary">Previous</button>
        <span id="pageInfo" class="mx-2"></span>
        <button id="nextPage" class="btn btn-secondary">Next</button>
    </div>

</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://npmcdn.com/flatpickr/dist/l10n/vn.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Lấy token từ localStorage
        const getAuthToken = () => localStorage.getItem('jwtToken');

        // Config Flatpickr
        const today = new Date().setHours(0, 0, 0, 0);
        const datePicker = flatpickr("#datePicker", {
            mode: "multiple",
            dateFormat: "Y-m-d",
            minDate: "today",
            locale: "vn",
            onClose: function (selectedDates) {
                const validDates = selectedDates.filter(date => date >= today);
                if (validDates.length !== selectedDates.length) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi chọn ngày',
                        text: 'Không thể chọn ngày trong quá khứ!'
                    });
                    this.clear();
                }
                document.getElementById("selectedDates").textContent =
                    validDates.map(date => date.toLocaleDateString('vi-VN')).join(', ');
            }
        });

        // Xử lý submit form
        document.getElementById("leaveForm").addEventListener("submit", async (e) => {
            e.preventDefault();

            const formData = {
                leaveType: document.querySelector("[name='leaveType']").value,
                leaveReason: document.querySelector("[name='leaveReason']").value,
                selectedDates: datePicker.selectedDates.map(d => d.toLocaleDateString('sv-SE')) // Sửa lỗi múi giờ
            };

            // Validate dữ liệu
            if (!formData.selectedDates.length) {
                Swal.fire('Lỗi', 'Vui lòng chọn ít nhất 1 ngày nghỉ!', 'error');
                return;
            }

            try {
                const response = await fetch("/api/Leave/SubmitLeave", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${getAuthToken()}`
                    },
                    body: JSON.stringify(formData.selectedDates.map(date => ({
                        NgayNghi: date,
                        LyDo: formData.leaveReason,
                        MaLoaiNgayNghi: parseInt(formData.leaveType)
                    })))
                });

                const result = await response.json();

                if (!response.ok) throw new Error(result.message || 'Lỗi API');

                await Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: 'Đăng ký nghỉ phép thành công!'
                });

                // Reset form
                datePicker.clear();
                document.getElementById("leaveForm").reset();
                document.getElementById("selectedDates").textContent = '';

            } catch (error) {
                console.error('Submit error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi hệ thống',
                    text: error.message || 'Vui lòng thử lại sau!'
                });
            }
        });
    });

</script>


<script>
    //Hiển thị lịch sử đăng ký nghỉ phép
    document.addEventListener("DOMContentLoaded", async function () {
        let leaveHistory = [];
        let currentPage = 1;
        const itemsPerPage = 5;

        // Hàm lấy dữ liệu từ API (không cần truyền maNv)
        async function fetchLeaveHistory() {
            try {
                const response = await fetch('/api/Leave/GetLeaveHistory');
                if (!response.ok) {
                    if (response.status === 401) {
                        window.location.href = '/login'; // Redirect nếu chưa login
                        return;
                    }
                    throw new Error(`Lỗi HTTP: ${response.status} - ${response.statusText}`);
                }

                const result = await response.json();
                if (result?.success && Array.isArray(result.leaveHistory)) {
                    leaveHistory = result.leaveHistory;
                    renderTable();
                } else {
                    displayError("Không có dữ liệu nghỉ phép");
                }
            } catch (error) {
                console.error("Lỗi hệ thống:", error);
                displayError("Lỗi kết nối server");
            }
        }

        // Giữ nguyên hàm renderTable và các hàm hỗ trợ
        function renderTable() {
            const leaveHistoryBody = document.getElementById("leaveHistoryBody");
            if (!leaveHistoryBody) {
                throw new Error("Không tìm thấy phần tử leaveHistoryBody trong DOM.");
            }
            leaveHistoryBody.innerHTML = "";

            const sortedData = sortData(leaveHistory);
            const paginatedData = paginateData(sortedData, currentPage, itemsPerPage);

            paginatedData.forEach(item => {
                const row = document.createElement("tr");
                row.innerHTML = `
                        <td>${item.tenLoai || "Không xác định"}</td>
                        <td>${formatDate(item.ngayNghi) || "Không xác định"}</td>
                        <td>${item.lyDo || "Không có lý do"}</td>
                        <td><span class="status ${getStatusClass(item.trangThai)}">${item.trangThai}</span></td>
                    `;
                leaveHistoryBody.appendChild(row);
            });

            updatePageInfo();
        }

        // Hàm để sắp xếp dữ liệu
        function sortData(data) {
            const sortBy = document.getElementById("sortDropdown").value;
            switch (sortBy) {
                case "dateDesc":
                    return data.sort((a, b) => new Date(b.ngayNghi) - new Date(a.ngayNghi));
                case "pending":
                    return data.sort((a, b) => a.trangThai === "Chờ duyệt" ? -1 : 1);
                case "approved":
                    return data.sort((a, b) => a.trangThai === "Đã duyệt" ? -1 : 1);
                case "rejected":
                    return data.sort((a, b) => a.trangThai === "Từ chối" ? -1 : 1);
                default:
                    return data;
            }
        }

        // Hàm để phân trang dữ liệu
        function paginateData(data, page, itemsPerPage) {
            const startIndex = (page - 1) * itemsPerPage;
            return data.slice(startIndex, startIndex + itemsPerPage);
        }

        // Hàm để cập nhật thông tin trang
        function updatePageInfo() {
            const totalPages = Math.ceil(leaveHistory.length / itemsPerPage);
            document.getElementById("pageInfo").textContent = `Trang ${currentPage} / ${totalPages}`;
        }

        // Hàm để hiển thị lỗi
        function displayError(message) {
            const leaveHistoryBody = document.getElementById("leaveHistoryBody");
            if (leaveHistoryBody) {
                leaveHistoryBody.innerHTML = `<tr><td colspan='4' class='text-danger'>${message}</td></tr>`;
            }
        }

        // Event listener cho dropdown sắp xếp
        document.getElementById("sortDropdown").addEventListener("change", () => {
            currentPage = 1;
            renderTable();
        });

        // Event listener cho nút Previous
        document.getElementById("prevPage").addEventListener("click", () => {
            if (currentPage > 1) {
                currentPage--;
                renderTable();
            }
        });

        // Event listener cho nút Next
        document.getElementById("nextPage").addEventListener("click", () => {
            const totalPages = Math.ceil(leaveHistory.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                renderTable();
            }
        });

        // Hàm để xác định lớp CSS dựa trên trạng thái
        function getStatusClass(status) {
            if (!status) return "";
            const normalizedStatus = status.trim().toLowerCase();
            switch (normalizedStatus) {
                case "chờ duyệt": return "text-warning bg-warning-subtle";
                case "đã duyệt": return "text-success bg-success-subtle";
                case "từ chối": return "text-danger bg-danger-subtle";
                default: return "";
            }
        }

        // Hàm để định dạng ngày
        function formatDate(dateStr) {
            if (!dateStr) return "";
            const date = new Date(dateStr);
            if (isNaN(date.getTime())) return "Không xác định";
            return date.toISOString().split("T")[0]; // Format thành YYYY-MM-DD
        }

        // Khởi tạo
        fetchLeaveHistory();
    });


</script>



<script>
    // lấy loại ngày nghỉ
    document.addEventListener("DOMContentLoaded", async function () {
        try {
            const response = await fetch("/api/Leave/GetLeaveTypes");
            const result = await response.json();

            console.log("Dữ liệu trả về từ API:", result); // Kiểm tra dữ liệu

            if (result && result.success && Array.isArray(result.leaveTypes)) {
                const leaveTypeSelect = document.getElementById("leaveTypeSelect");

                // Xóa tất cả các option hiện có (trừ option mặc định)
                leaveTypeSelect.innerHTML = '<option value="">Chọn loại nghỉ</option>';

                // Thêm từng loại nghỉ phép vào select
                result.leaveTypes.forEach(leaveType => {
                    const option = document.createElement("option");
                    option.value = leaveType.maLoaiNgayNghi; // Đảm bảo đúng tên thuộc tính
                    option.textContent = leaveType.tenLoai;
                    leaveTypeSelect.appendChild(option);
                });

                console.log("Số lượng option sau khi thêm:", leaveTypeSelect.options.length); // Kiểm tra số lượng option
            } else {
                console.error("Lỗi dữ liệu:", result);
                alert("Dữ liệu không hợp lệ.");
            }
        } catch (error) {
            console.error("Lỗi hệ thống:", error);
            alert("Lỗi hệ thống. Vui lòng thử lại sau.");
        }
    });

</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        fetch('/api/Leave/SoNgayConLai')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Lỗi khi lấy dữ liệu');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    const soNgayConLaiElement = document.querySelector('.leave-info-card strong');
                    if (soNgayConLaiElement) {
                        soNgayConLaiElement.textContent = `${data.soNgayConLai} ngày`;
                    }
                } else {
                    console.error('Lỗi:', data.message);
                }
            })
            .catch(error => {
                console.error('Lỗi:', error);
            });
    });


</script>
