@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
@* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> *@
<!-- Font Awesome -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css">

<style>
    .dashboard-card {
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .dashboard-card:hover {
            transform: translateY(-5px);
        }

    .leave-history {
        margin-top: 2rem;
        padding: 1.5rem;
        background-color: #f8f9fa;
        border-radius: 12px;
    }

        .leave-history h6 {
            color: #495057;
            font-weight: 600;
        }

        .leave-history table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 8px;
        }

            .leave-history table th,
            .leave-history table td {
                padding: 12px;
                background-color: #fff;
            }

            .leave-history table th {
                background-color: #e9ecef;
                font-weight: 600;
            }

            .leave-history table tr {
                border-radius: 8px;
                overflow: hidden;
            }

    .btn-success {
        background-color: #28a745;
        border: none;
        padding: 10px 20px;
        margin-top: 20px;
        font-size: 16px;
        border-radius: 8px;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .form-control,
    .form-select {
        border-radius: 8px;
        padding: 10px;
        border: 1px solid #ced4da;
    }

        .form-control:focus,
        .form-select:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .leave-info-card {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .leave-info-card:hover {
            transform: translateY(-5px);
        }

        .leave-info-card h6 {
            color: #495057;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .leave-info-card p {
            font-size: 1.25rem;
            color: #28a745;
            font-weight: 600;
            margin-bottom: 0;
        }

    #selectedDates {
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 8px;
        padding: 10px;
        font-size: 14px;
        color: #495057;
    }

    .status {
        font-weight: bold;
        display: inline-block;
        width: 100%; /* Chiếm toàn bộ chiều rộng của ô */
        height: 100%; /* Chiếm toàn bộ chiều cao của ô */
        text-align: center; /* Căn giữa nội dung */
    }

    .bg-warning-subtle {
        background-color: rgba(255, 193, 7, 0.2);
    }

    .bg-success-subtle {
        background-color: rgba(40, 167, 69, 0.2);
    }

    .bg-danger-subtle {
        background-color: rgba(220, 53, 69, 0.2);
    }
    /* Điều chỉnh chiều rộng và style cho dropdown */
    #sortDropdown {
        width: 250px; /* Điều chỉnh chiều rộng */
        padding: 8px 12px; /* Thêm padding */
        border: 1px solid #ccc; /* Thêm border */
        border-radius: 4px; /* Bo góc */
        font-size: 14px; /* Điều chỉnh kích thước font */
        background-color: #f9f9f9; /* Màu nền */
        transition: border-color 0.3s ease; /* Hiệu ứng hover */
    }

        #sortDropdown:hover {
            border-color: #888; /* Đổi màu border khi hover */
        }

        #sortDropdown:focus {
            outline: none; /* Loại bỏ outline khi focus */
            border-color: #007bff; /* Đổi màu border khi focus */
        }



    /* Căn giữa nội dung trong các thẻ <th> và <td> */
    .table th,
    .table td {
        text-align: center; /* Căn giữa theo chiều ngang */
        vertical-align: middle; /* Căn giữa theo chiều dọc */
    }

    /* Tùy chỉnh style cho bảng */
    .table {
        width: 100%; /* Chiều rộng bảng */
        border-collapse: collapse; /* Gộp border */
        margin-top: 20px; /* Thêm khoảng cách phía trên */
    }

        .table th {
            background-color: #f2f2f2; /* Màu nền header */
            font-weight: bold; /* Đậm chữ */
        }

        .table td {
            border: 1px solid #ddd; /* Thêm border cho các ô */
            padding: 10px; /* Thêm padding */
        }

        /* Hiệu ứng hover cho các hàng */
        .table tbody tr:hover {
            background-color: #f5f5f5; /* Đổi màu nền khi hover */
        }

    .weekend-day, .past-day {
        position: relative;
        cursor: not-allowed !important;
    }



    .weekend-day {
        text-decoration: line-through;
        color: #ff7d7d !important;
    }

    .past-day {
        color: #b2b2b2 !important;
    }



    /* Thay đổi hiển thị ngày đã đăng ký */

    .registered-day {
        background-color: #a8f0b0 !important; /* Màu nền xanh lá nhạt */
        color: #28a745 !important; /* Màu chữ xanh lá */
        border: 2px solid #28a745 !important; /* Viền xanh lá */
        position: relative;
        cursor: not-allowed !important;
        text-decoration: none !important; /* Bỏ gạch ngang */
    }

        .weekend-day:hover::after, .past-day:hover::after, .registered-day:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            top: -35px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 100;
        }

    /* Làm rõ ngày được chọn */
    .flatpickr-day.selected {
        background-color: #28a745 !important;
        border-color: #28a745 !important;
        font-weight: bold;
    }

    .btn-cancel {
        background-color: #ff4d4d;
        color: white;
        padding: 6px 12px;
        border: none;
        border-radius: 6px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.15);
    }

        .btn-cancel:hover {
            background-color: #ff3333;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.18);
        }

        .btn-cancel:active {
            transform: translateY(0);
            box-shadow: 0 1px 2px rgba(0,0,0,0.15);
        }

        .btn-cancel i {
            font-size: 14px;
        }

    .btn-cancel-disabled {
        background-color: #f0f0f0;
        color: #aaa;
        cursor: not-allowed;
        border: 1px solid #ddd;
        box-shadow: none;
    }

        .btn-cancel-disabled:hover {
            transform: none;
            box-shadow: none;
        }

    td .btn-cancel, td .btn-cancel-disabled {
        display: flex;
        margin: 0 auto;
        justify-content: center;
        align-items: center;
    }

    /* Add these styles to your existing <style> block */

    /* Tab styling */
    .nav-tabs .nav-link {
        color: #495057;
        border: 1px solid transparent;
        border-top-left-radius: 0.25rem;
        border-top-right-radius: 0.25rem;
        padding: 0.75rem 1rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .nav-tabs .nav-link:hover {
            border-color: #e9ecef #e9ecef #dee2e6;
            background-color: #f8f9fa;
        }

        .nav-tabs .nav-link.active {
            color: #0d6efd;
            background-color: #fff;
            border-color: #dee2e6 #dee2e6 #fff;
            border-bottom: 2px solid #0d6efd;
        }

    /* Empty state message */
    .empty-state {
        text-align: center;
        padding: 2rem;
        color: #6c757d;
    }

    /* Disable previous/next buttons when appropriate */
    .pagination button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /* Tab icons */
    .nav-tabs .nav-link i {
        margin-right: 0.5rem;
    }

    /* Tab content transition */
    .tab-content > .tab-pane {
        transition: opacity 0.3s ease-in-out;
    }

    /* Badge counters for tabs */
    .tab-badge {
        background-color: #6c757d;
        color: white;
        border-radius: 50%;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        margin-left: 0.5rem;
    }

    .pending-badge {
        background-color: #ffc107;
    }

    .approved-badge {
        background-color: #28a745;
    }

    .rejected-badge {
        background-color: #dc3545;
    }
    .file-link {
    color: #007bff;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
}

.file-link:hover {
    text-decoration: underline;
    color: #0056b3;
}

</style>

<div id="leaveSection" class="dashboard-card bg-white p-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-calendar-alt me-2"></i>Đăng ký nghỉ phép</h5>
    <form id="leaveForm">
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Loại nghỉ phép</label>
                <select id="leaveTypeSelect" class="form-select" name="leaveType" required>
                    <option value="">Chọn loại nghỉ</option>
                </select>
                <div id="leaveTypeError" class="text-danger mt-2"></div>
            </div>
            <div class="col-md-6">
                <label class="form-label">Chọn Ngày</label>
                <input type="text" id="datePicker" class="form-control" placeholder="Chọn ngày..." required>
            </div>
            <div class="col-md-6">
                <label class="form-label">Ngày đã chọn</label>
                <div id="selectedDates" class="form-control" style="height: auto; min-height: 38px;"></div>
            </div>
            <div class="col-12">
                <label class="form-label">Lý do</label>
                <textarea class="form-control" name="leaveReason" rows="3" placeholder="Nhập lý do..."></textarea>
            </div>
            <div class="col-12">
                <label class="form-label">File đính kèm</label>
                <input type="file" id="fileAttachments" class="form-control" name="files" multiple>
                <div class="small text-muted mt-1">Có thể tải lên một hoặc nhiều file</div>
                <div id="selectedFiles" class="mt-2"></div>
            </div>
            <div class="col-12">
                <button type="submit" id="submitButton" class="btn btn-success">
                    <i class="fas fa-paper-plane me-2"></i>Gửi yêu cầu
                </button>

            </div>
        </div>
    </form>
</div>
<div class="dashboard-card bg-white p-4 mt-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-info-circle me-2"></i>Thông tin nghỉ phép khả dụng</h5>
    <div class="row">
        <div class="col-md-12">
            <div class="leave-info-card">
                <h6>Nghỉ phép năm</h6>
                <p>Số ngày còn lại: <strong>Đang tải...</strong></p>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-12">
            <div class="leave-notes p-3 bg-light rounded">
                <p class="small mb-1"><strong>Lưu ý:</strong></p>
                <ul class="small mb-0">
                    <li>Luật lao động: Làm ở công ty 5 năm, tăng thêm 1 ngày phép.</li>
                    <li>Luật Công ty: Cứ 5 năm tăng thêm 1 ngày phép.</li>
                </ul>
            </div>
        </div>
    </div>
</div>
<!-- Replace the existing leave-history div with this code -->
<div class="leave-history bg-white p-4 mt-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-history me-2"></i>Lịch sử đăng ký nghỉ phép</h5>

    <!-- Tab Navigation -->
    <ul class="nav nav-tabs mb-3" id="leaveHistoryTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pending" type="button" role="tab" aria-controls="pending" aria-selected="true">
                <i class="fas fa-clock me-2"></i>Đơn chờ duyệt
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="approved-tab" data-bs-toggle="tab" data-bs-target="#approved" type="button" role="tab" aria-controls="approved" aria-selected="false">
                <i class="fas fa-check-circle me-2"></i>Đơn đã duyệt
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="rejected-tab" data-bs-toggle="tab" data-bs-target="#rejected" type="button" role="tab" aria-controls="rejected" aria-selected="false">
                <i class="fas fa-times-circle me-2"></i>Đơn bị từ chối
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content" id="leaveHistoryTabContent">
        <!-- Pending Tab -->
        <div class="tab-pane fade show active" id="pending" role="tabpanel" aria-labelledby="pending-tab">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>File đính kèm</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody id="pendingLeaveBody"></tbody>
            </table>
            <div class="pagination" id="pendingPagination">
                <button id="pendingPrevPage" class="btn btn-sm">
                    <i class="fas fa-chevron-left me-1"></i> Trước
                </button>
                <span id="pendingPageInfo" class="mx-3"></span>
                <button id="pendingNextPage" class="btn btn-sm">
                    Sau <i class="fas fa-chevron-right ms-1"></i>
                </button>
            </div>
        </div>

        <!-- Approved Tab -->
        <div class="tab-pane fade" id="approved" role="tabpanel" aria-labelledby="approved-tab">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>File đính kèm</th>
                        <th>Ngày duyệt</th>
                        <th>Ghi chú</th>
                        <th>Người duyệt</th>
                    </tr>
                </thead>
                <tbody id="approvedLeaveBody"></tbody>
            </table>
            <div class="pagination" id="approvedPagination">
                <button id="approvedPrevPage" class="btn btn-sm">
                    <i class="fas fa-chevron-left me-1"></i> Trước
                </button>
                <span id="approvedPageInfo" class="mx-3"></span>
                <button id="approvedNextPage" class="btn btn-sm">
                    Sau <i class="fas fa-chevron-right ms-1"></i>
                </button>
            </div>
        </div>

        <!-- Rejected Tab -->
        <div class="tab-pane fade" id="rejected" role="tabpanel" aria-labelledby="rejected-tab">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>File đính kèm</th>
                        <th>Ngày duyệt</th>
                        <th>Ghi chú</th>
                        <th>Người duyệt</th>
                    </tr>
                </thead>
                <tbody id="rejectedLeaveBody"></tbody>
            </table>
            <div class="pagination" id="rejectedPagination">
                <button id="rejectedPrevPage" class="btn btn-sm">
                    <i class="fas fa-chevron-left me-1"></i> Trước
                </button>
                <span id="rejectedPageInfo" class="mx-3"></span>
                <button id="rejectedNextPage" class="btn btn-sm">
                    Sau <i class="fas fa-chevron-right ms-1"></i>
                </button>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://npmcdn.com/flatpickr/dist/l10n/vn.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script>
// Function to fetch already registered dates
async function fetchAlreadyRegisteredDates() {
    try {
        const response = await fetch('/api/Leave/GetAlreadyRegisteredDates', {
            headers: {
                "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error: ${response.status}`);
        }

        const result = await response.json();
        if (result.success) {
            return result.dates.map(dateStr => {
                const date = new Date(dateStr);
                return date.setHours(0, 0, 0, 0);
            });
        } else {
            console.error("API error:", result.message);
            return [];
        }
    } catch (error) {
        console.error("Error fetching registered dates:", error);
        return [];
    }
}

// Document Ready Event Handler
document.addEventListener("DOMContentLoaded", async function () {
    // Lấy các ngày đã đăng ký trước khi khởi tạo datepicker
    const registeredDates = await fetchAlreadyRegisteredDates();
    
    // Thêm CSS cho ngày đã đăng ký
    const styleElement = document.createElement('style');
    styleElement.textContent = `
        .registered-day {
            background-color: #a8f0b0 !important;
            color: #28a745 !important;
            border: 2px solid #28a745 !important;
            position: relative;
            cursor: not-allowed !important;
            text-decoration: none !important;
        }

        .registered-day:hover::after {
            content: attr(title);
            position: absolute;
            top: -35px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 14px;
            white-space: nowrap;
            z-index: 100;
        }
    `;
    document.head.appendChild(styleElement);
        // Add CSS for improved pagination
        const paginationStyle = document.createElement('style');
        paginationStyle.innerHTML = `
            .pagination {
                display: flex;
                justify-content: center;
                align-items: center;
                margin-top: 20px;
                gap: 10px;
            }

            .pagination button {
                background-color: #f8f9fa;
                border: 1px solid #ddd;
                color: #495057;
                padding: 8px 15px;
                border-radius: 5px;
                font-weight: 500;
                transition: all 0.2s ease;
                cursor: pointer;
            }

            .pagination button:hover:not(:disabled) {
                background-color: #e9ecef;
                border-color: #adb5bd;
            }

            .pagination button:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .pagination span {
                font-weight: 500;
                color: #495057;
                padding: 5px 10px;
                border-radius: 5px;
                background-color: #ffffff;
                border: 1px solid #e9ecef;
            }
        `;
        document.head.appendChild(paginationStyle);

    // Lấy token từ localStorage
    const getAuthToken = () => localStorage.getItem('jwtToken');

    // Config Flatpickr
    const today = new Date().setHours(0, 0, 0, 0);
    const datePicker = flatpickr("#datePicker", {
        mode: "multiple",
        dateFormat: "Y-m-d",
        minDate: "today",
        locale: "vn",
        disable: [
            function (date) {
                // Vô hiệu hóa thứ Bảy (6) và Chủ nhật (0)
                const isWeekend = (date.getDay() === 0 || date.getDay() === 6);

                // Vô hiệu hóa ngày đã đăng ký
                const dateTime = date.setHours(0, 0, 0, 0);
                const isAlreadyRegistered = registeredDates.includes(dateTime);

                return isWeekend || isAlreadyRegistered;
            }
        ],
        onDayCreate: function (dObj, dStr, fp, dayElem) {
            const date = dayElem.dateObj;
            const dateTime = date.setHours(0, 0, 0, 0);

            // Thêm tooltip cho ngày cuối tuần
            if (date.getDay() === 0 || date.getDay() === 6) {
                dayElem.title = "Không thể đăng ký nghỉ phép vào ngày cuối tuần";
                dayElem.classList.add("weekend-day");
            }

            // Thêm tooltip cho ngày trong quá khứ
            if (date < new Date().setHours(0, 0, 0, 0)) {
                dayElem.title = "Không thể đăng ký nghỉ phép vào ngày trong quá khứ";
                dayElem.classList.add("past-day");
            }

            // Thêm tooltip và style cho ngày đã đăng ký
            if (registeredDates.includes(dateTime)) {
                dayElem.title = "Bạn đã đăng ký nghỉ phép vào ngày này";
                dayElem.classList.add("registered-day");
            }
        },
        onClose: function (selectedDates) {
            const validDates = selectedDates.filter(date => {
                const dateTime = date.setHours(0, 0, 0, 0);
                return date >= today && !registeredDates.includes(dateTime);
            });

            if (validDates.length !== selectedDates.length) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi chọn ngày',
                    text: 'Có ngày không hợp lệ trong lựa chọn của bạn!'
                });
                this.clear();
            }

            document.getElementById("selectedDates").textContent =
                validDates.map(date => date.toLocaleDateString('vi-VN')).join(', ');
        }
    });

    let selectedFilesArray = []; // Mảng lưu trữ file đã chọn

        // Xử lý submit form
        document.getElementById("leaveForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = {
                leaveType: document.querySelector("[name='leaveType']").value,
                leaveReason: document.querySelector("[name='leaveReason']").value,
                selectedDates: datePicker.selectedDates.map(d => d.toLocaleDateString('sv-SE'))
            };

            if (!formData.selectedDates.length) {
                Swal.fire('Lỗi', 'Vui lòng chọn ít nhất 1 ngày nghỉ!', 'error');
                return;
            }

            try {
                const submitFormData = new FormData();

                const leaveRequestsData = formData.selectedDates.map(date => ({
                    NgayNghi: date,
                    LyDo: formData.leaveReason,
                    MaLoaiNgayNghi: parseInt(formData.leaveType)
                }));

                submitFormData.append('leaveRequestsJson', JSON.stringify(leaveRequestsData));

                // Gửi tất cả file đã chọn (bao gồm file trước đó + file mới)
                selectedFilesArray.forEach(file => {
                    submitFormData.append('files', file);
                });

                const response = await fetch("/api/Leave/SubmitLeave", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${getAuthToken()}`
                    },
                    body: submitFormData
                });

                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Lỗi API');

                await Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: 'Đăng ký nghỉ phép thành công!'
                });

                // Tải lại toàn bộ trang sau khi đăng ký thành công
                window.location.reload();

            } catch (error) {
                console.error('Submit error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi hệ thống',
                    text: error.message || 'Vui lòng thử lại sau!'
                });
            }
        });

    // Hiển thị danh sách file đã chọn và cập nhật mảng selectedFilesArray
    document.getElementById('fileAttachments')?.addEventListener('change', function (e) {
        const newFiles = Array.from(this.files);

        // Thêm file mới vào mảng selectedFilesArray
        selectedFilesArray = selectedFilesArray.concat(newFiles);

        // Cập nhật giao diện hiển thị danh sách file
        updateSelectedFilesUI();
    });

    // Hàm cập nhật giao diện danh sách file
    function updateSelectedFilesUI() {
        const fileList = document.getElementById('selectedFiles');
        fileList.innerHTML = '';

        if (selectedFilesArray.length > 0) {
            const fileCount = document.createElement('div');
            fileCount.className = 'mb-2';
            fileCount.innerHTML = `<strong>Đã chọn ${selectedFilesArray.length} file:</strong>`;
            fileList.appendChild(fileCount);

            const list = document.createElement('ul');
            list.className = 'list-group';

            selectedFilesArray.forEach(file => {
                const item = document.createElement('li');
                item.className = 'list-group-item d-flex justify-content-between align-items-center';

                const fileInfo = document.createElement('div');
                fileInfo.innerHTML = `
                <i class="fas fa-file me-2"></i>
                ${file.name}
                <span class="badge bg-secondary rounded-pill">${formatFileSize(file.size)}</span>
            `;

                item.appendChild(fileInfo);
                list.appendChild(item);
            });

            fileList.appendChild(list);
        }
    }

    // Hàm format file size
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';

        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Make sure Bootstrap JS is loaded for tabs functionality
    if (typeof bootstrap === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js';
        script.onload = initializeTabs; // Initialize tabs once Bootstrap is loaded
        document.head.appendChild(script);
    } else {
        initializeTabs(); // Initialize tabs if Bootstrap is already loaded
    }

    // Initialize tab functionality
    function initializeTabs() {
        // Initialize Bootstrap tabs
        const tabElements = document.querySelectorAll('button[data-bs-toggle="tab"]');
        tabElements.forEach(tabElement => {
            tabElement.addEventListener('click', function (event) {
                event.preventDefault();

                // Remove active class from all tabs
                tabElements.forEach(tab => {
                    tab.classList.remove('active');
                    const tabPane = document.querySelector(tab.getAttribute('data-bs-target'));
                    if (tabPane) {
                        tabPane.classList.remove('show', 'active');
                    }
                });

                // Add active class to current tab
                this.classList.add('active');
                const targetPane = document.querySelector(this.getAttribute('data-bs-target'));
                if (targetPane) {
                    targetPane.classList.add('show', 'active');
                }

                // Update the table for the active tab
                const tabId = this.getAttribute('data-bs-target').substring(1);
                renderTable(tabId);
            });
        });

        // Activate the first tab by default
        if (tabElements.length > 0) {
            const firstTab = tabElements[0];
            firstTab.classList.add('active');
            const firstTabPane = document.querySelector(firstTab.getAttribute('data-bs-target'));
            if (firstTabPane) {
                firstTabPane.classList.add('show', 'active');
            }
        }
    }

    // Fetch leave types
    try {
        const response = await fetch("/api/Leave/GetLeaveTypes");
        const result = await response.json();

        console.log("Dữ liệu trả về từ API:", result); // Kiểm tra dữ liệu

        if (result && result.success && Array.isArray(result.leaveTypes)) {
            const leaveTypeSelect = document.getElementById("leaveTypeSelect");

            // Xóa tất cả các option hiện có (trừ option mặc định)
            leaveTypeSelect.innerHTML = '<option value="">Chọn loại nghỉ</option>';

            // Thêm từng loại nghỉ phép vào select
            result.leaveTypes.forEach(leaveType => {
                const option = document.createElement("option");
                option.value = leaveType.maLoaiNgayNghi; // Đảm bảo đúng tên thuộc tính
                option.textContent = leaveType.tenLoai;
                leaveTypeSelect.appendChild(option);
            });

            console.log("Số lượng option sau khi thêm:", leaveTypeSelect.options.length); // Kiểm tra số lượng option
        } else {
            console.error("Lỗi dữ liệu:", result);
            alert("Dữ liệu không hợp lệ.");
        }
    } catch (error) {
        console.error("Lỗi hệ thống:", error);
        alert("Lỗi hệ thống. Vui lòng thử lại sau.");
    }

    // Fetch available leave balance
    fetch('/api/Leave/SoNgayConLai')
        .then(response => {
            if (!response.ok) {
                throw new Error('Lỗi khi lấy dữ liệu');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Lưu giá trị vào biến global
                availableLeaveBalance = data.soNgayConLai;

                const soNgayConLaiElement = document.querySelector('.leave-info-card strong');
                if (soNgayConLaiElement) {
                    soNgayConLaiElement.textContent = `${data.soNgayConLai} ngày`;
                }

                // Kiểm tra và cập nhật trạng thái nút đăng ký
                checkLeaveBalance();
            } else {
                console.error('Lỗi:', data.message);
            }
        })
        .catch(error => {
            console.error('Lỗi:', error);
        });
        
    // Fetch leave history initially
    fetchLeaveHistory();
});

// Biến global để lưu số ngày phép còn lại
let availableLeaveBalance = 0;

// Global variables for leave history data
let leaveHistory = [];
const tabData = {
    pending: { currentPage: 1, itemsPerPage: 5, filteredData: [] },
    approved: { currentPage: 1, itemsPerPage: 5, filteredData: [] },
    rejected: { currentPage: 1, itemsPerPage: 5, filteredData: [] }
};

// Function to fetch leave history data
    async function fetchLeaveHistory() {
        try {
            const response = await fetch('/api/Leave/GetLeaveHistory', {
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });

            if (!response.ok) {
                if (response.status === 401) {
                    window.location.href = '/login';
                    return;
                }
                throw new Error(`Lỗi HTTP: ${response.status} - ${response.statusText}`);
            }

            const result = await response.json();
            console.log("Leave history data:", result); // Debug to verify nguoiDuyetHoTen
            if (result?.success && Array.isArray(result.leaveHistory)) {
                leaveHistory = result.leaveHistory;

                // Filter data for each tab
                tabData.pending.filteredData = leaveHistory.filter(item => item.trangThai === "Chờ duyệt");
                tabData.approved.filteredData = leaveHistory.filter(item => item.trangThai === "Đã duyệt");
                tabData.rejected.filteredData = leaveHistory.filter(item => item.trangThai === "Từ chối");

                // Render all tabs
                renderTable('pending');
                renderTable('approved');
                renderTable('rejected');

                // Update tab badges
                updateTabBadges();

                // Setup pagination controls
                setupPaginationControls();
            } else {
                displayError("Không có dữ liệu nghỉ phép", ['pendingLeaveBody', 'approvedLeaveBody', 'rejectedLeaveBody']);
            }
        } catch (error) {
            console.error("Lỗi hệ thống:", error);
            displayError("Lỗi kết nối server", ['pendingLeaveBody', 'approvedLeaveBody', 'rejectedLeaveBody']);
        }
    }
    // Chức năng cập nhật huy hiệu tab với số lượng
function updateTabBadges() {
    // Add badges to tabs showing count
    const pendingCount = tabData.pending.filteredData.length;
    const approvedCount = tabData.approved.filteredData.length;
    const rejectedCount = tabData.rejected.filteredData.length;

    // Create or update badge elements
    updateBadge('pending-tab', pendingCount, 'pending-badge');
    updateBadge('approved-tab', approvedCount, 'approved-badge');
    updateBadge('rejected-tab', rejectedCount, 'rejected-badge');
}

// Helper function to update a single badge
function updateBadge(tabId, count, badgeClass) {
    const tabElement = document.getElementById(tabId);
    if (!tabElement) return;

    // Remove existing badge if present
    const existingBadge = tabElement.querySelector('.tab-badge');
    if (existingBadge) {
        existingBadge.remove();
    }

    // Add new badge
    const badge = document.createElement('span');
    badge.className = `tab-badge ${badgeClass}`;
    badge.textContent = count;
    tabElement.appendChild(badge);
}

// Function to display error message
function displayError(message, tableBodyIds) {
    tableBodyIds.forEach(id => {
        const tableBody = document.getElementById(id);
        if (tableBody) {
            tableBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">${message}</td></tr>`;
        }
    });
}

// Function to render table data for a specific tab
    function renderTable(tabId) {
        const tableBodyId = `${tabId}LeaveBody`;
        const tableBody = document.getElementById(tableBodyId);
        if (!tableBody) {
            console.error(`Không tìm thấy phần tử ${tableBodyId} trong DOM.`);
            return;
        }
        tableBody.innerHTML = "";

        const { currentPage, itemsPerPage, filteredData } = tabData[tabId];
        const paginatedData = paginateData(filteredData, currentPage, itemsPerPage);

        if (paginatedData.length === 0) {
            let colspan = 6; // Mặc định cho tab pending
            if (tabId === 'approved' || tabId === 'rejected') {
                colspan = 8;
            }
            tableBody.innerHTML = `<tr><td colspan="${colspan}" class="text-center">Không có đơn nào trong danh sách này</td></tr>`;
        } else {
            paginatedData.forEach(item => {
                const row = document.createElement("tr");

                // Xử lý hiển thị file đính kèm
                const fileDisplayHtml = generateFileDisplayHtml(item.fileDinhKem);

                // Format ngày duyệt
                const ngayDuyetFormatted = item.ngayDuyet ? formatDate(item.ngayDuyet) : "Chưa duyệt";

                if (tabId === 'pending') {
                    // Hiển thị cho tab đơn chờ duyệt (thêm cột file đính kèm)
                    const cancelButton = `<button class="btn-cancel" data-id="${item.id}">
                            <i class="fas fa-times-circle"></i>
                            <span>Hủy đơn</span>
                        </button>`;

                    row.innerHTML = `
                        <td>${item.tenLoai || "Không xác định"}</td>
                        <td>${formatDate(item.ngayNghi) || "Không xác định"}</td>
                        <td>${item.lyDo || "Không có lý do"}</td>
                        <td><span class="status ${getStatusClass(item.trangThai)}">${item.trangThai}</span></td>
                        <td>${fileDisplayHtml}</td>
                        <td>${cancelButton}</td>
                    `;
                } else {
                    // Hiển thị cho tab đơn đã duyệt và đơn từ chối
                    row.innerHTML = `
                        <td>${item.tenLoai || "Không xác định"}</td>
                        <td>${formatDate(item.ngayNghi) || "Không xác định"}</td>
                        <td>${item.lyDo || "Không có lý do"}</td>
                        <td><span class="status ${getStatusClass(item.trangThai)}">${item.trangThai}</span></td>
                        <td>${fileDisplayHtml}</td>
                        <td>${ngayDuyetFormatted}</td>
                        <td>${item.ghiChu || "Không có ghi chú"}</td>
                        <td>${item.nguoiDuyetHoTen || "Chưa có"}</td> <!-- Sử dụng nguoiDuyetHoTen -->
                    `;
                }

                tableBody.appendChild(row);
            });
        }

        // Add event listeners for cancel buttons
        document.querySelectorAll(`#${tableBodyId} .btn-cancel`).forEach(btn => {
            btn.addEventListener('click', function () {
                const leaveId = this.getAttribute('data-id');
                cancelLeaveRequest(leaveId);
            });
        });

        // Add event listeners for file links
        document.querySelectorAll(`#${tableBodyId} .file-link`).forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const filePath = this.getAttribute('data-path');
                viewFile(filePath);
            });
        });

        // Initialize dropdowns for Bootstrap
        initializeDropdowns();

        updatePaginationControls(tabId);
    }

// Function to generate file display HTML
function generateFileDisplayHtml(fileDinhKem) {
    if (!fileDinhKem) {
        return '<span class="text-muted">Không có</span>';
    }
    
    // Split by dash if multiple files
    const files = fileDinhKem.split('-');
    
    if (files.length === 0 || (files.length === 1 && !files[0].trim())) {
        return '<span class="text-muted">Không có</span>';
    }
    
    if (files.length === 1) {
        // Single file
        return `<a href="#" class="file-link" data-path="/uploads/${files[0]}">
                    <i class="fas fa-file me-1"></i>${truncateFileName(files[0])}
                </a>`;
    } else {
        // Multiple files - sửa cấu trúc dropdown cho Bootstrap 5
        const uniqueId = `dropdown-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
        let fileListHtml = `<div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" 
                                    id="${uniqueId}" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-paperclip me-1"></i>${files.length} files
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="${uniqueId}">`;
                            
        files.forEach(file => {
            fileListHtml += `<li>
                              <a class="dropdown-item file-link" href="#" data-path="/uploads/${file}">
                                <i class="fas fa-file me-1"></i>${truncateFileName(file)}
                              </a>
                            </li>`;
        });
        
        fileListHtml += `</ul></div>`;
        return fileListHtml;
    }
}

// Replace your current dropdown initialization code with this:
function initializeDropdowns() {
    // Check if Bootstrap is loaded
    if (typeof bootstrap !== 'undefined') {
        // Initialize all dropdowns
        const dropdownElements = document.querySelectorAll('.dropdown-toggle');
        dropdownElements.forEach(dropdownToggleEl => {
            // Only initialize if not already initialized
            if (!dropdownToggleEl._dropdown) {
                new bootstrap.Dropdown(dropdownToggleEl);
            }
        });
    } else {
        // If Bootstrap isn't loaded, try loading it again
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js';
        script.onload = initializeDropdowns;
        document.head.appendChild(script);
    }
}

// Then call this function after rendering your table content
// In your renderTable function, replace the dropdown initialization part with:
initializeDropdowns();
c

// Helper function to truncate file names if too long
function truncateFileName(fileName) {
    const maxLength = 15;
    if (fileName.length <= maxLength) {
        return fileName;
    }
    
    const extension = fileName.split('.').pop();
    const nameWithoutExt = fileName.substring(0, fileName.length - extension.length - 1);
    
    if (nameWithoutExt.length <= maxLength - 5) {
        return fileName;
    }
    
    return `${nameWithoutExt.substring(0, maxLength - 5)}...${extension}`;
}

// Function to view a file
    function viewFile(filePath) {
        console.log("Viewing file:", filePath); // Debug log

        // Check file extension
        const extension = filePath.split('.').pop().toLowerCase();
        const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg'];

        if (imageExtensions.includes(extension)) {
            // Show image preview for image files
            Swal.fire({
                title: 'Xem file',
                html: `<img src="${filePath}" class="img-fluid" alt="Preview">`,
                width: 800,
                showCloseButton: true,
                showConfirmButton: false
            });
        } else {
            // For other files, open in new tab
            window.open(filePath, '_blank');
        }
    }

    // Chức năng hủy yêu cầu nghỉ phép
    async function cancelLeaveRequest(leaveId) {
        try {
            const result = await Swal.fire({
                title: 'Xác nhận hủy đơn',
                text: "Bạn có chắc chắn muốn hủy đơn nghỉ phép này?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Đồng ý hủy',
                cancelButtonText: 'Không'
            });

            if (result.isConfirmed) {
                const response = await fetch(`/api/Leave/CancelLeave/${leaveId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire(
                        'Đã hủy!',
                        'Đơn nghỉ phép đã được hủy thành công.',
                        'success'
                    );

                    // Làm mới dữ liệu sau khi hủy
                    fetchLeaveHistory();
                } else {
                    Swal.fire(
                        'Lỗi!',
                        data.message || 'Không thể hủy đơn nghỉ phép.',
                        'error'
                    );
                }
            }
        } catch (error) {
            console.error('Lỗi khi hủy đơn:', error);
            Swal.fire(
                'Lỗi hệ thống',
                'Đã xảy ra lỗi, vui lòng thử lại sau.',
                'error'
            );
        }
    }

    // Chức năng trợ giúp để định dạng ngày tháng
    function formatDate(dateString) {
        if (!dateString) return '';

        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        } catch (error) {
            console.error('Error formatting date:', error);
            return dateString;
        }
    }

// Helper function to get status class for styling
function getStatusClass(status) {
    switch (status) {
        case 'Chờ duyệt':
            return 'bg-warning-subtle';
        case 'Đã duyệt':
            return 'bg-success-subtle';
        case 'Từ chối':
            return 'bg-danger-subtle';
        default:
            return '';
    }
}



// Hàm kiểm tra số ngày phép khả dụng
function checkLeaveBalance() {
    const submitButton = document.getElementById("submitButton");
    const leaveForm = document.getElementById("leaveForm");
    const leaveSection = document.getElementById("leaveSection");

    if (availableLeaveBalance <= 0) {
        // Vô hiệu hóa nút đăng ký
        submitButton.disabled = true;
        submitButton.classList.remove("btn-success");
        submitButton.classList.add("btn-secondary");


            // Thêm thông báo về số ngày phép đã hết
            if (!document.getElementById("noLeaveMessage")) {
                const alertMessage = document.createElement("div");
                alertMessage.id = "noLeaveMessage";
                alertMessage.className = "alert alert-warning mt-3";
                alertMessage.innerHTML = `
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Thông báo:</strong> Số dư nghỉ phép của bạn đã hết. Không thể gửi yêu cầu nghỉ phép.
                    `;
                leaveSection.insertBefore(alertMessage, leaveForm.nextSibling);
            }
        } else {
            // Đảm bảo nút đăng ký được kích hoạt
            submitButton.disabled = false;
            submitButton.classList.remove("btn-secondary");
            submitButton.classList.add("btn-success");

            // Xóa thông báo nếu tồn tại
            const alertMessage = document.getElementById("noLeaveMessage");
            if (alertMessage) {
                alertMessage.remove();
            }
        }
    }

    // Function to setup pagination controls
    function setupPaginationControls() {
        // Setup pagination for all tabs
        ['pending', 'approved', 'rejected'].forEach(tabId => {
            setupPaginationForTab(tabId);
        });
    }

    // Setup pagination controls for a specific tab
    function setupPaginationForTab(tabId) {
        const prevButton = document.getElementById(`${tabId}PrevPage`);
        const nextButton = document.getElementById(`${tabId}NextPage`);

        if (!prevButton || !nextButton) {
            console.error(`Pagination buttons not found for ${tabId}`);
            return;
        }

        // Remove existing event listeners to prevent duplicates
        prevButton.replaceWith(prevButton.cloneNode(true));
        nextButton.replaceWith(nextButton.cloneNode(true));

        // Get the fresh references after replacing
        const newPrevButton = document.getElementById(`${tabId}PrevPage`);
        const newNextButton = document.getElementById(`${tabId}NextPage`);

        // Add event listeners
        newPrevButton.addEventListener('click', function () {
            if (tabData[tabId].currentPage > 1) {
                tabData[tabId].currentPage--;
                renderTable(tabId);
            }
        });

        newNextButton.addEventListener('click', function () {
            const totalPages = Math.ceil(tabData[tabId].filteredData.length / tabData[tabId].itemsPerPage);
            if (tabData[tabId].currentPage < totalPages) {
                tabData[tabId].currentPage++;
                renderTable(tabId);
            }
        });
    }

    // Updated function to update pagination controls with better UI
    function updatePaginationControls(tabId) {
        const { currentPage, itemsPerPage, filteredData } = tabData[tabId];
        const totalPages = Math.ceil(filteredData.length / itemsPerPage);

        // Update page info text
        const pageInfoElement = document.getElementById(`${tabId}PageInfo`);
        if (pageInfoElement) {
            pageInfoElement.textContent = `Trang ${currentPage} / ${Math.max(totalPages, 1)}`;
        }

        // Update previous button state
        const prevButton = document.getElementById(`${tabId}PrevPage`);
        if (prevButton) {
            prevButton.disabled = currentPage <= 1;
        }

        // Update next button state
        const nextButton = document.getElementById(`${tabId}NextPage`);
        if (nextButton) {
            nextButton.disabled = currentPage >= totalPages || totalPages === 0;
        }
    }

    // Pagination helper functions
    function paginateData(data, page, itemsPerPage) {
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        return data.slice(startIndex, endIndex);
    }


</script>
