@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<!-- Font Awesome -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css">

<style>
    .dashboard-card {
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .dashboard-card:hover {
            transform: translateY(-5px);
        }

    .leave-history {
        margin-top: 2rem;
        padding: 1.5rem;
        background-color: #f8f9fa;
        border-radius: 12px;
    }

        .leave-history h6 {
            color: #495057;
            font-weight: 600;
        }

        .leave-history table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 8px;
        }

            .leave-history table th,
            .leave-history table td {
                padding: 12px;
                background-color: #fff;
            }

            .leave-history table th {
                background-color: #e9ecef;
                font-weight: 600;
            }

            .leave-history table tr {
                border-radius: 8px;
                overflow: hidden;
            }

    .btn-success {
        background-color: #28a745;
        border: none;
        padding: 10px 20px;
        margin-top: 20px;
        font-size: 16px;
        border-radius: 8px;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .form-control,
    .form-select {
        border-radius: 8px;
        padding: 10px;
        border: 1px solid #ced4da;
    }

        .form-control:focus,
        .form-select:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .leave-info-card {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .leave-info-card:hover {
            transform: translateY(-5px);
        }

        .leave-info-card h6 {
            color: #495057;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .leave-info-card p {
            font-size: 1.25rem;
            color: #28a745;
            font-weight: 600;
            margin-bottom: 0;
        }

    #selectedDates {
        min-height: 45px;
        max-height: 150px;
        background-color: #ffffff;
        border: 2px solid #e8eaed;
        border-radius: 12px;
        padding: 0.75rem 1rem;
        font-size: 0.95rem;
        color: #5f6368;
        transition: all 0.3s ease;
        overflow-y: auto;
        white-space: pre-wrap;
        word-wrap: break-word;
        line-height: 1.5;
    }

        #selectedDates:hover {
            border-color: #dadce0;
        }

        #selectedDates::-webkit-scrollbar {
            width: 8px;
        }

        #selectedDates::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        #selectedDates::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }

            #selectedDates::-webkit-scrollbar-thumb:hover {
                background: #a8a8a8;
            }

    .status {
        font-weight: bold;
        display: inline-block;
        width: 100%;
        height: 100%;
        text-align: center;
    }

    .bg-warning-subtle {
        background-color: rgba(255, 193, 7, 0.2);
    }

    .bg-success-subtle {
        background-color: rgba(40, 167, 69, 0.2);
    }

    .bg-danger-subtle {
        background-color: rgba(220, 53, 69, 0.2);
    }

    #sortDropdown {
        width: 250px;
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
        background-color: #f9f9f9;
        transition: border-color 0.3s ease;
    }

        #sortDropdown:hover {
            border-color: #888;
        }

        #sortDropdown:focus {
            outline: none;
            border-color: #007bff;
        }

    .table th,
    .table td {
        text-align: center;
        vertical-align: middle;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        .table td {
            border: 1px solid #ddd;
            padding: 10px;
        }

        .table tbody tr:hover {
            background-color: #f5f5f5;
        }

    .weekend-day, .past-day, .registered-day, .holiday {
        position: relative;
        cursor: not-allowed !important;
    }

    .weekend-day {
        text-decoration: line-through;
        color: #ff7d7d !important;
    }

    .past-day {
        color: #b2b2b2 !important;
    }

    .registered-day {
        background-color: #a8f0b0 !important;
        color: #28a745 !important;
        border: 2px solid #28a745 !important;
        text-decoration: none !important;
    }

    .registered-day.pending {
        background-color: #fff3cd !important;
        color: #856404 !important;
        border: 2px solid #ffeeba !important;
    }

    .registered-day.approved {
        background-color: #d4edda !important;
        color: #155724 !important;
        border: 2px solid #c3e6cb !important;
    }

    .holiday {
        background-color: #f8d7da !important;
        color: #721c24 !important;
        border: 2px solid #f5c6cb !important;
        text-decoration: none !important;
    }

        .weekend-day:hover::after,
        .past-day:hover::after,
        .registered-day:hover::after,
        .holiday:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            top: -70px; /* Tăng khoảng cách để tooltip hiển thị xa hơn khỏi lịch */
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.85);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 13px;
            white-space: nowrap;
            z-index: 10000; /* Tăng z-index cao hơn flatpickr-calendar */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s ease-in-out, top 0.2s ease-in-out;
        }

        .weekend-day:hover::after,
        .past-day:hover::after,
        .registered-day:hover::after,
        .holiday:hover::after {
            opacity: 1;
            top: -70px; /* Giữ vị trí cố định khi hiển thị */
        }

    /* Đảm bảo lịch Flatpickr không che tooltip */
    .flatpickr-calendar {
        z-index: 1000; /* Giữ z-index thấp hơn tooltip */
        overflow: visible !important; /* Ngăn container lịch cắt tooltip */
    }

    /* Đảm bảo container cha của lịch không cắt tooltip */
    .flatpickr-innerContainer,
    .flatpickr-rContainer,
    .flatpickr-days {
        overflow: visible !important; /* Ngăn các container con cắt tooltip */
    }


    .flatpickr-day.selected {
        background-color: #28a745 !important;
        border-color: #28a745 !important;
        font-weight: bold;
    }

    .btn-cancel {
        background-color: #ff4d4d;
        color: white;
        padding: 6px 12px;
        border: none;
        border-radius: 6px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.15);
    }

        .btn-cancel:hover {
            background-color: #ff3333;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.18);
        }

        .btn-cancel:active {
            transform: translateY(0);
            box-shadow: 0 1px 2px rgba(0,0,0,0.15);
        }

        .btn-cancel i {
            font-size: 14px;
        }

    .btn-cancel-disabled {
        background-color: #f0f0f0;
        color: #aaa;
        cursor: not-allowed;
        border: 1px solid #ddd;
        box-shadow: none;
    }

        .btn-cancel-disabled:hover {
            transform: none;
            box-shadow: none;
        }

    td .btn-cancel, td .btn-cancel-disabled {
        display: flex;
        margin: 0 auto;
        justify-content: center;
        align-items: center;
    }

    .nav-tabs .nav-link {
        color: #495057;
        border: 1px solid transparent;
        border-top-left-radius: 0.25rem;
        border-top-right-radius: 0.25rem;
        padding: 0.75rem 1rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .nav-tabs .nav-link:hover {
            border-color: #e9ecef #e9ecef #dee2e6;
            background-color: #f8f9fa;
        }

        .nav-tabs .nav-link.active {
            color: #0d6efd;
            background-color: #fff;
            border-color: #dee2e6 #dee2e6 #fff;
            border-bottom: 2px solid #0d6efd;
        }

    .empty-state {
        text-align: center;
        padding: 2rem;
        color: #6c757d;
    }

    .pagination button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .nav-tabs .nav-link i {
        margin-right: 0.5rem;
    }

    .tab-content > .tab-pane {
        transition: opacity 0.3s ease-in-out;
    }

    .tab-badge {
        background-color: #6c757d;
        color: white;
        border-radius: 50%;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        margin-left: 0.5rem;
    }

    .pending-badge {
        background-color: #ffc107;
    }

    .approved-badge {
        background-color: #28a745;
    }

    .rejected-badge {
        background-color: #dc3545;
    }

    .canceled-badge {
        background-color: #6c757d;
    }

    .file-link {
        color: #007bff;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
    }

        .file-link:hover {
            text-decoration: underline;
            color: #0056b3;
        }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        gap: 10px;
    }

        .pagination button {
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            color: #495057;
            padding: 8px 15px;
            border-radius: 5px;
            font-weight: 500;
            transition: all 0.2s ease;
            cursor: pointer;
        }

            .pagination button:hover:not(:disabled) {
                background-color: #e9ecef;
                border-color: #adb5bd;
            }

            .pagination button:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

        .pagination span {
            font-weight: 500;
            color: #495057;
            padding: 5px 10px;
            border-radius: 5px;
            background-color: #ffffff;
            border: 1px solid #e9ecef;
        }

    .leave-dashboard-enhanced {
        border-radius: 16px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.12);
        transition: all 0.3s ease;
        max-width: 800px;
        margin: 0 auto;
        border-left: 5px solid #4285f4;
        background: linear-gradient(to right, #ffffff, #f8f9fa);
        overflow: hidden;
    }

        .leave-dashboard-enhanced:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 32px rgba(0,0,0,0.15);
        }

    .leave-enhanced-card {
        padding: 25px;
    }

        .leave-enhanced-card .card-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e8f0fe;
        }

            .leave-enhanced-card .card-header i {
                background-color: #e8f0fe;
                color: #4285f4;
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 12px;
                margin-right: 15px;
                font-size: 1.2rem;
                box-shadow: 0 4px 12px rgba(66, 133, 244, 0.15);
            }

            .leave-enhanced-card .card-header h5 {
                margin: 0;
                color: #1a73e8;
                font-weight: 600;
                font-size: 1.4rem;
            }

        .leave-enhanced-card h6 {
            font-weight: 600;
            color: #5f6368;
            margin-bottom: 20px;
            font-size: 1.1rem;
            text-align: center;
            position: relative;
            padding-bottom: 10px;
        }

            .leave-enhanced-card h6::after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 50%;
                transform: translateX(-50%);
                width: 60px;
                height: 3px;
                background: linear-gradient(to right, #4285f4, #34a853);
                border-radius: 3px;
            }

    .leave-data-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 25px;
        gap: 20px;
    }

    .leave-enhanced-card p {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 0;
        color: #5f6368;
        flex: 1;
        padding: 15px;
        position: relative;
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }

        .leave-enhanced-card p:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(0,0,0,0.08);
        }

        .leave-enhanced-card p:not(:last-child):after {
            content: "";
            position: absolute;
            right: -10px;
            top: 20%;
            height: 60%;
            width: 1px;
            background: linear-gradient(to bottom, transparent, #e0e0e0, transparent);
        }

        .leave-enhanced-card p span {
            font-size: 0.9rem;
            color: #5f6368;
            margin-bottom: 8px;
            text-align: center;
        }

    .leave-enhanced-card strong {
        font-weight: 600;
        color: #202124;
        background-color: #f8f9fa;
        padding: 10px 20px;
        border-radius: 25px;
        min-width: 100px;
        text-align: center;
        margin-top: 8px;
        font-size: 1.2rem;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);
    }

    .leave-enhanced-card .so-ngay-con-lai {
        color: #34a853;
        background-color: #e6f4ea;
    }

    .leave-enhanced-card .so-ngay-da-su-dung {
        color: #ea4335;
        background-color: #fce8e6;
    }

    .leave-enhanced-card .so-ngay-phep-duoc-cap {
        color: #4285f4;
        background-color: #e8f0fe;
    }

    #leaveSection {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        padding: 2rem;
        margin-top: 2rem;
        border: 1px solid rgba(66, 133, 244, 0.1);
        transition: all 0.3s ease;
    }

        #leaveSection:hover {
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.12);
            transform: translateY(-5px);
        }

        #leaveSection h5 {
            color: #1a73e8;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

            #leaveSection h5 i {
                background: #e8f0fe;
                padding: 0.75rem;
                border-radius: 12px;
                color: #1a73e8;
                box-shadow: 0 4px 12px rgba(66, 133, 244, 0.15);
            }

    #leaveForm .form-label {
        color: #5f6368;
        font-weight: 500;
        margin-bottom: 0.5rem;
        font-size: 0.95rem;
    }

    #leaveForm .form-control,
    #leaveForm .form-select {
        border: 2px solid #e8eaed;
        border-radius: 12px;
        padding: 0.75rem 1rem;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background-color: #ffffff;
    }

        #leaveForm .form-control:focus,
        #leaveForm .form-select:focus {
            border-color: #1a73e8;
            box-shadow: 0 0 0 4px rgba(26, 115, 232, 0.1);
            background-color: #ffffff;
        }

        #leaveForm .form-control:hover,
        #leaveForm .form-select:hover {
            border-color: #dadce0;
        }

    #selectedDates {
        min-height: 45px;
        max-height: 150px;
        background-color: #ffffff;
        border: 2px solid #e8eaed;
        border-radius: 12px;
        padding: 0.75rem 1rem;
        font-size: 0.95rem;
        color: #5f6368;
        transition: all 0.3s ease;
        overflow-y: auto;
        white-space: pre-wrap;
        word-wrap: break-word;
        line-height: 1.5;
    }

        #selectedDates:hover {
            border-color: #dadce0;
        }

        #selectedDates::-webkit-scrollbar {
            width: 8px;
        }

        #selectedDates::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        #selectedDates::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }

            #selectedDates::-webkit-scrollbar-thumb:hover {
                background: #a8a8a8;
            }

    #fileAttachments {
        border: 2px dashed #e8eaed;
        border-radius: 12px;
        padding: 1.5rem;
        background-color: #f8f9fa;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        #fileAttachments:hover {
            border-color: #1a73e8;
            background-color: #f1f3f4;
        }

    #selectedFiles {
        margin-top: 1rem;
    }

        #selectedFiles .list-group-item {
            border: 1px solid #e8eaed;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            padding: 0.75rem 1rem;
            background-color: #ffffff;
            transition: all 0.3s ease;
        }

            #selectedFiles .list-group-item:hover {
                background-color: #f8f9fa;
                transform: translateX(5px);
            }

        #selectedFiles .badge {
            background-color: #e8f0fe;
            color: #1a73e8;
            font-weight: 500;
            padding: 0.5rem 0.75rem;
            border-radius: 6px;
        }

    #submitButton {
        background: linear-gradient(135deg, #1a73e8 0%, #4285f4 100%);
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        font-weight: 500;
        color: #ffffff;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(26, 115, 232, 0.2);
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: 1.5rem;
        width: auto;
        min-width: 200px;
        justify-content: center;
    }

        #submitButton:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(26, 115, 232, 0.3);
            background: linear-gradient(135deg, #1557b0 0%, #3367d6 100%);
        }

        #submitButton:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(26, 115, 232, 0.2);
        }

        #submitButton i {
            font-size: 1rem;
        }

    .small.text-muted {
        color: #5f6368 !important;
        font-size: 0.85rem;
        margin-top: 0.5rem;
    }


    #leaveBalanceAlert {
        animation: slideIn 0.3s ease-out;
        border-radius: 12px;
        padding: 1rem 1.5rem;
        margin-top: 1.5rem;
        border: none;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }

        #leaveBalanceAlert.alert-danger {
            background: linear-gradient(to right, #fff5f5, #ffe3e3);
            border-left: 4px solid #dc3545;
        }

        #leaveBalanceAlert.alert-warning {
            background: linear-gradient(to right, #fff9db, #ffec99);
            border-left: 4px solid #ffc107;
        }

        #leaveBalanceAlert i {
            margin-right: 0.75rem;
            font-size: 1.1rem;
        }

        #leaveBalanceAlert strong {
            font-weight: 600;
            margin-right: 0.5rem;
        }

    .leave-type-description {
        font-size: 0.85rem;
        color: #5f6368;
        margin-top: 0.5rem;
        padding: 0.75rem;
        background-color: #f8f9fa;
        border-radius: 8px;
        border-left: 3px solid #1a73e8;
        display: none;
        transition: all 0.3s ease;
    }

        .leave-type-description.show {
            display: block;
            animation: fadeIn 0.3s ease-in-out;
        }


    .form-select option {
        padding: 10px;
    }

        .form-select option:checked {
            background-color: #e8f0fe;
            color: #1a73e8;
        }

    .file-upload-container {
        border: 2px dashed #e8eaed;
        border-radius: 12px;
        padding: 1.5rem;
        background-color: #f8f9fa;
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        min-height: 200px;
        display: flex;
        flex-direction: column;
    }

        .file-upload-container:hover {
            border-color: #1a73e8;
            background-color: #f1f3f4;
        }

        .file-upload-container.dragover {
            border-color: #1a73e8;
            background-color: #e8f0fe;
        }

    .upload-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        border-radius: 8px;
        background-color: rgba(255, 255, 255, 0.8);
        margin-bottom: 1rem;
    }

        .upload-area.has-files {
            display: none;
        }

    .file-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
        width: 100%;
    }

    .file-item {
        background-color: #ffffff;
        border: 1px solid #e8eaed;
        border-radius: 8px;
        padding: 0.75rem;
        transition: all 0.3s ease;
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

        .file-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

    .file-icon {
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #e8f0fe;
        border-radius: 8px;
        color: #1a73e8;
        margin-bottom: 0.5rem;
        font-size: 1.5rem;
    }

    .file-name {
        font-size: 0.85rem;
        color: #202124;
        margin: 0;
        word-break: break-word;
        max-width: 100%;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .file-size {
        font-size: 0.75rem;
        color: #5f6368;
        margin: 0.25rem 0;
    }

    .remove-file {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: none;
        border: none;
        color: #dc3545;
        padding: 0.25rem;
        cursor: pointer;
        transition: all 0.2s ease;
        border-radius: 4px;
        opacity: 0;
    }

    .file-item:hover .remove-file {
        opacity: 1;
    }

    .remove-file:hover {
        background-color: #fff5f5;
        transform: scale(1.1);
    }

    .upload-icon {
        font-size: 2.5rem;
        color: #1a73e8;
        margin-bottom: 1rem;
    }

    .upload-text {
        color: #5f6368;
        margin-bottom: 0.5rem;
        font-size: 1rem;
    }

    .upload-hint {
        font-size: 0.85rem;
        color: #80868b;
    }

    .file-input-hidden {
        display: none;
    }

    .add-files-button {
        display: none;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        background-color: #e8f0fe;
        color: #1a73e8;
        border: 2px dashed #1a73e8;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        margin-top: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 500;
    }

        .add-files-button:hover {
            background-color: #1a73e8;
            color: white;
            transform: translateY(-2px);
        }

        .add-files-button i {
            font-size: 1.1rem;
        }

        .add-files-button.show {
            display: flex;
        }

    .leave-history-modern {
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        padding: 2rem;
        margin-top: 2rem;
    }

        .leave-history-modern .history-header {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #f0f2f5;
        }

            .leave-history-modern .history-header i {
                background: #e8f0fe;
                color: #1a73e8;
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 10px;
                margin-right: 1rem;
                font-size: 1.2rem;
            }

            .leave-history-modern .history-header h5 {
                color: #1a73e8;
                font-size: 1.4rem;
                font-weight: 600;
                margin: 0;
            }

        .leave-history-modern .nav-tabs {
            border: none;
            margin-bottom: 1.5rem;
            gap: 0.5rem;
        }

            .leave-history-modern .nav-tabs .nav-link {
                border: none;
                padding: 0.75rem 1.25rem;
                border-radius: 8px;
                color: #5f6368;
                font-weight: 500;
                transition: all 0.3s ease;
                background: #f8f9fa;
                margin: 0;
                position: relative;
                overflow: hidden;
            }

                .leave-history-modern .nav-tabs .nav-link:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
                }

                .leave-history-modern .nav-tabs .nav-link.active {
                    color: #ffffff;
                    font-weight: 600;
                }

                /* Tab colors for each status */
                .leave-history-modern .nav-tabs .nav-link[data-bs-target="#pending"] {
                    background: #fff3e0;
                    color: #f57c00;
                }

                    .leave-history-modern .nav-tabs .nav-link[data-bs-target="#pending"]:hover {
                        background: #ffe0b2;
                    }

                    .leave-history-modern .nav-tabs .nav-link[data-bs-target="#pending"].active {
                        background: #f57c00;
                        color: #ffffff;
                    }

                .leave-history-modern .nav-tabs .nav-link[data-bs-target="#approved"] {
                    background: #e8f5e9;
                    color: #2e7d32;
                }

                    .leave-history-modern .nav-tabs .nav-link[data-bs-target="#approved"]:hover {
                        background: #c8e6c9;
                    }

                    .leave-history-modern .nav-tabs .nav-link[data-bs-target="#approved"].active {
                        background: #2e7d32;
                        color: #ffffff;
                    }

                .leave-history-modern .nav-tabs .nav-link[data-bs-target="#rejected"] {
                    background: #ffebee;
                    color: #c62828;
                }

                    .leave-history-modern .nav-tabs .nav-link[data-bs-target="#rejected"]:hover {
                        background: #ffcdd2;
                    }

                    .leave-history-modern .nav-tabs .nav-link[data-bs-target="#rejected"].active {
                        background: #c62828;
                        color: #ffffff;
                    }

                .leave-history-modern .nav-tabs .nav-link[data-bs-target="#canceled"] {
                    background: #eceff1;
                    color: #546e7a;
                }

                    .leave-history-modern .nav-tabs .nav-link[data-bs-target="#canceled"]:hover {
                        background: #cfd8dc;
                    }

                    .leave-history-modern .nav-tabs .nav-link[data-bs-target="#canceled"].active {
                        background: #546e7a;
                        color: #ffffff;
                    }

                .leave-history-modern .nav-tabs .nav-link i {
                    margin-right: 0.5rem;
                    font-size: 1.1rem;
                }

        .leave-history-modern .tab-badge {
            background: rgba(255, 255, 255, 0.2);
            color: inherit;
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.75rem;
            margin-left: 0.5rem;
            font-weight: 600;
        }

        /* Add subtle animation for tab switching */
        .leave-history-modern .tab-pane {
            animation: fadeIn 0.3s ease-in-out;
        }



        .leave-history-modern .history-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 0.5rem;
        }

            .leave-history-modern .history-table th {
                background: #f8f9fa;
                color: #5f6368;
                font-weight: 600;
                padding: 1rem;
                font-size: 0.9rem;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                text-align: center;
                vertical-align: middle;
            }

            .leave-history-modern .history-table td {
                background: #ffffff;
                padding: 1rem;
                vertical-align: middle;
                border: none;
                font-size: 0.95rem;
                color: #202124;
                text-align: center;
            }

            .leave-history-modern .history-table .tooltip-cell {
                display: inline-block;
                max-width: 200px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
                text-align: center;
            }

            .leave-history-modern .history-table .dropdown {
                display: inline-block;
                text-align: center;
            }

            .leave-history-modern .history-table .dropdown-toggle {
                text-align: center;
                width: auto;
                min-width: 100px;
            }

            .leave-history-modern .history-table .file-link {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: 0.5rem;
                padding: 0.5rem 1rem;
                background: #e8f0fe;
                border-radius: 6px;
                transition: all 0.3s ease;
                text-align: center;
                width: fit-content;
                margin: 0 auto;
            }

            .leave-history-modern .history-table .btn-cancel {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: 0.5rem;
                margin: 0 auto;
            }

            .leave-history-modern .history-table .dropdown-menu {
                text-align: left;
                min-width: 200px;
            }

            .leave-history-modern .history-table .dropdown-item {
                text-align: left;
                padding: 0.5rem 1rem;
                white-space: normal;
                word-wrap: break-word;
            }

            .leave-history-modern .history-table .status-badge {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: 0.5rem;
                padding: 0.5rem 1rem;
                border-radius: 20px;
                font-weight: 500;
                font-size: 0.85rem;
                white-space: nowrap;
                width: fit-content;
                margin: 0 auto;
            }

            .leave-history-modern .history-table td:has(.status-badge) {
                text-align: center;
            }

            .leave-history-modern .history-table tr {
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
                border-radius: 8px;
                transition: all 0.3s ease;
            }

                .leave-history-modern .history-table tr:hover {
                    transform: none;
                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
                }

        .leave-history-modern .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 500;
            font-size: 0.85rem;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            white-space: nowrap;
            width: fit-content;
        }

            .leave-history-modern .status-badge i {
                font-size: 0.9rem;
            }

        .leave-history-modern .status-pending {
            background: #fff3e0;
            color: #f57c00;
        }

        .leave-history-modern .status-approved {
            background: #e8f5e9;
            color: #2e7d32;
        }

        .leave-history-modern .status-rejected {
            background: #ffebee;
            color: #c62828;
        }

        .leave-history-modern .status-canceled {
            background: #eceff1;
            color: #546e7a;
        }

        .leave-history-modern .file-link {
            color: #1a73e8;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: #e8f0fe;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

            .leave-history-modern .file-link:hover {
                background: #1a73e8;
                color: #ffffff;
            }

        .leave-history-modern .pagination-modern {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 1.5rem;
            gap: 0.5rem;
        }

            .leave-history-modern .pagination-modern button {
                background: #ffffff;
                border: 1px solid #e0e0e0;
                color: #5f6368;
                padding: 0.5rem 1rem;
                border-radius: 6px;
                font-weight: 500;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

                .leave-history-modern .pagination-modern button:hover:not(:disabled) {
                    background: #e8f0fe;
                    color: #1a73e8;
                    border-color: #1a73e8;
                }

                .leave-history-modern .pagination-modern button:disabled {
                    background: #f5f5f5;
                    color: #9e9e9e;
                    cursor: not-allowed;
                }

            .leave-history-modern .pagination-modern span {
                background: #ffffff;
                padding: 0.5rem 1rem;
                border-radius: 6px;
                font-weight: 500;
                color: #5f6368;
                border: 1px solid #e0e0e0;
            }

        .leave-history-modern .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: #5f6368;
        }

            .leave-history-modern .empty-state i {
                font-size: 3rem;
                color: #e0e0e0;
                margin-bottom: 1rem;
            }

            .leave-history-modern .empty-state p {
                font-size: 1.1rem;
                margin: 0;
            }

    .dropdown-menu {
        display: none;
        position: absolute;
        z-index: 1000;
        min-width: 10rem;
        padding: 0.5rem 0;
        margin: 0;
        font-size: 1rem;
        color: #212529;
        text-align: left;
        list-style: none;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid rgba(0,0,0,.15);
        border-radius: 0.25rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

        .dropdown-menu.show {
            display: block;
            animation: fadeIn 0.2s ease-in-out;
        }


    .dropdown-item {
        display: block;
        width: 100%;
        padding: 0.25rem 1rem;
        clear: both;
        font-weight: 400;
        color: #212529;
        text-align: inherit;
        white-space: nowrap;
        background-color: transparent;
        border: 0;
        text-decoration: none;
        transition: all 0.2s ease;
    }

        .dropdown-item:hover {
            color: #1a73e8;
            text-decoration: none;
            background-color: #e8f0fe;
            transform: translateX(5px);
        }

    #selectedFilesPreview {
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 4px;
        background-color: #f9f9f9;
    }

        #selectedFilesPreview div {
            display: flex;
            align-items: center;
            padding: 5px;
            border-bottom: 1px solid #eee;
        }

            #selectedFilesPreview div:last-child {
                border-bottom: none;
            }

        #selectedFilesPreview .fas {
            margin-right: 10px;
            color: #555;
        }

        #selectedFilesPreview button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 16px;
        }

</style>

<div class="leave-dashboard-enhanced bg-white mt-4">
    <div class="leave-enhanced-card">
        <div class="card-header">
            <i class="fas fa-calendar-check"></i>
            <h5>Thông tin nghỉ phép năm @DateTime.Now.Year</h5>
        </div>
        <h6>Quản lý nghỉ phép</h6>
        <div class="leave-data-row">
            <p>
                <span>Số ngày phép được cấp</span>
                <strong class="so-ngay-phep-duoc-cap">Đang tải...</strong>
            </p>
            <p>
                <span>Số ngày đã sử dụng</span>
                <strong class="so-ngay-da-su-dung">Đang tải...</strong>
            </p>
            <p>
                <span>Số ngày còn lại</span>
                <strong class="so-ngay-con-lai">Đang tải...</strong>
            </p>
        </div>
    </div>
</div>


<div id="leaveSection" class="dashboard-card bg-white p-4">
    <h5 class="mb-4">
        <i class="fas fa-calendar-alt"></i>
        Đăng ký nghỉ phép
    </h5>
    <form id="leaveForm">
        <div class="row g-4">
            <div class="col-md-6">
                <label class="form-label">
                    <i class="fas fa-tag me-2"></i>Loại nghỉ phép
                </label>
                <select id="leaveTypeSelect" class="form-select" name="leaveType" required>
                    <option value="">Chọn loại nghỉ</option>
                </select>
                <div id="leaveTypeDescription" class="leave-type-description"></div>
                <div id="leaveTypeError" class="text-danger mt-2"></div>
            </div>
            <div class="col-md-6">
                <label class="form-label">
                    <i class="fas fa-calendar me-2"></i>Chọn Ngày
                </label>
                <input type="text" id="datePicker" class="form-control" placeholder="Chọn ngày..." required>
            </div>
            <div class="col-md-6">
                <label class="form-label">
                    <i class="fas fa-list me-2"></i>Ngày đã chọn
                </label>
                <div id="selectedDates" class="form-control"></div>
            </div>
            <div class="col-12">
                <label class="form-label">
                    <i class="fas fa-comment me-2"></i>Lý do
                </label>
                <textarea class="form-control" name="leaveReason" rows="3" placeholder="Nhập lý do nghỉ phép..."></textarea>
            </div>
            <div class="col-12">
                <label class="form-label">
                    <i class="fas fa-paperclip me-2"></i>File đính kèm
                </label>
                <div class="file-upload-container" id="fileUploadContainer">
                    <input type="file" id="fileAttachments" class="file-input-hidden" name="files" multiple>
                    <div class="upload-area" id="uploadArea">
                        <i class="fas fa-cloud-upload-alt upload-icon"></i>
                        <p class="upload-text">Kéo thả file vào đây hoặc click để chọn file</p>
                        <p class="upload-hint">Có thể tải lên một hoặc nhiều file</p>
                    </div>
                    <div id="selectedFiles" class="file-list"></div>
                    <button type="button" class="add-files-button" id="addMoreFiles">
                        <i class="fas fa-plus"></i>
                        Thêm file
                    </button>
                </div>
            </div>
            <div class="col-12">
                <button type="submit" id="submitButton">
                    <i class="fas fa-paper-plane"></i>
                    Gửi yêu cầu
                </button>
            </div>
        </div>
    </form>
</div>


<div class="leave-history-modern">
    <div class="history-header">
        <i class="fas fa-history"></i>
        <h5>Lịch sử đăng ký nghỉ phép</h5>
    </div>
    <ul class="nav nav-tabs" id="leaveHistoryTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pending" type="button" role="tab">
                <i class="fas fa-clock"></i>Đơn chờ duyệt
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="approved-tab" data-bs-toggle="tab" data-bs-target="#approved" type="button" role="tab">
                <i class="fas fa-check-circle"></i>Đơn đã duyệt
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="rejected-tab" data-bs-toggle="tab" data-bs-target="#rejected" type="button" role="tab">
                <i class="fas fa-times-circle"></i>Đơn bị từ chối
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="canceled-tab" data-bs-toggle="tab" data-bs-target="#canceled" type="button" role="tab">
                <i class="fas fa-ban"></i>Đơn đã hủy
            </button>
        </li>
    </ul>
    <div class="tab-content" id="leaveHistoryTabContent">
        <div class="tab-pane fade show active" id="pending" role="tabpanel">
            <table class="history-table">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>File đính kèm</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody id="pendingLeaveBody"></tbody>
            </table>
            <div class="pagination-modern" id="pendingPagination">
                <button id="pendingPrevPage">
                    <i class="fas fa-chevron-left"></i> Trước
                </button>
                <span id="pendingPageInfo"></span>
                <button id="pendingNextPage">
                    Sau <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
        <div class="tab-pane fade" id="approved" role="tabpanel">
            <table class="history-table">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>File đính kèm</th>
                        <th>Ngày duyệt</th>
                        <th>Người duyệt</th>
                    </tr>
                </thead>
                <tbody id="approvedLeaveBody"></tbody>
            </table>
            <div class="pagination-modern" id="approvedPagination">
                <button id="approvedPrevPage">
                    <i class="fas fa-chevron-left"></i> Trước
                </button>
                <span id="approvedPageInfo"></span>
                <button id="approvedNextPage">
                    Sau <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
        <div class="tab-pane fade" id="rejected" role="tabpanel">
            <table class="history-table">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>File đính kèm</th>
                        <th>Ngày duyệt</th>
                        <th>Lý do từ chối</th>
                        <th>Người duyệt</th>
                    </tr>
                </thead>
                <tbody id="rejectedLeaveBody"></tbody>
            </table>
            <div class="pagination-modern" id="rejectedPagination">
                <button id="rejectedPrevPage">
                    <i class="fas fa-chevron-left"></i> Trước
                </button>
                <span id="rejectedPageInfo"></span>
                <button id="rejectedNextPage">
                    Sau <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
        <div class="tab-pane fade" id="canceled" role="tabpanel">
            <table class="history-table">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>File đính kèm</th>
                        <th>Ngày hủy</th>
                        <th>Lý do hủy đơn</th>
                    </tr>
                </thead>
                <tbody id="canceledLeaveBody"></tbody>
            </table>
            <div class="pagination-modern" id="canceledPagination">
                <button id="canceledPrevPage">
                    <i class="fas fa-chevron-left"></i> Trước
                </button>
                <span id="canceledPageInfo"></span>
                <button id="canceledNextPage">
                    Sau <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
@* <script src="https://npmcdn.com/flatpickr/dist/l10n/vn.js"></script> *@
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>

<script>
    let selectedFilesArray = []; // Mảng lưu trữ file đã chọn

    // Function to fetch already registered dates
    async function fetchAlreadyRegisteredDates() {
        try {
            const response = await fetch('/api/Leave/GetAlreadyRegisteredDates', {
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }

            const result = await response.json();
            if (result.success) {
                return result.dates.map(dateInfo => ({
                    date: new Date(dateInfo.date).setHours(0, 0, 0, 0),
                    status: dateInfo.status
                }));
            } else {
                console.error("API error:", result.message);
                return [];
            }
        } catch (error) {
            console.error("Error fetching registered dates:", error);
            return [];
        }
    }

    // Function to fetch holidays
    async function fetchHolidays() {
        try {
            const response = await fetch('/api/Leave/GetHolidays', {
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }

            const result = await response.json();
            if (result.success) {
                return result.holidays
                    .filter(holiday => holiday.trangThai === "NL4") // Sửa lại điều kiện lọc để khớp với backend
                    .map(holiday => ({
                        date: new Date(holiday.ngayLe).setHours(0, 0, 0, 0),
                        name: holiday.tenNgayLe,
                        days: holiday.soNgayNghi
                    }));
            } else {
                console.error("API error:", result.message);
                return [];
            }
        } catch (error) {
            console.error("Error fetching holidays:", error);
            return [];
        }
    }

    // Function to calculate holiday dates including compensation days
    function calculateHolidayDates(holidays) {
        const expandedHolidays = [];

        holidays.forEach(holiday => {
            const startDate = new Date(holiday.date);
            const days = holiday.days;

            for (let i = 0; i < days; i++) {
                const currentDate = new Date(startDate);
                currentDate.setDate(startDate.getDate() + i);
                const currentDateTime = currentDate.setHours(0, 0, 0, 0);

                expandedHolidays.push({
                    date: currentDateTime,
                    name: holiday.name
                });

                const dayOfWeek = currentDate.getDay();
                if (dayOfWeek === 0 || dayOfWeek === 6) {
                    let compensationDate = new Date(currentDate);
                    do {
                        compensationDate.setDate(compensationDate.getDate() + 1);
                    } while (compensationDate.getDay() === 0 || compensationDate.getDay() === 6);

                    expandedHolidays.push({
                        date: compensationDate.setHours(0, 0, 0, 0),
                        name: `${holiday.name} (Nghỉ bù)`
                    });
                }
            }
        });

        return expandedHolidays;
    }

    // Thêm biến để lưu trữ thông tin giới hạn
    let leaveTypeLimits = {};

    // Cập nhật hàm fetchLeaveTypes để lấy thông tin giới hạn
    async function fetchLeaveTypes() {
        try {
            const [typesResponse, limitsResponse] = await Promise.all([
                fetch("/api/Leave/GetLeaveTypes"),
                fetch("/api/Leave/GetLeaveTypeLimits", {
                    headers: {
                        "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
                    }
                })
            ]);

            const typesResult = await typesResponse.json();
            const limitsResult = await limitsResponse.json();

            console.log("Leave Type Limits:", JSON.stringify(limitsResult, null, 2)); // Thêm log để kiểm tra dữ liệu

            if (typesResult.success && limitsResult.success) {
                const leaveTypeSelect = document.getElementById("leaveTypeSelect");
                const leaveTypeDescription = document.getElementById("leaveTypeDescription");
                leaveTypeSelect.innerHTML = '<option value="">Chọn loại nghỉ</option>';

                leaveTypeLimits = {};
                limitsResult.leaveTypes.forEach(limit => {
                    leaveTypeLimits[limit.maLoaiNgayNghi] = limit;
                });

                typesResult.leaveTypes.forEach(leaveType => {
                    const option = document.createElement("option");
                    option.value = leaveType.maLoaiNgayNghi;
                    option.textContent = leaveType.tenLoai;
                    option.dataset.description = leaveType.moTa || "Không có mô tả";

                    const limit = leaveTypeLimits[leaveType.maLoaiNgayNghi];
                    if (limit && limit.kiemTra.biVoHieuHoa) {
                        let tooltipText = "Không thể đăng ký: ";
                        if (limit.kiemTra.vuotQuaSoLan) {
                            tooltipText += `Đã đạt giới hạn ${limit.soLanDangKyToiDa} lần đăng ký`;
                        }
                        option.title = tooltipText;
                        option.disabled = true;
                        option.style.opacity = "0.5";
                    }

                    if (leaveType.tenLoai.toLowerCase().includes('không lương')) {
                        unpaidLeaveTypeId = leaveType.maLoaiNgayNghi;
                        console.log("Unpaid Leave Type ID:", unpaidLeaveTypeId); // Log để kiểm tra unpaidLeaveTypeId
                    }

                    leaveTypeSelect.appendChild(option);
                });

                // Thêm sự kiện change cho select
                leaveTypeSelect.addEventListener('change', async function() {
                    const selectedOption = this.options[this.selectedIndex];
                    const description = selectedOption.dataset.description;

                    if (this.value) {
                        const selectedOption = this.options[this.selectedIndex];
                        const description = selectedOption.dataset.description;
                        const limit = leaveTypeLimits[this.value];
                        
                        let descriptionHtml = description;
                        if (limit) {
                            descriptionHtml += `<br><br><strong>Giới hạn:</strong><br>`;
                            descriptionHtml += `- Số lần đăng ký: ${limit.hienTai.soLanDangKy}/${limit.soLanDangKyToiDa === null ? '∞' : limit.soLanDangKyToiDa} lần<br>`;
                            descriptionHtml += `- Số ngày đăng ký tối đa: ${limit.soNgayNghiToiDa === null ? 'Không giới hạn' : limit.soNgayNghiToiDa + ' ngày'}`;
                        }

                        document.getElementById("leaveTypeDescription").innerHTML = descriptionHtml;
                        document.getElementById("leaveTypeDescription").classList.add('show');

                        // Kiểm tra giới hạn nếu đã chọn ngày
                        const selectedDates = datePicker.selectedDates;
                        if (selectedDates.length > 0) {
                            try {
                                const limitCheck = await checkLeaveLimits(parseInt(this.value), selectedDates.length);
                                
                                if (limitCheck.kiemTra.vuotQuaSoNgay) {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Vượt quá giới hạn',
                                        html: `Loại nghỉ <strong>${limitCheck.loaiNgayNghi.tenLoai}</strong> chỉ cho phép tối đa ${limitCheck.loaiNgayNghi.soNgayNghiToiDa} ngày.<br>
                                          Bạn đang yêu cầu thêm ${selectedDates.length} ngày.`
                                    });
                                    datePicker.clear();
                                    document.getElementById("selectedDates").textContent = "";
                                    return;
                                }

                                if (limitCheck.kiemTra.vuotQuaSoLan) {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Vượt quá giới hạn',
                                        html: `Loại nghỉ <strong>${limitCheck.loaiNgayNghi.tenLoai}</strong> chỉ cho phép đăng ký tối đa ${limitCheck.loaiNgayNghi.soLanDangKyToiDa} lần.<br>
                                          Bạn đã đăng ký ${limitCheck.hienTai.soLanDangKy} lần.`
                                    });
                                    datePicker.clear();
                                    document.getElementById("selectedDates").textContent = "";
                                    return;
                                }
                            } catch (error) {
                                console.error('Lỗi khi kiểm tra giới hạn:', error);
                            }
                        }
                    } else {
                        document.getElementById("leaveTypeDescription").classList.remove('show');
                    }
                });
            } else {
                console.error("Lỗi dữ liệu:", typesResult);
                alert("Dữ liệu không hợp lệ.");
            }
        } catch (error) {
            console.error("Lỗi hệ thống:", error);
            alert("Lỗi hệ thống. Vui lòng thử lại sau.");
        }
    }

    // Cập nhật hàm updateLeaveTypeDropdown
    function updateLeaveTypeDropdown() {
        const leaveTypeSelect = document.getElementById("leaveTypeSelect");
        if (!leaveTypeSelect) return;

        const currentValue = leaveTypeSelect.value;

        // Kiểm tra và enable/disable các loại nghỉ
        let hasEnabledLeaveTypes = false;
        Array.from(leaveTypeSelect.options).forEach(option => {
            if (option.value) {
                const limit = leaveTypeLimits[option.value];
                if (limit && limit.kiemTra.biVoHieuHoa) {
                    // Vô hiệu hóa nếu đã đạt giới hạn
                    option.disabled = true;
                    option.style.opacity = "0.5";
                    let tooltipText = "Không thể đăng ký: ";
                    if (limit.kiemTra.vuotQuaSoNgay) {
                        tooltipText += `Đã đạt giới hạn ${limit.soNgayNghiToiDa} ngày`;
                    }
                    if (limit.kiemTra.vuotQuaSoLan) {
                        tooltipText += limit.kiemTra.vuotQuaSoNgay ? " và " : "";
                        tooltipText += `Đã đạt giới hạn ${limit.soLanDangKyToiDa} lần đăng ký`;
                    }
                    option.title = tooltipText;
                } else {
                    // Kích hoạt nếu chưa đạt giới hạn
                    option.disabled = false;
                    option.style.opacity = "1";
                    option.title = "";
                    hasEnabledLeaveTypes = true;
                }
            }
        });

        // Nếu không còn số dư phép và không có loại nghỉ nào khác khả dụng, chọn "Nghỉ không lương"
        if (availableLeaveBalance === 0 && !hasEnabledLeaveTypes && unpaidLeaveTypeId) {
            const unpaidLeaveOption = leaveTypeSelect.querySelector(`option[value="${unpaidLeaveTypeId}"]`);
            if (unpaidLeaveOption && !leaveTypeLimits[unpaidLeaveTypeId]?.kiemTra.biVoHieuHoa) {
                leaveTypeSelect.value = unpaidLeaveTypeId;
                const description = unpaidLeaveOption.dataset.description;
                let descriptionHtml = description;
                const limit = leaveTypeLimits[unpaidLeaveTypeId];
                if (limit) {
                    descriptionHtml += `<br><br><strong>Giới hạn:</strong><br>`;
                    descriptionHtml += `- Số lần đăng ký: ${limit.hienTai.soLanDangKy}/${limit.soLanDangKyToiDa === null ? '∞' : limit.soLanDangKyToiDa} lần<br>`;
                    descriptionHtml += `- Số ngày đăng ký tối đa: ${limit.soNgayNghiToiDa === null ? 'Không giới hạn' : limit.soNgayNghiToiDa + ' ngày'}`;
                }
                document.getElementById("leaveTypeDescription").innerHTML = descriptionHtml;
                document.getElementById("leaveTypeDescription").classList.add('show');
            } else if (unpaidLeaveOption && leaveTypeLimits[unpaidLeaveTypeId]?.kiemTra.biVoHieuHoa) {
                // Hiển thị cảnh báo nếu "Nghỉ không lương" cũng bị vô hiệu hóa
                Swal.fire({
                    icon: 'warning',
                    title: 'Không thể đăng ký',
                    text: 'Tất cả các loại nghỉ đều đã đạt giới hạn, bao gồm Nghỉ không lương.'
                });
            }
        } else if (currentValue && !leaveTypeLimits[currentValue]?.kiemTra.biVoHieuHoa) {
            // Khôi phục giá trị hiện tại nếu nó chưa bị vô hiệu hóa
            leaveTypeSelect.value = currentValue;
            const selectedOption = leaveTypeSelect.options[leaveTypeSelect.selectedIndex];
            const description = selectedOption?.dataset?.description;
            if (description) {
                const limit = leaveTypeLimits[currentValue];
                let descriptionHtml = description;
                if (limit) {
                    descriptionHtml += `<br><br><strong>Giới hạn:</strong><br>`;
                    descriptionHtml += `- Số lần đăng ký: ${limit.hienTai.soLanDangKy}/${limit.soLanDangKyToiDa === null ? '∞' : limit.soLanDangKyToiDa} lần<br>`;
                    descriptionHtml += `- Số ngày đăng ký tối đa: ${limit.soNgayNghiToiDa === null ? 'Không giới hạn' : limit.soNgayNghiToiDa + ' ngày'}`;
                }
                document.getElementById("leaveTypeDescription").innerHTML = descriptionHtml;
                document.getElementById("leaveTypeDescription").classList.add('show');
            }
        } else {
            document.getElementById("leaveTypeDescription").classList.remove('show');
        }
    }

    // Thay thế đoạn code fetch leave types cũ bằng hàm mới
    document.addEventListener("DOMContentLoaded", async function () {
        console.log("DOM đã sẵn sàng, kiểm tra các phần tử...");

        const elements = [
            'pendingLeaveBody',
            'approvedLeaveBody',
            'rejectedLeaveBody',
            'canceledLeaveBody',
            'pending-tab',
            'approved-tab',
            'rejected-tab',
            'canceled-tab'
        ];

        const missingElements = [];
        elements.forEach(id => {
            const element = document.getElementById(id);
            if (!element) {
                missingElements.push(id);
                console.error(`Không tìm thấy phần tử với ID: ${id}`);
            }
        });

        if (missingElements.length > 0) {
            console.error(`Thiếu ${missingElements.length} phần tử HTML cần thiết:`, missingElements);
        } else {
            console.log("Tất cả phần tử HTML cần thiết đều tồn tại.");
        }
        const registeredDates = await fetchAlreadyRegisteredDates();
        const holidays = await fetchHolidays();
        const expandedHolidays = calculateHolidayDates(holidays);

        console.log("Registered dates:", registeredDates);
        console.log("Holidays:", expandedHolidays);

        const getAuthToken = () => localStorage.getItem('jwtToken');

        const today = new Date().setHours(0, 0, 0, 0);
        let datePicker = flatpickr("#datePicker", {
            mode: "multiple",
            dateFormat: "Y-m-d",
            minDate: "today",
            locale: "vn",
            disable: [
                function (date) {
                    const isWeekend = (date.getDay() === 0 || date.getDay() === 6);
                    const dateTime = date.setHours(0, 0, 0, 0);
                    const isAlreadyRegistered = registeredDates.some(d => d.date === dateTime);
                    const isHoliday = expandedHolidays.some(h => h.date === dateTime);
                    return isWeekend || isAlreadyRegistered || isHoliday;
                }
            ],
            onDayCreate: function (dObj, dStr, fp, dayElem) {
                const date = dayElem.dateObj;
                const dateTime = date.setHours(0, 0, 0, 0);

                // Xóa thuộc tính title để ngăn tooltip mặc định
                dayElem.removeAttribute('title');

                if (date.getDay() === 0 || date.getDay() === 6) {
                    dayElem.setAttribute("data-tooltip", "Không thể đăng ký nghỉ phép vào ngày cuối tuần");
                    dayElem.classList.add("weekend-day");
                }

                if (date < new Date().setHours(0, 0, 0, 0)) {
                    dayElem.setAttribute("data-tooltip", "Không thể đăng ký nghỉ phép vào ngày trong quá khứ");
                    dayElem.classList.add("past-day");
                }

                const registeredDate = registeredDates.find(d => d.date === dateTime);
                if (registeredDate) {
                    dayElem.classList.add("registered-day");
                    dayElem.classList.add(registeredDate.status);
                    dayElem.setAttribute("data-tooltip", `Đã đăng ký nghỉ phép (${registeredDate.status === 'pending' ? 'Chờ duyệt' : 'Đã duyệt'})`);
                }

                const holiday = expandedHolidays.find(h => h.date === dateTime);
                if (holiday) {
                    dayElem.setAttribute("data-tooltip", `Ngày lễ: ${holiday.name}`);
                    dayElem.classList.add("holiday");
                }
            },
            onClose: async function(selectedDates) {
                const validDates = selectedDates.filter(date => {
                    const dateTime = date.setHours(0, 0, 0, 0);
                    const isHoliday = expandedHolidays.some(h => h.date === dateTime);
                    return date >= today && !registeredDates.some(d => d.date === dateTime) && !isHoliday;
                });

                if (validDates.length !== selectedDates.length) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi chọn ngày',
                        text: 'Có ngày không hợp lệ trong lựa chọn của bạn!'
                    });
                    this.clear();
                    return;
                }

                document.getElementById("selectedDates").textContent =
                    validDates.map(date => date.toLocaleDateString('vi-VN')).join(', ');

                // Kiểm tra giới hạn nếu đã chọn loại nghỉ phép
                const leaveTypeSelect = document.getElementById("leaveTypeSelect");
                if (leaveTypeSelect.value) {
                    try {
                        const limitCheck = await checkLeaveLimits(parseInt(leaveTypeSelect.value), validDates.length);
                        
                        if (limitCheck.kiemTra.vuotQuaSoNgay) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Vượt quá giới hạn',
                                html: `Loại nghỉ <strong>${limitCheck.loaiNgayNghi.tenLoai}</strong> chỉ cho phép tối đa ${limitCheck.loaiNgayNghi.soNgayNghiToiDa} ngày.<br>
                                      Bạn đang yêu cầu ${validDates.length} ngày.`
                            });
                            this.clear();
                            document.getElementById("selectedDates").textContent = "";
                            return;
                        }

                        if (limitCheck.kiemTra.vuotQuaSoLan) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Vượt quá giới hạn',
                                html: `Loại nghỉ <strong>${limitCheck.loaiNgayNghi.tenLoai}</strong> chỉ cho phép đăng ký tối đa ${limitCheck.loaiNgayNghi.soLanDangKyToiDa} lần.<br>
                                          Bạn đã đăng ký ${limitCheck.hienTai.soLanDangKy} lần.`
                            });
                            this.clear();
                            document.getElementById("selectedDates").textContent = "";
                            return;
                        }
                    } catch (error) {
                        console.error('Lỗi khi kiểm tra giới hạn:', error);
                    }
                }

                updateLeaveTypeDropdown();
            }
        });

        document.getElementById("leaveForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = {
                leaveType: document.querySelector("[name='leaveType']").value,
                leaveReason: document.querySelector("[name='leaveReason']").value,
                selectedDates: datePicker.selectedDates.map(d => d.toLocaleDateString('sv-SE'))
            };

            if (!formData.selectedDates.length) {
                Swal.fire('Lỗi', 'Vui lòng chọn ít nhất 1 ngày nghỉ!', 'error');
                return;
            }

            // Kiểm tra số dư phép và loại nghỉ
            if (availableLeaveBalance === 0 && formData.leaveType !== unpaidLeaveTypeId.toString()) {
                Swal.fire('Lỗi', 'Số dư phép năm đã hết! Chỉ có thể chọn Nghỉ không lương hoặc loại nghỉ khác.', 'error');
                return;
            }

            try {
                const submitFormData = new FormData();
                const leaveRequestsData = formData.selectedDates.map(date => ({
                    NgayNghi: date,
                    LyDo: formData.leaveReason,
                    MaLoaiNgayNghi: parseInt(formData.leaveType)
                }));

                submitFormData.append('leaveRequestsJson', JSON.stringify(leaveRequestsData));
                selectedFilesArray.forEach(file => {
                    submitFormData.append('files', file);
                });

                const response = await fetch("/api/Leave/SubmitLeave", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${getAuthToken()}`
                    },
                    body: submitFormData
                });

                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Lỗi API');

                await Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: 'Đăng ký nghỉ phép thành công!',
                    showConfirmButton: false,
                    timer: 1500
                });

                // Reset form và các trường dữ liệu
                document.getElementById("leaveForm").reset();
                document.getElementById("selectedDates").textContent = "";
                document.getElementById("leaveTypeDescription").classList.remove('show');
                selectedFilesArray = [];
                updateSelectedFilesUI();

                // Reset date picker
                datePicker.clear();
                datePicker.destroy();

                // Refresh lại dữ liệu
                const newRegisteredDates = await fetchAlreadyRegisteredDates();
                const newHolidays = await fetchHolidays();
                const newExpandedHolidays = calculateHolidayDates(newHolidays);

                registeredDates.length = 0;
                registeredDates.push(...newRegisteredDates);
                expandedHolidays.length = 0;
                expandedHolidays.push(...newExpandedHolidays);

                // Reload lại dropdown loại nghỉ
                await fetchLeaveTypes();

                // Reinitialize date picker với dữ liệu mới
                datePicker = flatpickr("#datePicker", {
                    mode: "multiple",
                    dateFormat: "Y-m-d",
                    minDate: "today",
                    locale: "vn",
                    disable: [
                        function (date) {
                            const isWeekend = (date.getDay() === 0 || date.getDay() === 6);
                            const dateTime = date.setHours(0, 0, 0, 0);
                            const isAlreadyRegistered = registeredDates.some(d => d.date === dateTime);
                            const isHoliday = expandedHolidays.some(h => h.date === dateTime);
                            return isWeekend || isAlreadyRegistered || isHoliday;
                        }
                    ],
                    onDayCreate: function (dObj, dStr, fp, dayElem) {
                        const date = dayElem.dateObj;
                        const dateTime = date.setHours(0, 0, 0, 0);

                        dayElem.removeAttribute('title');

                        if (date.getDay() === 0 || date.getDay() === 6) {
                            dayElem.setAttribute("data-tooltip", "Không thể đăng ký nghỉ phép vào ngày cuối tuần");
                            dayElem.classList.add("weekend-day");
                        }

                        if (date < new Date().setHours(0, 0, 0, 0)) {
                            dayElem.setAttribute("data-tooltip", "Không thể đăng ký nghỉ phép vào ngày trong quá khứ");
                            dayElem.classList.add("past-day");
                        }

                        const registeredDate = registeredDates.find(d => d.date === dateTime);
                        if (registeredDate) {
                            dayElem.classList.add("registered-day");
                            dayElem.classList.add(registeredDate.status);
                            dayElem.setAttribute("data-tooltip", `Đã đăng ký nghỉ phép (${registeredDate.status === 'pending' ? 'Chờ duyệt' : 'Đã duyệt'})`);
                        }

                        const holiday = expandedHolidays.find(h => h.date === dateTime);
                        if (holiday) {
                            dayElem.setAttribute("data-tooltip", `Ngày lễ: ${holiday.name}`);
                            dayElem.classList.add("holiday");
                        }
                    },
                    onClose: async function(selectedDates) {
                        const validDates = selectedDates.filter(date => {
                            const dateTime = date.setHours(0, 0, 0, 0);
                            const isHoliday = expandedHolidays.some(h => h.date === dateTime);
                            return date >= today && !registeredDates.some(d => d.date === dateTime) && !isHoliday;
                        });

                        if (validDates.length !== selectedDates.length) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Lỗi chọn ngày',
                                text: 'Có ngày không hợp lệ trong lựa chọn của bạn!'
                            });
                            this.clear();
                            return;
                        }

                        document.getElementById("selectedDates").textContent =
                            validDates.map(date => date.toLocaleDateString('vi-VN')).join(', ');

                        // Kiểm tra giới hạn nếu đã chọn loại nghỉ phép
                        const leaveTypeSelect = document.getElementById("leaveTypeSelect");
                        if (leaveTypeSelect.value) {
                            try {
                                const limitCheck = await checkLeaveLimits(parseInt(leaveTypeSelect.value), validDates.length);
                                
                                if (limitCheck.kiemTra.vuotQuaSoNgay) {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Vượt quá giới hạn',
                                        html: `Loại nghỉ <strong>${limitCheck.loaiNgayNghi.tenLoai}</strong> chỉ cho phép tối đa ${limitCheck.loaiNgayNghi.soNgayNghiToiDa} ngày.<br>
                                      Bạn đã chọn ${validDates.length} ngày, vượt quá số ngày cho phép.`
                                    });
                                    this.clear();
                                    document.getElementById("selectedDates").textContent = "";
                                    return;
                                }

                                if (limitCheck.kiemTra.vuotQuaSoLan) {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Vượt quá giới hạn',
                                        html: `Loại nghỉ <strong>${limitCheck.loaiNgayNghi.tenLoai}</strong> chỉ cho phép đăng ký tối đa ${limitCheck.loaiNgayNghi.soLanDangKyToiDa} lần.<br>
                                          Bạn đã đăng ký ${limitCheck.hienTai.soLanDangKy} lần.`
                                    });
                                    this.clear();
                                    document.getElementById("selectedDates").textContent = "";
                                    return;
                                }
                            } catch (error) {
                                console.error('Lỗi khi kiểm tra giới hạn:', error);
                            }
                        }

                        updateLeaveTypeDropdown();
                    }
                });

                // Refresh lại lịch sử đăng ký
                await fetchLeaveHistory();

            } catch (error) {
                console.error('Submit error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi hệ thống',
                    text: error.message || 'Vui lòng thử lại sau!'
                });
            }
        });

        document.getElementById('fileUploadContainer')?.addEventListener('click', () => {
            document.getElementById('fileAttachments').click();
        });

        document.getElementById('fileAttachments')?.addEventListener('change', (e) => {
            handleFiles(e.target.files);
        });

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            document.getElementById('fileUploadContainer').addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            document.getElementById('fileUploadContainer').addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            document.getElementById('fileUploadContainer').addEventListener(eventName, unhighlight, false);
        });

        function highlight(e) {
            document.getElementById('fileUploadContainer').classList.add('dragover');
        }

        function unhighlight(e) {
            document.getElementById('fileUploadContainer').classList.remove('dragover');
        }

        document.getElementById('fileUploadContainer').addEventListener('drop', (e) => {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles(files);
        });

        function handleFiles(files) {
            const newFiles = Array.from(files);
            selectedFilesArray = [...selectedFilesArray, ...newFiles];
            updateSelectedFilesUI();
        }

        function removeFile(index) {
            selectedFilesArray.splice(index, 1);
            updateSelectedFilesUI();
        }

        function updateSelectedFilesUI() {
            const selectedFilesContainer = document.getElementById('selectedFiles');
            const uploadArea = document.getElementById('uploadArea');
            const addMoreButton = document.getElementById('addMoreFiles');

            selectedFilesContainer.innerHTML = '';

            if (selectedFilesArray.length > 0) {
                uploadArea.classList.add('has-files');
                addMoreButton.classList.add('show');

                selectedFilesArray.forEach((file, index) => {
                    const fileItem = document.createElement('div');
                    fileItem.className = 'file-item';

                    const fileIcon = document.createElement('div');
                    fileIcon.className = 'file-icon';
                    fileIcon.innerHTML = getFileIcon(file.name);

                    const fileName = document.createElement('p');
                    fileName.className = 'file-name';
                    fileName.textContent = file.name;

                    const fileSize = document.createElement('p');
                    fileSize.className = 'file-size';
                    fileSize.textContent = formatFileSize(file.size);

                    const removeButton = document.createElement('button');
                    removeButton.className = 'remove-file';
                    removeButton.innerHTML = '<i class="fas fa-times"></i>';
                    removeButton.onclick = (e) => {
                        e.stopPropagation();
                        removeFile(index);
                    };

                    fileItem.appendChild(fileIcon);
                    fileItem.appendChild(fileName);
                    fileItem.appendChild(fileSize);
                    fileItem.appendChild(removeButton);

                    selectedFilesContainer.appendChild(fileItem);
                });
            } else {
                uploadArea.classList.remove('has-files');
                addMoreButton.classList.remove('show');
            }
        }

        function getFileIcon(fileName) {
            const extension = fileName.split('.').pop().toLowerCase();
            const iconMap = {
                'pdf': 'fas fa-file-pdf',
                'doc': 'fas fa-file-word',
                'docx': 'fas fa-file-word',
                'xls': 'fas fa-file-excel',
                'xlsx': 'fas fa-file-excel',
                'jpg': 'fas fa-file-image',
                'jpeg': 'fas fa-file-image',
                'png': 'fas fa-file-image',
                'gif': 'fas fa-file-image',
                'txt': 'fas fa-file-alt',
                'zip': 'fas fa-file-archive',
                'rar': 'fas fa-file-archive'
            };

            return `<i class="${iconMap[extension] || 'fas fa-file'}"></i>`;
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        if (typeof bootstrap === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js';
            script.onload = initializeTabs;
            document.head.appendChild(script);
        } else {
            initializeTabs();
        }

        function initializeTabs() {
            console.log("Khởi tạo tabs...");
            const tabElements = document.querySelectorAll('button[data-bs-toggle="tab"]');
            console.log(`Tìm thấy ${tabElements.length} tab elements`);

            if (tabElements.length === 0) {
                console.error("Không tìm thấy tab nào. Kiểm tra HTML của bạn.");
                return;
            }

            tabElements.forEach((tabElement, index) => {
                console.log(`Tab ${index + 1}: target = ${tabElement.getAttribute('data-bs-target')}`);

                tabElement.addEventListener('click', function (event) {
                    event.preventDefault();
                    const targetId = this.getAttribute('data-bs-target');
                    console.log(`Đã click vào tab với target: ${targetId}`);

                    tabElements.forEach(tab => {
                        tab.classList.remove('active');
                        const tabPaneId = tab.getAttribute('data-bs-target');
                        const tabPane = document.querySelector(tabPaneId);
                        if (tabPane) {
                            tabPane.classList.remove('show', 'active');
                        } else {
                            console.error(`Không tìm thấy tab pane với ID: ${tabPaneId}`);
                        }
                    });

                    this.classList.add('active');
                    const targetPane = document.querySelector(targetId);
                    if (targetPane) {
                        targetPane.classList.add('show', 'active');
                        console.log(`Đã kích hoạt tab pane: ${targetId}`);
                    } else {
                        console.error(`Không tìm thấy tab pane mục tiêu: ${targetId}`);
                    }

                    const tabId = targetId.substring(1);
                    renderTable(tabId);
                });
            });

            if (tabElements.length > 0) {
                const firstTab = tabElements[0];
                firstTab.classList.add('active');
                const firstTabPaneId = firstTab.getAttribute('data-bs-target');
                const firstTabPane = document.querySelector(firstTabPaneId);
                if (firstTabPane) {
                    firstTabPane.classList.add('show', 'active');
                    console.log(`Đã kích hoạt tab đầu tiên: ${firstTabPaneId}`);
                } else {
                    console.error(`Không tìm thấy tab pane đầu tiên: ${firstTabPaneId}`);
                }
            }
        }

        // Fetch leave types
        await fetchLeaveTypes();

        // Fetch số dư phép và gọi updateLeaveTypeDropdown() sau khi có dữ liệu
        try {
            const response = await fetch('/api/Leave/SoNgayConLai', {
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });
            if (!response.ok) {
                throw new Error('Lỗi khi lấy dữ liệu');
            }
            const data = await response.json();
            if (data.success) {
                availableLeaveBalance = data.soNgayConLai;
                const soNgayConLaiElement = document.querySelector('.leave-enhanced-card .so-ngay-con-lai');
                const soNgayPhepDuocCapElement = document.querySelector('.leave-enhanced-card .so-ngay-phep-duoc-cap');
                const soNgayDaSuDungElement = document.querySelector('.leave-enhanced-card .so-ngay-da-su-dung');
                if (soNgayConLaiElement) {
                    soNgayConLaiElement.textContent = `${data.soNgayConLai} ngày`;
                }
                if (soNgayPhepDuocCapElement) {
                    soNgayPhepDuocCapElement.textContent = `${data.soNgayPhepDuocCap} ngày`;
                }
                if (soNgayDaSuDungElement) {
                    soNgayDaSuDungElement.textContent = `${data.soNgayDaSuDung} ngày`;
                }
                showLeaveBalanceWarnings();
                updateLeaveTypeDropdown(); // Gọi tại đây để đảm bảo availableLeaveBalance đã được cập nhật
            } else {
                console.error('Lỗi:', data.message);
            }
        } catch (error) {
            console.error('Lỗi:', error);
        }

        // Số ngày còn lại
        fetch('/api/Leave/SoNgayConLai')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Lỗi khi lấy dữ liệu');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    availableLeaveBalance = data.soNgayConLai;
                    const soNgayConLaiElement = document.querySelector('.leave-enhanced-card .so-ngay-con-lai');
                    const soNgayPhepDuocCapElement = document.querySelector('.leave-enhanced-card .so-ngay-phep-duoc-cap');
                    const soNgayDaSuDungElement = document.querySelector('.leave-enhanced-card .so-ngay-da-su-dung');
                    if (soNgayConLaiElement) {
                        soNgayConLaiElement.textContent = `${data.soNgayConLai} ngày`;
                    }
                    if (soNgayPhepDuocCapElement) {
                        soNgayPhepDuocCapElement.textContent = `${data.soNgayPhepDuocCap} ngày`;
                    }
                    if (soNgayDaSuDungElement) {
                        soNgayDaSuDungElement.textContent = `${data.soNgayDaSuDung} ngày`;
                    }
                    showLeaveBalanceWarnings();
                    updateLeaveTypeDropdown();
                } else {
                    console.error('Lỗi:', data.message);
                }
            })
            .catch(error =>
                console.error('Lỗi:', error)
            );
        fetchLeaveHistory();
    });

    let availableLeaveBalance = 0;
    let leaveHistory = [];
    let unpaidLeaveTypeId = null; // Thêm biến để lưu ID của loại nghỉ không lương
    const tabData = {
        pending: { currentPage: 1, itemsPerPage: 5, filteredData: [] },
        approved: { currentPage: 1, itemsPerPage: 5, filteredData: [] },
        rejected: { currentPage: 1, itemsPerPage: 5, filteredData: [] },
        canceled: { currentPage: 1, itemsPerPage: 5, filteredData: [] }
    };

    async function fetchLeaveHistory() {
        try {
            console.log("Đang gọi API lấy lịch sử nghỉ phép...");

            const token = localStorage.getItem('jwtToken');
            console.log("Token hiện tại:", token ? "Có token" : "Không có token");

            const response = await fetch('/api/Leave/GetLeaveHistory', {
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            });

            console.log("Kết quả API:", response.status, response.statusText);

            if (!response.ok) {
                if (response.status === 401) {
                    console.error("Lỗi xác thực. Đang chuyển hướng đến trang đăng nhập.");
                    window.location.href = '/login';
                    return;
                }
                throw new Error(`Lỗi HTTP: ${response.status} - ${response.statusText}`);
            }

            const result = await response.json();
            console.log("Dữ liệu API trả về:", JSON.stringify(result, null, 2));

            if (result?.success && Array.isArray(result.leaveHistory)) {
                console.log(`Nhận được ${result.leaveHistory.length} bản ghi từ API.`);

                result.leaveHistory.forEach((item, index) => {
                    console.log(`Bản ghi ${index + 1}:`, JSON.stringify(item, null, 2));
                });

                leaveHistory = result.leaveHistory;

                // Cập nhật lọc dữ liệu cho tab "Chờ duyệt" để bao gồm cả NN6
                tabData.pending.filteredData = leaveHistory.filter(item =>
                    item.trangThai === "Chờ duyệt" || item.trangThai === "Chờ bổ sung"
                );
                tabData.approved.filteredData = leaveHistory.filter(item => item.trangThai === "Đã duyệt");
                tabData.rejected.filteredData = leaveHistory.filter(item => item.trangThai === "Từ chối");
                tabData.canceled.filteredData = leaveHistory.filter(item => item.trangThai === "Đã hủy");

                console.log("Dữ liệu sau khi phân loại:", {
                    "Chờ duyệt": tabData.pending.filteredData.length,
                    "Đã duyệt": tabData.approved.filteredData.length,
                    "Từ chối": tabData.rejected.filteredData.length,
                    "Đã hủy": tabData.canceled.filteredData.length
                });

                renderTable('pending');
                renderTable('approved');
                renderTable('rejected');
                renderTable('canceled');

                updateTabBadges();
                setupPaginationControls();
            } else {
                console.error("Lỗi định dạng dữ liệu:", result);
                displayError("Không có dữ liệu nghỉ phép hoặc định dạng không đúng", ['pendingLeaveBody', 'approvedLeaveBody', 'rejectedLeaveBody', 'canceledLeaveBody']);
            }
        } catch (error) {
            console.error("Lỗi khi gọi API:", error);
            displayError("Lỗi kết nối server: " + error.message, ['pendingLeaveBody', 'approvedLeaveBody', 'rejectedLeaveBody', 'canceledLeaveBody']);
        }
    }

    function updateTabBadges() {
        const pendingCount = tabData.pending.filteredData.length;
        const approvedCount = tabData.approved.filteredData.length;
        const rejectedCount = tabData.rejected.filteredData.length;
        const canceledCount = tabData.canceled.filteredData.length;

        updateBadge('pending-tab', pendingCount, 'pending-badge');
        updateBadge('approved-tab', approvedCount, 'approved-badge');
        updateBadge('rejected-tab', rejectedCount, 'rejected-badge');
        updateBadge('canceled-tab', canceledCount, 'canceled-badge');
    }

    function updateBadge(tabId, count, badgeClass) {
        const tabElement = document.getElementById(tabId);
        if (!tabElement) return;

        const existingBadge = tabElement.querySelector('.tab-badge');
        if (existingBadge) {
            existingBadge.remove();
        }

        const badge = document.createElement('span');
        badge.className = `tab-badge ${badgeClass}`;
        badge.textContent = count;
        tabElement.appendChild(badge);
    }

    function displayError(message, tableBodyIds) {
        tableBodyIds.forEach(id => {
            const tableBody = document.getElementById(id);
            if (tableBody) {
                tableBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">${message}</td></tr>`;
            }
        });
    }

    function renderTable(tabId) {
        console.log(`Đang render bảng cho tab: ${tabId}`);

        const tableBodyId = `${tabId}LeaveBody`;
        const tableBody = document.getElementById(tableBodyId);

        if (!tableBody) {
            console.error(`Không tìm thấy phần tử với ID: ${tableBodyId}`);
            return;
        }

        tableBody.innerHTML = "";
        console.log(`Đã xóa nội dung bảng ${tableBodyId}`);

        const { currentPage, itemsPerPage, filteredData } = tabData[tabId];
        console.log(`Dữ liệu ${tabId}: ${filteredData.length} mục, trang ${currentPage}, mỗi trang ${itemsPerPage} mục`);

        const paginatedData = paginateData(filteredData, currentPage, itemsPerPage);
        console.log(`Sau phân trang: ${paginatedData.length} mục để hiển thị`);

        if (paginatedData.length === 0) {
            let colspan = 6;
            if (tabId === 'approved' || tabId === 'rejected' || tabId === 'canceled') colspan = 7;
            tableBody.innerHTML = `<tr><td colspan="${colspan}" class="text-center">Không có đơn nào trong danh sách này</td></tr>`;
            console.log(`Không có dữ liệu để hiển thị cho tab ${tabId}`);
        } else {
            console.log(`Hiển thị ${paginatedData.length} bản ghi cho tab ${tabId}`);
            paginatedData.forEach((item, index) => {
                try {
                    const maDon = item.maDon || item.MaDon || "";
                    const tenLoai = item.tenLoai || item.TenLoai || item.loaiNghi || item.LoaiNghi || "Không xác định";
                    const lyDo = item.lyDo || item.LyDo || item.moTa || item.MoTa || "Không có lý do";
                    const trangThai = item.trangThai || item.TrangThai || "Không xác định";
                    const fileDinhKem = item.fileDinhKem || item.FileDinhKem || item.files || item.Files || "";
                    const ngayDuyet = item.ngayDuyet || item.NgayDuyet || "";
                    const ngayHuy = item.ngayDuyet || item.NgayDuyet || "";
                    const ghiChu = item.ghiChu || item.GhiChu || item.noiDungPhanHoi || item.NoiDungPhanHoi || "Không có ghi chú";
                    const nguoiDuyetHoTen = item.nguoiDuyetHoTen || item.NguoiDuyetHoTen || item.nguoiDuyet || item.NguoiDuyet || "Chưa có";
                    const ngayNghis = item.ngayNghis || item.NgayNghis || [];

                    console.log(`Dữ liệu dòng ${index + 1} của tab ${tabId}:`, {
                        maDon, tenLoai, lyDo, trangThai, fileDinhKem, ngayDuyet, ngayHuy, ghiChu, nguoiDuyetHoTen, ngayNghis
                    });

                    const fileDisplayHtml = generateFileDisplayHtml(fileDinhKem);
                    const ngayDuyetFormatted = ngayDuyet ? formatDate(ngayDuyet) : "Chưa duyệt";
                    const ngayHuyFormatted = ngayHuy ? formatDate(ngayHuy) : "Chưa hủy";

                    // Tạo dropdown cho danh sách ngày nghỉ
                    const uniqueId = `dates-${maDon}-${index}`;
                    const datesDropdownHtml = `
                        <div class="dropdown">
                            <button class="btn btn-link dropdown-toggle" type="button" id="${uniqueId}" data-bs-toggle="dropdown" aria-expanded="false">
                                ${ngayNghis.length} ngày
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="${uniqueId}">
                                ${ngayNghis.map(ngay => `
                                    <li><a class="dropdown-item" href="#">${formatDate(ngay.ngayNghi)}</a></li>
                                `).join('')}
                            </ul>
                        </div>
                    `;

                    // Tạo tooltip cho lý do và ghi chú
                    const lyDoTooltip = `<div class="tooltip-cell" data-bs-toggle="tooltip" data-bs-placement="top" title="${lyDo}">${truncateText(lyDo, 23)}</div>`;
                    const ghiChuTooltip = `<div class="tooltip-cell" data-bs-toggle="tooltip" data-bs-placement="top" title="${ghiChu}">${truncateText(ghiChu, 23)}</div>`;

                    const row = document.createElement("tr");
                    if (tabId === 'pending') {
                        const cancelButton = `<button class="btn-cancel" data-id="${ngayNghis[0]?.id}">
                                <i class="fas fa-times-circle"></i>
                                <span>Hủy đơn</span>
                             </button>`;
                        const supplementButton = item.trangThai === "Chờ bổ sung"
                            ? `<button class="btn-supplement" data-id="${ngayNghis[0]?.id}">
                   <i class="fas fa-upload"></i>
                   <span>Bổ sung</span>
               </button>`
                            : '';
                        row.innerHTML = `
            <td>${tenLoai}</td>
            <td>${datesDropdownHtml}</td>
            <td>${lyDoTooltip}</td>
            <td><span class="status ${getStatusClass(trangThai)}">${trangThai}</span></td>
            <td>${fileDisplayHtml}</td>
            <td>${cancelButton} ${supplementButton}</td>
        `;
                    }
                    else if (tabId === 'canceled') {
                        const lyDoHuy = item.lyDoHuy || item.LyDoHuy || "Không có lý do hủy";
                        const lyDoHuyTooltip = `<div class="tooltip-cell" data-bs-toggle="tooltip" data-bs-placement="top" title="${lyDoHuy}">${truncateText(lyDoHuy, 23)}</div>`;
                        row.innerHTML = `
                                    <td>${tenLoai}</td>
                                    <td>${datesDropdownHtml}</td>
                                    <td>${lyDoTooltip}</td>
                                    <td><span class="status ${getStatusClass(trangThai)}">${trangThai}</span></td>
                                    <td>${fileDisplayHtml}</td>
                                    <td>${ngayHuyFormatted}</td>
                                    <td>${lyDoHuyTooltip}</td>
                                `;
                    } else if (tabId === 'approved') {
                        row.innerHTML = `
                                    <td>${tenLoai}</td>
                                    <td>${datesDropdownHtml}</td>
                                    <td>${lyDoTooltip}</td>
                                    <td><span class="status ${getStatusClass(trangThai)}">${trangThai}</span></td>
                                    <td>${fileDisplayHtml}</td>
                                    <td>${ngayDuyetFormatted}</td>
                                    <td>${nguoiDuyetHoTen}</td>
                                `;
                    } else {
                        const lyDoTuChoi = item.lyDoTuChoi || item.LyDoTuChoi || "Không có lý do từ chối";
                        const lyDoTuChoiTooltip = `<div class="tooltip-cell" data-bs-toggle="tooltip" data-bs-placement="top" title="${lyDoTuChoi}">${truncateText(lyDoTuChoi, 23)}</div>`;
                        row.innerHTML = `
                                    <td>${tenLoai}</td>
                                    <td>${datesDropdownHtml}</td>
                                    <td>${lyDoTooltip}</td>
                                    <td><span class="status ${getStatusClass(trangThai)}">${trangThai}</span></td>
                                    <td>${fileDisplayHtml}</td>
                                    <td>${ngayDuyetFormatted}</td>
                                    <td>${lyDoTuChoiTooltip}</td>
                                    <td>${nguoiDuyetHoTen}</td>
                                `;
                    }
                    tableBody.appendChild(row);
                } catch (error) {
                    console.error(`Lỗi khi tạo dòng ${index} cho tab ${tabId}:`, error, item);
                }
            });
        }

        try {
            document.querySelectorAll(`#${tableBodyId} .btn-cancel`).forEach(btn => {
                btn.addEventListener('click', function () {
                    const leaveId = this.getAttribute('data-id');
                    cancelLeaveRequest(leaveId);
                });
            });

            document.querySelectorAll(`#${tableBodyId} .btn-supplement`).forEach(btn => {
                btn.addEventListener('click', function () {
                    const leaveId = this.getAttribute('data-id');
                    handleSupplementAction(leaveId);
                });
            });

            document.querySelectorAll(`#${tableBodyId} .file-link`).forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const filePath = this.getAttribute('data-path');
                    viewFile(filePath);
                });
            });

            // Khởi tạo tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    trigger: 'hover',
                    html: true
                });
            });

            initializeDropdowns();
            updatePaginationControls(tabId);
            console.log(`Hoàn thành render tab ${tabId}`);
        } catch (error) {
            console.error(`Lỗi khi thiết lập sự kiện cho tab ${tabId}:`, error);
        }
    }

    // Thêm hàm truncateText để cắt ngắn text
    function truncateText(text, maxLength) {
        if (!text) return '';
        return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
    }

    function generateFileDisplayHtml(fileDinhKem) {
        if (!fileDinhKem) {
            return '<span class="text-muted">Không có</span>';
        }

        const files = fileDinhKem.split('-').filter(f => f.trim());
        if (files.length === 0) {
            return '<span class="text-muted">Không có</span>';
        }

        if (files.length === 1) {
            return `<a href="#" class="file-link" data-path="/Uploads/${files[0]}">
                        <i class="fas fa-file"></i>${truncateFileName(files[0])}
                    </a>`;
        } else {
            const uniqueId = `dropdown-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
            let fileListHtml = `<div class="dropdown">
                                <button class="file-link dropdown-toggle" type="button"
                                        id="${uniqueId}" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-paperclip"></i>${files.length} files
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="${uniqueId}">`;
            files.forEach(file => {
                fileListHtml += `<li>
                                    <a class="dropdown-item file-link" href="#" data-path="/Uploads/${file}">
                                        <i class="fas fa-file"></i>${truncateFileName(file)}
                                    </a>
                                 </li>`;
            });
            fileListHtml += `</ul></div>`;
            return fileListHtml;
        }
    }

    function initializeDropdowns() {
        // Xóa tất cả các event listener cũ
        document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
            const newToggle = toggle.cloneNode(true);
            toggle.parentNode.replaceChild(newToggle, toggle);
        });

        // Thêm event listener mới cho tất cả các dropdown toggle
        document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
            toggle.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();

                // Đóng tất cả các dropdown khác
                document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                    if (menu !== this.nextElementSibling) {
                        menu.classList.remove('show');
                        menu.previousElementSibling.setAttribute('aria-expanded', 'false');
                    }
                });

                // Toggle dropdown hiện tại
                const dropdownMenu = this.nextElementSibling;
                const isExpanded = this.getAttribute('aria-expanded') === 'true';

                this.setAttribute('aria-expanded', !isExpanded);
                dropdownMenu.classList.toggle('show');
            });
        });

        // Thêm event listener cho document để đóng dropdown khi click ra ngoài
        document.addEventListener('click', function (e) {
            if (!e.target.closest('.dropdown')) {
                document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                    menu.classList.remove('show');
                    menu.previousElementSibling.setAttribute('aria-expanded', 'false');
                });
            }
        });

        // Thêm event listener cho các file link trong dropdown
        document.querySelectorAll('.dropdown-item.file-link').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const filePath = this.getAttribute('data-path');
                viewFile(filePath);

                // Đóng dropdown sau khi click vào file
                const dropdownMenu = this.closest('.dropdown-menu');
                if (dropdownMenu) {
                    dropdownMenu.classList.remove('show');
                    dropdownMenu.previousElementSibling.setAttribute('aria-expanded', 'false');
                }
            });
        });
    }

    function truncateFileName(fileName) {
        const maxLength = 15;
        if (fileName.length <= maxLength) {
            return fileName;
        }

        const extension = fileName.split('.').pop();
        const nameWithoutExt = fileName.substring(0, fileName.length - extension.length - 1);

        if (nameWithoutExt.length <= maxLength - 5) {
            return fileName;
        }

        return `${nameWithoutExt.substring(0, maxLength - 5)}...${extension}`;
    }

    function viewFile(filePath) {
        const extension = filePath.split('.').pop().toLowerCase();
        const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg'];

        if (imageExtensions.includes(extension)) {
            Swal.fire({
                title: 'Xem file',
                html: `<img src="${filePath}" class="img-fluid" alt="Preview">`,
                width: 800,
                showCloseButton: true,
                showConfirmButton: false
            });
        } else {
            window.open(filePath, '_blank');
        }
    }

    async function cancelLeaveRequest(leaveId) {
        try {
            const { value: lyDoHuy } = await Swal.fire({
                title: 'Nhập lý do hủy đơn',
                input: 'textarea',
                inputLabel: 'Lý do hủy đơn',
                inputPlaceholder: 'Nhập lý do hủy đơn của bạn...',
                inputAttributes: {
                    'aria-label': 'Nhập lý do hủy đơn'
                },
                showCancelButton: true,
                confirmButtonText: 'Tiếp tục',
                cancelButtonText: 'Hủy',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Vui lòng nhập lý do hủy đơn!';
                    }
                }
            });

            if (lyDoHuy) {
                const result = await Swal.fire({
                    title: 'Xác nhận hủy đơn',
                    text: "Bạn có chắc chắn muốn hủy đơn nghỉ phép này?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Đồng ý hủy',
                    cancelButtonText: 'Không'
                });

                if (result.isConfirmed) {
                    const response = await fetch(`/api/Leave/CancelLeave/${leaveId}`, {
                        method: 'PATCH',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ lyDoHuy })
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error(`Lỗi API: ${response.status} - ${errorText}`);
                        throw new Error(`Lỗi: ${response.statusText}`);
                    }

                    const data = await response.json();

                    if (data.success) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Đã hủy!',
                            text: 'Đơn nghỉ phép đã được hủy thành công.',
                            showConfirmButton: false,
                            timer: 1500
                        });

                        // Reload trang sau khi hủy thành công
                        window.location.reload();
                    } else {
                        throw new Error(data.message || 'Không thể hủy đơn nghỉ phép.');
                    }
                }
            }
        } catch (error) {
            console.error('Lỗi khi hủy đơn:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Lỗi hệ thống',
                text: error.message || 'Đã xảy ra lỗi, vui lòng thử lại sau.',
                confirmButtonText: 'Đóng'
            });
        }
    }

    // Helper functions
    function getFileIcon(fileName) {
        const extension = fileName.split('.').pop().toLowerCase();
        const iconMap = {
            'pdf': 'fas fa-file-pdf',
            'doc': 'fas fa-file-word',
            'docx': 'fas fa-file-word',
            'xls': 'fas fa-file-excel',
            'xlsx': 'fas fa-file-excel',
            'jpg': 'fas fa-file-image',
            'jpeg': 'fas fa-file-image',
            'png': 'fas fa-file-image',
            'gif': 'fas fa-file-image',
            'txt': 'fas fa-file-alt',
            'zip': 'fas fa-file-archive',
            'rar': 'fas fa-file-archive'
        };
        return `<i class="${iconMap[extension] || 'fas fa-file'}"></i>`;
    }

    function truncateFileName(fileName) {
        const maxLength = 15;
        if (fileName.length <= maxLength) return fileName;
        const extension = fileName.split('.').pop();
        const nameWithoutExt = fileName.substring(0, fileName.length - extension.length - 1);
        if (nameWithoutExt.length <= maxLength - 5) return fileName;
        return `${nameWithoutExt.substring(0, maxLength - 5)}...${extension}`;
    }

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Main function
    async function handleSupplementAction(leaveId) {
        try {
            let selectedFiles = [];

            const { value: files } = await Swal.fire({
                title: 'Bổ sung tài liệu',
                html: `
                    <input type="file" id="supplementFiles" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png">
                    <div id="selectedFilesPreview" style="margin-top: 10px; max-height: 150px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; border-radius: 4px; background-color: #f9f9f9;"></div>
                    <p style="color: gray; font-size: 12px; margin-top: 5px;">Định dạng được phép: PDF, DOC, DOCX, JPG, JPEG, PNG (Tối đa 10MB/file)</p>
                `,
                showCancelButton: true,
                confirmButtonText: 'Gửi',
                cancelButtonText: 'Hủy',
                didOpen: () => {
                    const fileInput = document.getElementById('supplementFiles');
                    const selectedFilesPreview = document.getElementById('selectedFilesPreview');

                    const updateFilePreview = () => {
                        selectedFilesPreview.innerHTML = '';
                        if (selectedFiles.length > 0) {
                            selectedFiles.forEach((file, index) => {
                                const fileItem = document.createElement('div');
                                fileItem.style.display = 'flex';
                                fileItem.style.alignItems = 'center';
                                fileItem.style.marginBottom = '5px';

                                const fileIcon = document.createElement('span');
                                fileIcon.innerHTML = getFileIcon(file.name);
                                fileIcon.style.marginRight = '10px';

                                const fileName = document.createElement('span');
                                fileName.textContent = truncateFileName(file.name);
                                fileName.style.flexGrow = '1';

                                const fileSize = document.createElement('span');
                                fileSize.textContent = formatFileSize(file.size);
                                fileSize.style.marginRight = '10px';

                                const removeButton = document.createElement('button');
                                removeButton.innerHTML = '<i class="fas fa-times"></i>';
                                removeButton.style.background = 'none';
                                removeButton.style.border = 'none';
                                removeButton.style.cursor = 'pointer';
                                removeButton.style.color = 'red';
                                removeButton.onclick = () => {
                                    selectedFiles.splice(index, 1);
                                    updateFilePreview();
                                };

                                fileItem.appendChild(fileIcon);
                                fileItem.appendChild(fileName);
                                fileItem.appendChild(fileSize);
                                fileItem.appendChild(removeButton);
                                selectedFilesPreview.appendChild(fileItem);
                            });
                        } else {
                            selectedFilesPreview.innerHTML = '<p style="color: gray;">Chưa chọn file nào.</p>';
                        }
                    };

                    fileInput.addEventListener('change', () => {
                        const newFiles = Array.from(fileInput.files);
                        const maxSize = 10 * 1024 * 1024;
                        let valid = true;

                        newFiles.forEach(file => {
                            if (file.size > maxSize) {
                                Swal.showValidationMessage(`File ${file.name} vượt quá giới hạn 10MB!`);
                                valid = false;
                            }
                        });

                        if (valid) {
                            newFiles.forEach(newFile => {
                                if (!selectedFiles.some(f => f.name === newFile.name && f.size === newFile.size && f.lastModified === newFile.lastModified)) {
                                    selectedFiles.push(newFile);
                                }
                            });
                            updateFilePreview();
                            fileInput.value = '';
                        } else {
                            fileInput.value = '';
                        }
                    });

                    updateFilePreview();
                },
                preConfirm: () => {
                    if (selectedFiles.length === 0) {
                        Swal.showValidationMessage('Vui lòng chọn ít nhất một file!');
                        return false;
                    }
                    return selectedFiles;
                }
            });

            if (files) {
                const formData = new FormData();
                files.forEach(file => {
                    formData.append('files', file);
                });
                formData.append('leaveId', leaveId);

                const response = await fetch('/api/Leave/SupplementLeave', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                    },
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Thành công!',
                        text: 'Tài liệu bổ sung đã được gửi.',
                        timer: 1500
                    });
                    window.location.reload();
                } else {
                    throw new Error(result.message || 'Không thể gửi tài liệu bổ sung.');
                }
            }
        } catch (error) {
            console.error('Lỗi khi bổ sung tài liệu:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Lỗi',
                text: error.message || 'Đã xảy ra lỗi, vui lòng thử lại.'
            });
        }
    }

    function formatDate(dateString) {
        if (!dateString) return '';
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        } catch (error) {
            console.error('Error formatting date:', error);
            return dateString;
        }
    }

    function getStatusClass(status) {
        switch (status) {
            case 'Chờ duyệt':
                return 'status-badge status-pending';
            case 'Chờ bổ sung':
                return 'status-badge status-pending'; // Sử dụng cùng lớp với "Chờ duyệt" hoặc tạo lớp mới nếu cần
            case 'Đã duyệt':
                return 'status-badge status-approved';
            case 'Từ chối':
                return 'status-badge status-rejected';
            case 'Đã hủy':
                return 'status-badge status-canceled';
            default:
                return 'status-badge';
        }
    }

    function showLeaveBalanceWarnings() {
        const leaveSection = document.getElementById("leaveSection");
        const leaveForm = document.getElementById("leaveForm");
        const existingAlert = document.getElementById("leaveBalanceAlert");

        // Remove existing alert if any
        if (existingAlert) {
            existingAlert.remove();
        }

        if (availableLeaveBalance === 0) {
            const alertMessage = document.createElement("div");
            alertMessage.id = "leaveBalanceAlert";
            alertMessage.className = "alert alert-danger mt-3";
            alertMessage.innerHTML = `
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Thông báo:</strong> Số dư phép năm của bạn đã hết. Chỉ có thể đăng ký Nghỉ không lương hoặc loại nghỉ khác nếu chúng còn hiệu lực.
                    `;
            leaveSection.insertBefore(alertMessage, leaveForm.nextSibling);
        } else if (availableLeaveBalance < 5) {
            const alertMessage = document.createElement("div");
            alertMessage.id = "leaveBalanceAlert";
            alertMessage.className = "alert alert-warning mt-3";
            alertMessage.innerHTML = `
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Cảnh báo:</strong> Số dư phép năm của bạn chỉ còn ${availableLeaveBalance} ngày.
                    `;
            leaveSection.insertBefore(alertMessage, leaveForm.nextSibling);
        }
    }

    function setupPaginationControls() {
        ['pending', 'approved', 'rejected', 'canceled'].forEach(tabId => {
            setupPaginationForTab(tabId);
        });
    }

    function setupPaginationForTab(tabId) {
        const prevButton = document.getElementById(`${tabId}PrevPage`);
        const nextButton = document.getElementById(`${tabId}NextPage`);

        if (!prevButton || !nextButton) {
            console.error(`Pagination buttons not found for ${tabId}`);
            return;
        }

        prevButton.replaceWith(prevButton.cloneNode(true));
        nextButton.replaceWith(nextButton.cloneNode(true));

        const newPrevButton = document.getElementById(`${tabId}PrevPage`);
        const newNextButton = document.getElementById(`${tabId}NextPage`);

        newPrevButton.addEventListener('click', function () {
            if (tabData[tabId].currentPage > 1) {
                tabData[tabId].currentPage--;
                renderTable(tabId);
            }
        });

        newNextButton.addEventListener('click', function () {
            const totalPages = Math.ceil(tabData[tabId].filteredData.length / tabData[tabId].itemsPerPage);
            if (tabData[tabId].currentPage < totalPages) {
                tabData[tabId].currentPage++;
                renderTable(tabId);
            }
        });
    }

    function updatePaginationControls(tabId) {
        const { currentPage, itemsPerPage, filteredData } = tabData[tabId];
        const totalPages = Math.ceil(filteredData.length / itemsPerPage);

        const pageInfoElement = document.getElementById(`${tabId}PageInfo`);
        if (pageInfoElement) {
            pageInfoElement.textContent = `Trang ${currentPage} / ${Math.max(totalPages, 1)}`;
        }

        const prevButton = document.getElementById(`${tabId}PrevPage`);
        if (prevButton) {
            prevButton.disabled = currentPage <= 1;
        }

        const nextButton = document.getElementById(`${tabId}NextPage`);
        if (nextButton) {
            nextButton.disabled = currentPage >= totalPages || totalPages === 0;
        }
    }

    function paginateData(data, page, itemsPerPage) {
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        return data.slice(startIndex, endIndex);
    }

    // Add click handler for the add more button
    document.getElementById('addMoreFiles').addEventListener('click', (e) => {
        e.stopPropagation();
        document.getElementById('fileAttachments').click();
    });

    // Thêm hàm kiểm tra giới hạn
    async function checkLeaveLimits(maLoaiNgayNghi, soNgayYeuCau) {
        try {
            const response = await fetch(`/api/Leave/CheckLeaveLimits?maLoaiNgayNghi=${maLoaiNgayNghi}&soNgayYeuCau=${soNgayYeuCau}`, {
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });

            if (!response.ok) {
                throw new Error('Lỗi khi kiểm tra giới hạn');
            }

            const result = await response.json();
            if (!result.success) {
                throw new Error(result.message);
            }

            return result;
        } catch (error) {
            console.error('Lỗi khi kiểm tra giới hạn:', error);
            throw error;
        }
    }
</script>