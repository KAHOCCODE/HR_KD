@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
@* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> *@
<!-- Font Awesome -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css">

<style>
    .dashboard-card {
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .dashboard-card:hover {
            transform: translateY(-5px);
        }

    .leave-history {
        margin-top: 2rem;
        padding: 1.5rem;
        background-color: #f8f9fa;
        border-radius: 12px;
    }

        .leave-history h6 {
            color: #495057;
            font-weight: 600;
        }

        .leave-history table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 8px;
        }

            .leave-history table th,
            .leave-history table td {
                padding: 12px;
                background-color: #fff;
            }

            .leave-history table th {
                background-color: #e9ecef;
                font-weight: 600;
            }

            .leave-history table tr {
                border-radius: 8px;
                overflow: hidden;
            }

    .btn-success {
        background-color: #28a745;
        border: none;
        padding: 10px 20px;
        margin-top: 20px;
        font-size: 16px;
        border-radius: 8px;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .form-control,
    .form-select {
        border-radius: 8px;
        padding: 10px;
        border: 1px solid #ced4da;
    }

        .form-control:focus,
        .form-select:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .leave-info-card {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .leave-info-card:hover {
            transform: translateY(-5px);
        }

        .leave-info-card h6 {
            color: #495057;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .leave-info-card p {
            font-size: 1.25rem;
            color: #28a745;
            font-weight: 600;
            margin-bottom: 0;
        }

    #selectedDates {
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 8px;
        padding: 10px;
        font-size: 14px;
        color: #495057;
    }

    .status {
        font-weight: bold;
        display: inline-block;
        width: 100%; /* Chiếm toàn bộ chiều rộng của ô */
        height: 100%; /* Chiếm toàn bộ chiều cao của ô */
        text-align: center; /* Căn giữa nội dung */
    }

    .bg-warning-subtle {
        background-color: rgba(255, 193, 7, 0.2);
    }

    .bg-success-subtle {
        background-color: rgba(40, 167, 69, 0.2);
    }

    .bg-danger-subtle {
        background-color: rgba(220, 53, 69, 0.2);
    }
    /* Điều chỉnh chiều rộng và style cho dropdown */
    #sortDropdown {
        width: 250px; /* Điều chỉnh chiều rộng */
        padding: 8px 12px; /* Thêm padding */
        border: 1px solid #ccc; /* Thêm border */
        border-radius: 4px; /* Bo góc */
        font-size: 14px; /* Điều chỉnh kích thước font */
        background-color: #f9f9f9; /* Màu nền */
        transition: border-color 0.3s ease; /* Hiệu ứng hover */
    }

        #sortDropdown:hover {
            border-color: #888; /* Đổi màu border khi hover */
        }

        #sortDropdown:focus {
            outline: none; /* Loại bỏ outline khi focus */
            border-color: #007bff; /* Đổi màu border khi focus */
        }
    /* Điều chỉnh vị trí của pagination */
    .pagination {
        display: flex;
        justify-content: center; /* Căn giữa theo chiều ngang */
        align-items: center; /* Căn giữa theo chiều dọc */
        margin-top: 20px; /* Thêm khoảng cách phía trên */
    }

        /* Điều chỉnh khoảng cách giữa các button */
        .pagination button {
            margin: 0 5px; /* Thêm khoảng cách giữa các button */
        }
    /* Điều chỉnh vị trí của pagination */
    .pagination {
        display: flex;
        justify-content: center; /* Căn giữa theo chiều ngang */
        align-items: center; /* Căn giữa theo chiều dọc */
        margin-top: 20px; /* Thêm khoảng cách phía trên */
    }

        /* Điều chỉnh khoảng cách giữa các button */
        .pagination button {
            margin: 0 5px; /* Thêm khoảng cách giữa các button */
        }
    /* Căn giữa nội dung trong các thẻ <th> và <td> */
    .table th,
    .table td {
        text-align: center; /* Căn giữa theo chiều ngang */
        vertical-align: middle; /* Căn giữa theo chiều dọc */
    }

    /* Tùy chỉnh style cho bảng */
    .table {
        width: 100%; /* Chiều rộng bảng */
        border-collapse: collapse; /* Gộp border */
        margin-top: 20px; /* Thêm khoảng cách phía trên */
    }

        .table th {
            background-color: #f2f2f2; /* Màu nền header */
            font-weight: bold; /* Đậm chữ */
        }

        .table td {
            border: 1px solid #ddd; /* Thêm border cho các ô */
            padding: 10px; /* Thêm padding */
        }

        /* Hiệu ứng hover cho các hàng */
        .table tbody tr:hover {
            background-color: #f5f5f5; /* Đổi màu nền khi hover */
        }

    .weekend-day, .past-day {
        position: relative;
        cursor: not-allowed !important;
    }



    .weekend-day {
        text-decoration: line-through;
        color: #ff7d7d !important;
    }

    .past-day {
        color: #b2b2b2 !important;
    }



    /* Thay đổi hiển thị ngày đã đăng ký */

    .registered-day {
        background-color: #a8f0b0 !important; /* Màu nền xanh lá nhạt */
        color: #28a745 !important; /* Màu chữ xanh lá */
        border: 2px solid #28a745 !important; /* Viền xanh lá */
        position: relative;
        cursor: not-allowed !important;
        text-decoration: none !important; /* Bỏ gạch ngang */
    }

        .weekend-day:hover::after, .past-day:hover::after, .registered-day:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            top: -35px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 100;
        }

    /* Làm rõ ngày được chọn */
    .flatpickr-day.selected {
        background-color: #28a745 !important;
        border-color: #28a745 !important;
        font-weight: bold;
    }

    .btn-cancel {
        background-color: #ff4d4d;
        color: white;
        padding: 6px 12px;
        border: none;
        border-radius: 6px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.15);
    }

        .btn-cancel:hover {
            background-color: #ff3333;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.18);
        }

        .btn-cancel:active {
            transform: translateY(0);
            box-shadow: 0 1px 2px rgba(0,0,0,0.15);
        }

        .btn-cancel i {
            font-size: 14px;
        }

    .btn-cancel-disabled {
        background-color: #f0f0f0;
        color: #aaa;
        cursor: not-allowed;
        border: 1px solid #ddd;
        box-shadow: none;
    }

        .btn-cancel-disabled:hover {
            transform: none;
            box-shadow: none;
        }

    td .btn-cancel, td .btn-cancel-disabled {
        display: flex;
        margin: 0 auto;
        justify-content: center;
        align-items: center;
    }

    /* Add these styles to your existing <style> block */

    /* Tab styling */
    .nav-tabs .nav-link {
        color: #495057;
        border: 1px solid transparent;
        border-top-left-radius: 0.25rem;
        border-top-right-radius: 0.25rem;
        padding: 0.75rem 1rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .nav-tabs .nav-link:hover {
            border-color: #e9ecef #e9ecef #dee2e6;
            background-color: #f8f9fa;
        }

        .nav-tabs .nav-link.active {
            color: #0d6efd;
            background-color: #fff;
            border-color: #dee2e6 #dee2e6 #fff;
            border-bottom: 2px solid #0d6efd;
        }

    /* Empty state message */
    .empty-state {
        text-align: center;
        padding: 2rem;
        color: #6c757d;
    }

    /* Disable previous/next buttons when appropriate */
    .pagination button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /* Tab icons */
    .nav-tabs .nav-link i {
        margin-right: 0.5rem;
    }

    /* Tab content transition */
    .tab-content > .tab-pane {
        transition: opacity 0.3s ease-in-out;
    }

    /* Badge counters for tabs */
    .tab-badge {
        background-color: #6c757d;
        color: white;
        border-radius: 50%;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        margin-left: 0.5rem;
    }

    .pending-badge {
        background-color: #ffc107;
    }

    .approved-badge {
        background-color: #28a745;
    }

    .rejected-badge {
        background-color: #dc3545;
    }

</style>

<div id="leaveSection" class="dashboard-card bg-white p-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-calendar-alt me-2"></i>Đăng ký nghỉ phép</h5>
    <form id="leaveForm">
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Loại nghỉ phép</label>
                <select id="leaveTypeSelect" class="form-select" name="leaveType" required>
                    <option value="">Chọn loại nghỉ</option>
                </select>
                <div id="leaveTypeError" class="text-danger mt-2"></div>
            </div>
            <div class="col-md-6">
                <label class="form-label">Chọn Ngày</label>
                <input type="text" id="datePicker" class="form-control" placeholder="Chọn ngày..." required>
            </div>
            <div class="col-md-6">
                <label class="form-label">Ngày đã chọn</label>
                <div id="selectedDates" class="form-control" style="height: auto; min-height: 38px;"></div>
            </div>
            <div class="col-12">
                <label class="form-label">Lý do</label>
                <textarea class="form-control" name="leaveReason" rows="3" placeholder="Nhập lý do..."></textarea>
            </div>
            <div class="col-12">
                <label class="form-label">File đính kèm</label>
                <input type="file" id="fileAttachments" class="form-control" name="files" multiple>
                <div class="small text-muted mt-1">Có thể tải lên một hoặc nhiều file</div>
                <div id="selectedFiles" class="mt-2"></div>
            </div>
            <div class="col-12">
                <button type="submit" id="submitButton" class="btn btn-success">
                    <i class="fas fa-paper-plane me-2"></i>Gửi yêu cầu
                </button>

            </div>
        </div>
    </form>
</div>
<div class="dashboard-card bg-white p-4 mt-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-info-circle me-2"></i>Thông tin nghỉ phép khả dụng</h5>
    <div class="row">
        <div class="col-md-12">
            <div class="leave-info-card">
                <h6>Nghỉ phép năm</h6>
                <p>Số ngày còn lại: <strong>Đang tải...</strong></p>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-12">
            <div class="leave-notes p-3 bg-light rounded">
                <p class="small mb-1"><strong>Lưu ý:</strong></p>
                <ul class="small mb-0">
                    <li>Luật lao động: Làm ở công ty 5 năm, tăng thêm 1 ngày phép.</li>
                    <li>Luật Công ty: Cứ 5 năm tăng thêm 1 ngày phép.</li>
                </ul>
            </div>
        </div>
    </div>
</div>
<!-- Replace the existing leave-history div with this code -->
<div class="leave-history bg-white p-4 mt-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-history me-2"></i>Lịch sử đăng ký nghỉ phép</h5>

    <!-- Tab Navigation -->
    <ul class="nav nav-tabs mb-3" id="leaveHistoryTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pending" type="button" role="tab" aria-controls="pending" aria-selected="true">
                <i class="fas fa-clock me-2"></i>Đơn chờ duyệt
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="approved-tab" data-bs-toggle="tab" data-bs-target="#approved" type="button" role="tab" aria-controls="approved" aria-selected="false">
                <i class="fas fa-check-circle me-2"></i>Đơn đã duyệt
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="rejected-tab" data-bs-toggle="tab" data-bs-target="#rejected" type="button" role="tab" aria-controls="rejected" aria-selected="false">
                <i class="fas fa-times-circle me-2"></i>Đơn bị từ chối
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content" id="leaveHistoryTabContent">
        <!-- Pending Tab -->
        <div class="tab-pane fade show active" id="pending" role="tabpanel" aria-labelledby="pending-tab">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody id="pendingLeaveBody"></tbody>
            </table>
            <div class="pagination" id="pendingPagination">
                <button id="pendingPrevPage" class="btn btn-secondary">Previous</button>
                <span id="pendingPageInfo" class="mx-2"></span>
                <button id="pendingNextPage" class="btn btn-secondary">Next</button>
            </div>
        </div>

        <!-- Approved Tab -->
        <div class="tab-pane fade" id="approved" role="tabpanel" aria-labelledby="approved-tab">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody id="approvedLeaveBody"></tbody>
            </table>
            <div class="pagination" id="approvedPagination">
                <button id="approvedPrevPage" class="btn btn-secondary">Previous</button>
                <span id="approvedPageInfo" class="mx-2"></span>
                <button id="approvedNextPage" class="btn btn-secondary">Next</button>
            </div>
        </div>

        <!-- Rejected Tab -->
        <div class="tab-pane fade" id="rejected" role="tabpanel" aria-labelledby="rejected-tab">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody id="rejectedLeaveBody"></tbody>
            </table>
            <div class="pagination" id="rejectedPagination">
                <button id="rejectedPrevPage" class="btn btn-secondary">Previous</button>
                <span id="rejectedPageInfo" class="mx-2"></span>
                <button id="rejectedNextPage" class="btn btn-secondary">Next</button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://npmcdn.com/flatpickr/dist/l10n/vn.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script>
    async function fetchAlreadyRegisteredDates() {
        try {
            const response = await fetch('/api/Leave/GetAlreadyRegisteredDates', {
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }

            const result = await response.json();
            if (result.success) {
                return result.dates.map(dateStr => {
                    const date = new Date(dateStr);
                    return date.setHours(0, 0, 0, 0);
                });
            } else {
                console.error("API error:", result.message);
                return [];
            }
        } catch (error) {
            console.error("Error fetching registered dates:", error);
            return [];
        }
    }

    // Thay thế đoạn khởi tạo Flatpickr trong sự kiện DOMContentLoaded
    document.addEventListener("DOMContentLoaded", async function () {
        // Lấy các ngày đã đăng ký trước khi khởi tạo datepicker
        const registeredDates = await fetchAlreadyRegisteredDates();
        // Thêm CSS cho ngày đã đăng ký
        // Trong phần tạo styleElement, thay thế CSS cho .registered-day
        const styleElement = document.createElement('style');
        styleElement.textContent = `
            .registered-day {
                background-color: #a8f0b0 !important;
                color: #28a745 !important;
                border: 2px solid #28a745 !important;
                position: relative;
                cursor: not-allowed !important;
                text-decoration: none !important;
            }

            .registered-day:hover::after {
                content: attr(title);
                position: absolute;
                top: -35px;
                left: 50%;
                transform: translateX(-50%);
                background-color: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 14px;
                white-space: nowrap;
                z-index: 100;
            }
        `;
        document.head.appendChild(styleElement);

        // Lấy token từ localStorage
        const getAuthToken = () => localStorage.getItem('jwtToken');

        // Config Flatpickr
        const today = new Date().setHours(0, 0, 0, 0);
        const datePicker = flatpickr("#datePicker", {
            mode: "multiple",
            dateFormat: "Y-m-d",
            minDate: "today",
            locale: "vn",
            disable: [
                function (date) {
                    // Vô hiệu hóa thứ Bảy (6) và Chủ nhật (0)
                    const isWeekend = (date.getDay() === 0 || date.getDay() === 6);

                    // Vô hiệu hóa ngày đã đăng ký
                    const dateTime = date.setHours(0, 0, 0, 0);
                    const isAlreadyRegistered = registeredDates.includes(dateTime);

                    return isWeekend || isAlreadyRegistered;
                }
            ],
            onDayCreate: function (dObj, dStr, fp, dayElem) {
                const date = dayElem.dateObj;
                const dateTime = date.setHours(0, 0, 0, 0);

                // Thêm tooltip cho ngày cuối tuần
                if (date.getDay() === 0 || date.getDay() === 6) {
                    dayElem.title = "Không thể đăng ký nghỉ phép vào ngày cuối tuần";
                    dayElem.classList.add("weekend-day");
                }

                // Thêm tooltip cho ngày trong quá khứ
                if (date < new Date().setHours(0, 0, 0, 0)) {
                    dayElem.title = "Không thể đăng ký nghỉ phép vào ngày trong quá khứ";
                    dayElem.classList.add("past-day");
                }

                // Thêm tooltip và style cho ngày đã đăng ký
                if (registeredDates.includes(dateTime)) {
                    dayElem.title = "Bạn đã đăng ký nghỉ phép vào ngày này";
                    dayElem.classList.add("registered-day");
                }
            },
            onClose: function (selectedDates) {
                const validDates = selectedDates.filter(date => {
                    const dateTime = date.setHours(0, 0, 0, 0);
                    return date >= today && !registeredDates.includes(dateTime);
                });

                if (validDates.length !== selectedDates.length) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi chọn ngày',
                        text: 'Có ngày không hợp lệ trong lựa chọn của bạn!'
                    });
                    this.clear();
                }

                document.getElementById("selectedDates").textContent =
                    validDates.map(date => date.toLocaleDateString('vi-VN')).join(', ');
            }
        });

        let selectedFilesArray = []; // Mảng lưu trữ file đã chọn

        // Xử lý submit form
        document.getElementById("leaveForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = {
                leaveType: document.querySelector("[name='leaveType']").value,
                leaveReason: document.querySelector("[name='leaveReason']").value,
                selectedDates: datePicker.selectedDates.map(d => d.toLocaleDateString('sv-SE'))
            };

            if (!formData.selectedDates.length) {
                Swal.fire('Lỗi', 'Vui lòng chọn ít nhất 1 ngày nghỉ!', 'error');
                return;
            }

            try {
                const submitFormData = new FormData();

                const leaveRequestsData = formData.selectedDates.map(date => ({
                    NgayNghi: date,
                    LyDo: formData.leaveReason,
                    MaLoaiNgayNghi: parseInt(formData.leaveType)
                }));

                submitFormData.append('leaveRequestsJson', JSON.stringify(leaveRequestsData));

                // Gửi tất cả file đã chọn (bao gồm file trước đó + file mới)
                selectedFilesArray.forEach(file => {
                    submitFormData.append('files', file);
                });

                const response = await fetch("/api/Leave/SubmitLeave", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${getAuthToken()}`
                    },
                    body: submitFormData
                });

                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Lỗi API');

                await Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: 'Đăng ký nghỉ phép thành công!'
                });

                // Reset form
                datePicker.clear();
                document.getElementById("leaveForm").reset();
                document.getElementById("selectedDates").textContent = '';
                document.getElementById("selectedFiles").innerHTML = '';
                selectedFilesArray = []; // Reset mảng file
            } catch (error) {
                console.error('Submit error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi hệ thống',
                    text: error.message || 'Vui lòng thử lại sau!'
                });
            }
        });

        // Hiển thị danh sách file đã chọn và cập nhật mảng selectedFilesArray
        document.getElementById('fileAttachments')?.addEventListener('change', function (e) {
            const newFiles = Array.from(this.files);

            // Thêm file mới vào mảng selectedFilesArray
            selectedFilesArray = selectedFilesArray.concat(newFiles);

            // Cập nhật giao diện hiển thị danh sách file
            updateSelectedFilesUI();
        });

        // Hàm cập nhật giao diện danh sách file
        function updateSelectedFilesUI() {
            const fileList = document.getElementById('selectedFiles');
            fileList.innerHTML = '';

            if (selectedFilesArray.length > 0) {
                const fileCount = document.createElement('div');
                fileCount.className = 'mb-2';
                fileCount.innerHTML = `<strong>Đã chọn ${selectedFilesArray.length} file:</strong>`;
                fileList.appendChild(fileCount);

                const list = document.createElement('ul');
                list.className = 'list-group';

                selectedFilesArray.forEach(file => {
                    const item = document.createElement('li');
                    item.className = 'list-group-item d-flex justify-content-between align-items-center';

                    const fileInfo = document.createElement('div');
                    fileInfo.innerHTML = `
                    <i class="fas fa-file me-2"></i>
                    ${file.name}
                    <span class="badge bg-secondary rounded-pill">${formatFileSize(file.size)}</span>
                `;

                    item.appendChild(fileInfo);
                    list.appendChild(item);
                });

                fileList.appendChild(list);
            }
        }

        // Hàm format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';

            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));

            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

    });

    //Hiển thị lịch sử đăng ký nghỉ phép
    document.addEventListener("DOMContentLoaded", async function () {
        // Make sure Bootstrap JS is loaded for tabs functionality
        if (typeof bootstrap === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js';
            script.onload = initializeTabs; // Initialize tabs once Bootstrap is loaded
            document.head.appendChild(script);
        } else {
            initializeTabs(); // Initialize tabs if Bootstrap is already loaded
        }

        // Initialize tab functionality
        function initializeTabs() {
            // Initialize Bootstrap tabs
            const tabElements = document.querySelectorAll('button[data-bs-toggle="tab"]');
            tabElements.forEach(tabElement => {
                tabElement.addEventListener('click', function (event) {
                    event.preventDefault();

                    // Remove active class from all tabs
                    tabElements.forEach(tab => {
                        tab.classList.remove('active');
                        const tabPane = document.querySelector(tab.getAttribute('data-bs-target'));
                        if (tabPane) {
                            tabPane.classList.remove('show', 'active');
                        }
                    });

                    // Add active class to current tab
                    this.classList.add('active');
                    const targetPane = document.querySelector(this.getAttribute('data-bs-target'));
                    if (targetPane) {
                        targetPane.classList.add('show', 'active');
                    }

                    // Update the table for the active tab
                    const tabId = this.getAttribute('data-bs-target').substring(1);
                    renderTable(tabId);
                });
            });

            // Activate the first tab by default
            if (tabElements.length > 0) {
                const firstTab = tabElements[0];
                firstTab.classList.add('active');
                const firstTabPane = document.querySelector(firstTab.getAttribute('data-bs-target'));
                if (firstTabPane) {
                    firstTabPane.classList.add('show', 'active');
                }
            }
        }

        let leaveHistory = [];
        const tabData = {
            pending: { currentPage: 1, itemsPerPage: 5, filteredData: [] },
            approved: { currentPage: 1, itemsPerPage: 5, filteredData: [] },
            rejected: { currentPage: 1, itemsPerPage: 5, filteredData: [] }
        };

        // Function to fetch leave history data
        async function fetchLeaveHistory() {
            try {
                const response = await fetch('/api/Leave/GetLeaveHistory', {
                    headers: {
                        "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
                    }
                });

                if (!response.ok) {
                    if (response.status === 401) {
                        window.location.href = '/login'; // Redirect if not logged in
                        return;
                    }
                    throw new Error(`Lỗi HTTP: ${response.status} - ${response.statusText}`);
                }

                const result = await response.json();
                if (result?.success && Array.isArray(result.leaveHistory)) {
                    leaveHistory = result.leaveHistory;

                    // Filter data for each tab
                    tabData.pending.filteredData = leaveHistory.filter(item => item.trangThai === "Chờ duyệt");
                    tabData.approved.filteredData = leaveHistory.filter(item => item.trangThai === "Đã duyệt");
                    tabData.rejected.filteredData = leaveHistory.filter(item => item.trangThai === "Từ chối");

                    // Render all tabs
                    renderTable('pending');
                    renderTable('approved');
                    renderTable('rejected');

                    // Update tab badges if needed
                    updateTabBadges();
                } else {
                    displayError("Không có dữ liệu nghỉ phép", ['pendingLeaveBody', 'approvedLeaveBody', 'rejectedLeaveBody']);
                }
            } catch (error) {
                console.error("Lỗi hệ thống:", error);
                displayError("Lỗi kết nối server", ['pendingLeaveBody', 'approvedLeaveBody', 'rejectedLeaveBody']);
            }
        }

        // Function to update tab badges with count
        function updateTabBadges() {
            // Add badges to tabs showing count
            const pendingCount = tabData.pending.filteredData.length;
            const approvedCount = tabData.approved.filteredData.length;
            const rejectedCount = tabData.rejected.filteredData.length;

            // Create or update badge elements
            updateBadge('pending-tab', pendingCount, 'pending-badge');
            updateBadge('approved-tab', approvedCount, 'approved-badge');
            updateBadge('rejected-tab', rejectedCount, 'rejected-badge');
        }

        // Helper function to update a single badge
        function updateBadge(tabId, count, badgeClass) {
            const tabElement = document.getElementById(tabId);
            if (!tabElement) return;

            // Remove existing badge if present
            const existingBadge = tabElement.querySelector('.tab-badge');
            if (existingBadge) {
                existingBadge.remove();
            }

            // Add new badge
            const badge = document.createElement('span');
            badge.className = `tab-badge ${badgeClass}`;
            badge.textContent = count;
            tabElement.appendChild(badge);
        }

        // Function to render table data for a specific tab
        function renderTable(tabId) {
            const tableBodyId = `${tabId}LeaveBody`;
            const tableBody = document.getElementById(tableBodyId);
            if (!tableBody) {
                console.error(`Không tìm thấy phần tử ${tableBodyId} trong DOM.`);
                return;
            }
            tableBody.innerHTML = "";

            const { currentPage, itemsPerPage, filteredData } = tabData[tabId];
            const paginatedData = paginateData(filteredData, currentPage, itemsPerPage);

            if (paginatedData.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="5" class="text-center">Không có đơn nào trong danh sách này</td></tr>`;
            } else {
                paginatedData.forEach(item => {
                    const row = document.createElement("tr");

                    // Check status to determine if the cancel button should be displayed
                    const canCancel = item.trangThai === "Chờ duyệt";
                    const cancelButton = canCancel ?
                        `<button class="btn-cancel" data-id="${item.id}">
                                <i class="fas fa-times-circle"></i>
                                <span>Hủy đơn</span>
                            </button>` :
                        '<span class="btn-cancel-disabled">Không khả dụng</span>';

                    row.innerHTML = `
                            <td>${item.tenLoai || "Không xác định"}</td>
                            <td>${formatDate(item.ngayNghi) || "Không xác định"}</td>
                            <td>${item.lyDo || "Không có lý do"}</td>
                            <td><span class="status ${getStatusClass(item.trangThai)}">${item.trangThai}</span></td>
                            <td>${cancelButton}</td>
                        `;
                    tableBody.appendChild(row);
                });
            }

            // Add event listeners for cancel buttons
            document.querySelectorAll(`#${tableBodyId} .btn-cancel`).forEach(btn => {
                btn.addEventListener('click', function () {
                    const leaveId = this.getAttribute('data-id');
                    cancelLeaveRequest(leaveId);
                });
            });

            updatePageInfo(tabId);
        }

        // Function to handle leave request cancellation
        async function cancelLeaveRequest(leaveId) {
            try {
                // Show confirmation before cancellation
                const result = await Swal.fire({
                    title: 'Xác nhận hủy đơn',
                    text: 'Bạn có chắc chắn muốn hủy đơn nghỉ phép này?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Có, hủy đơn!',
                    cancelButtonText: 'Không, giữ lại'
                });

                if (result.isConfirmed) {
                    // Call API to cancel the request
                    const response = await fetch(`/api/Leave/CancelLeave/${leaveId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                        }
                    });

                    const data = await response.json();

                    if (response.ok && data.success) {
                        Swal.fire(
                            'Đã hủy!',
                            'Đơn nghỉ phép đã được hủy thành công.',
                            'success'
                        );

                        // Update the list
                        fetchLeaveHistory();
                    } else {
                        throw new Error(data.message || 'Không thể hủy đơn nghỉ phép.');
                    }
                }
            } catch (error) {
                console.error('Lỗi khi hủy đơn:', error);
                Swal.fire(
                    'Lỗi!',
                    error.message || 'Có lỗi xảy ra khi hủy đơn nghỉ phép.',
                    'error'
                );
            }
        }

        // Function to paginate data
        function paginateData(data, page, itemsPerPage) {
            const startIndex = (page - 1) * itemsPerPage;
            return data.slice(startIndex, startIndex + itemsPerPage);
        }

        // Function to update page information
        function updatePageInfo(tabId) {
            const { currentPage, itemsPerPage, filteredData } = tabData[tabId];
            const totalPages = Math.ceil(filteredData.length / itemsPerPage) || 1;
            const pageInfoElement = document.getElementById(`${tabId}PageInfo`);
            if (pageInfoElement) {
                pageInfoElement.textContent = `Trang ${currentPage} / ${totalPages}`;
            }

            // Update button states
            const prevButton = document.getElementById(`${tabId}PrevPage`);
            const nextButton = document.getElementById(`${tabId}NextPage`);

            if (prevButton) prevButton.disabled = currentPage <= 1;
            if (nextButton) nextButton.disabled = currentPage >= totalPages;
        }

        // Function to display error messages
        function displayError(message, elementIds) {
            elementIds.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.innerHTML = `<tr><td colspan='5' class='text-danger text-center'>${message}</td></tr>`;
                }
            });
        }

        // Function to determine CSS class based on status
        function getStatusClass(status) {
            if (!status) return "";
            const normalizedStatus = status.trim().toLowerCase();
            switch (normalizedStatus) {
                case "chờ duyệt": return "text-warning bg-warning-subtle";
                case "đã duyệt": return "text-success bg-success-subtle";
                case "từ chối": return "text-danger bg-danger-subtle";
                default: return "";
            }
        }

        // Function to format date
        function formatDate(dateStr) {
            if (!dateStr) return "";
            const date = new Date(dateStr);
            if (isNaN(date.getTime())) return "Không xác định";
            return date.toLocaleDateString('vi-VN'); // Format to Vietnamese date format
        }

        // Set up event listeners for pagination
        ['pending', 'approved', 'rejected'].forEach(tabId => {
            const prevButton = document.getElementById(`${tabId}PrevPage`);
            const nextButton = document.getElementById(`${tabId}NextPage`);

            if (prevButton) {
                prevButton.addEventListener("click", () => {
                    if (tabData[tabId].currentPage > 1) {
                        tabData[tabId].currentPage--;
                        renderTable(tabId);
                    }
                });
            }

            if (nextButton) {
                nextButton.addEventListener("click", () => {
                    const totalPages = Math.ceil(tabData[tabId].filteredData.length / tabData[tabId].itemsPerPage) || 1;
                    if (tabData[tabId].currentPage < totalPages) {
                        tabData[tabId].currentPage++;
                        renderTable(tabId);
                    }
                });
            }
        });

        // Initialize
        fetchLeaveHistory();
    });

    // lấy loại ngày nghỉ
    document.addEventListener("DOMContentLoaded", async function () {
        try {
            const response = await fetch("/api/Leave/GetLeaveTypes");
            const result = await response.json();

            console.log("Dữ liệu trả về từ API:", result); // Kiểm tra dữ liệu

            if (result && result.success && Array.isArray(result.leaveTypes)) {
                const leaveTypeSelect = document.getElementById("leaveTypeSelect");

                // Xóa tất cả các option hiện có (trừ option mặc định)
                leaveTypeSelect.innerHTML = '<option value="">Chọn loại nghỉ</option>';

                // Thêm từng loại nghỉ phép vào select
                result.leaveTypes.forEach(leaveType => {
                    const option = document.createElement("option");
                    option.value = leaveType.maLoaiNgayNghi; // Đảm bảo đúng tên thuộc tính
                    option.textContent = leaveType.tenLoai;
                    leaveTypeSelect.appendChild(option);
                });

                console.log("Số lượng option sau khi thêm:", leaveTypeSelect.options.length); // Kiểm tra số lượng option
            } else {
                console.error("Lỗi dữ liệu:", result);
                alert("Dữ liệu không hợp lệ.");
            }
        } catch (error) {
            console.error("Lỗi hệ thống:", error);
            alert("Lỗi hệ thống. Vui lòng thử lại sau.");
        }
    });

    // Biến global để lưu số ngày phép còn lại
    let availableLeaveBalance = 0;

    // Sửa đoạn fetch số ngày phép còn lại để lưu giá trị vào biến global
    document.addEventListener("DOMContentLoaded", function () {
        fetch('/api/Leave/SoNgayConLai')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Lỗi khi lấy dữ liệu');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Lưu giá trị vào biến global
                    availableLeaveBalance = data.soNgayConLai;

                    const soNgayConLaiElement = document.querySelector('.leave-info-card strong');
                    if (soNgayConLaiElement) {
                        soNgayConLaiElement.textContent = `${data.soNgayConLai} ngày`;
                    }

                    // Kiểm tra và cập nhật trạng thái nút đăng ký
                    checkLeaveBalance();
                } else {
                    console.error('Lỗi:', data.message);
                }
            })
            .catch(error => {
                console.error('Lỗi:', error);
            });
    });

    // Hàm kiểm tra số ngày phép khả dụng
    function checkLeaveBalance() {
        const submitButton = document.getElementById("submitButton");
        const leaveForm = document.getElementById("leaveForm");
        const leaveSection = document.getElementById("leaveSection");

        if (availableLeaveBalance <= 0) {
            // Vô hiệu hóa nút đăng ký
            submitButton.disabled = true;
            submitButton.classList.remove("btn-success");
            submitButton.classList.add("btn-secondary");

            // Thêm thông báo về số ngày phép đã hết
            if (!document.getElementById("noLeaveMessage")) {
                const alertMessage = document.createElement("div");
                alertMessage.id = "noLeaveMessage";
                alertMessage.className = "alert alert-warning mt-3";
                alertMessage.innerHTML = `
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Thông báo:</strong> Số dư nghỉ phép của bạn đã hết. Không thể gửi yêu cầu nghỉ phép.
                    `;
                leaveSection.insertBefore(alertMessage, leaveForm.nextSibling);
            }
        } else {
            // Đảm bảo nút đăng ký được kích hoạt
            submitButton.disabled = false;
            submitButton.classList.remove("btn-secondary");
            submitButton.classList.add("btn-success");

            // Xóa thông báo nếu tồn tại
            const alertMessage = document.getElementById("noLeaveMessage");
            if (alertMessage) {
                alertMessage.remove();
            }
        }
    }


</script>
