@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<!-- Font Awesome -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css">

<style>
    .dashboard-card {
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .dashboard-card:hover {
            transform: translateY(-5px);
        }

    .leave-history {
        margin-top: 2rem;
        padding: 1.5rem;
        background-color: #f8f9fa;
        border-radius: 12px;
    }

        .leave-history h6 {
            color: #495057;
            font-weight: 600;
        }

        .leave-history table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 8px;
        }

            .leave-history table th,
            .leave-history table td {
                padding: 12px;
                background-color: #fff;
            }

            .leave-history table th {
                background-color: #e9ecef;
                font-weight: 600;
            }

            .leave-history table tr {
                border-radius: 8px;
                overflow: hidden;
            }

    .btn-success {
        background-color: #28a745;
        border: none;
        padding: 10px 20px;
        margin-top: 20px;
        font-size: 16px;
        border-radius: 8px;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .form-control,
    .form-select {
        border-radius: 8px;
        padding: 10px;
        border: 1px solid #ced4da;
    }

        .form-control:focus,
        .form-select:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .leave-info-card {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .leave-info-card:hover {
            transform: translateY(-5px);
        }

        .leave-info-card h6 {
            color: #495057;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .leave-info-card p {
            font-size: 1.25rem;
            color: #28a745;
            font-weight: 600;
            margin-bottom: 0;
        }

    #selectedDates {
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 8px;
        padding: 10px;
        font-size: 14px;
        color: #495057;
    }

    .status {
        font-weight: bold;
        display: inline-block;
        width: 100%;
        height: 100%;
        text-align: center;
    }

    .bg-warning-subtle {
        background-color: rgba(255, 193, 7, 0.2);
    }

    .bg-success-subtle {
        background-color: rgba(40, 167, 69, 0.2);
    }

    .bg-danger-subtle {
        background-color: rgba(220, 53, 69, 0.2);
    }

    #sortDropdown {
        width: 250px;
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
        background-color: #f9f9f9;
        transition: border-color 0.3s ease;
    }

        #sortDropdown:hover {
            border-color: #888;
        }

        #sortDropdown:focus {
            outline: none;
            border-color: #007bff;
        }

    .table th,
    .table td {
        text-align: center;
        vertical-align: middle;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        .table td {
            border: 1px solid #ddd;
            padding: 10px;
        }

        .table tbody tr:hover {
            background-color: #f5f5f5;
        }

    .weekend-day, .past-day, .registered-day, .holiday {
        position: relative;
        cursor: not-allowed !important;
    }

    .weekend-day {
        text-decoration: line-through;
        color: #ff7d7d !important;
    }

    .past-day {
        color: #b2b2b2 !important;
    }

    .registered-day {
        background-color: #a8f0b0 !important;
        color: #28a745 !important;
        border: 2px solid #28a745 !important;
        text-decoration: none !important;
    }

    .holiday {
        background-color: #fff3cd !important;
        color: #856404 !important;
        border: 2px solid #ffeeba !important;
        text-decoration: none !important;
    }

        .weekend-day:hover::after,
        .past-day:hover::after,
        .registered-day:hover::after,
        .holiday:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            top: -70px; /* Tăng khoảng cách để tooltip hiển thị xa hơn khỏi lịch */
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.85);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 13px;
            white-space: nowrap;
            z-index: 10000; /* Tăng z-index cao hơn flatpickr-calendar */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s ease-in-out, top 0.2s ease-in-out;
        }

        .weekend-day:hover::after,
        .past-day:hover::after,
        .registered-day:hover::after,
        .holiday:hover::after {
            opacity: 1;
            top: -70px; /* Giữ vị trí cố định khi hiển thị */
        }

    /* Đảm bảo lịch Flatpickr không che tooltip */
    .flatpickr-calendar {
        z-index: 1000; /* Giữ z-index thấp hơn tooltip */
        overflow: visible !important; /* Ngăn container lịch cắt tooltip */
    }

    /* Đảm bảo container cha của lịch không cắt tooltip */
    .flatpickr-innerContainer,
    .flatpickr-rContainer,
    .flatpickr-days {
        overflow: visible !important; /* Ngăn các container con cắt tooltip */
    }


    .flatpickr-day.selected {
        background-color: #28a745 !important;
        border-color: #28a745 !important;
        font-weight: bold;
    }

    .btn-cancel {
        background-color: #ff4d4d;
        color: white;
        padding: 6px 12px;
        border: none;
        border-radius: 6px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.15);
    }

        .btn-cancel:hover {
            background-color: #ff3333;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.18);
        }

        .btn-cancel:active {
            transform: translateY(0);
            box-shadow: 0 1px 2px rgba(0,0,0,0.15);
        }

        .btn-cancel i {
            font-size: 14px;
        }

    .btn-cancel-disabled {
        background-color: #f0f0f0;
        color: #aaa;
        cursor: not-allowed;
        border: 1px solid #ddd;
        box-shadow: none;
    }

        .btn-cancel-disabled:hover {
            transform: none;
            box-shadow: none;
        }

    td .btn-cancel, td .btn-cancel-disabled {
        display: flex;
        margin: 0 auto;
        justify-content: center;
        align-items: center;
    }

    .nav-tabs .nav-link {
        color: #495057;
        border: 1px solid transparent;
        border-top-left-radius: 0.25rem;
        border-top-right-radius: 0.25rem;
        padding: 0.75rem 1rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .nav-tabs .nav-link:hover {
            border-color: #e9ecef #e9ecef #dee2e6;
            background-color: #f8f9fa;
        }

        .nav-tabs .nav-link.active {
            color: #0d6efd;
            background-color: #fff;
            border-color: #dee2e6 #dee2e6 #fff;
            border-bottom: 2px solid #0d6efd;
        }

    .empty-state {
        text-align: center;
        padding: 2rem;
        color: #6c757d;
    }

    .pagination button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .nav-tabs .nav-link i {
        margin-right: 0.5rem;
    }

    .tab-content > .tab-pane {
        transition: opacity 0.3s ease-in-out;
    }

    .tab-badge {
        background-color: #6c757d;
        color: white;
        border-radius: 50%;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        margin-left: 0.5rem;
    }

    .pending-badge {
        background-color: #ffc107;
    }

    .approved-badge {
        background-color: #28a745;
    }

    .rejected-badge {
        background-color: #dc3545;
    }

    .file-link {
        color: #007bff;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
    }

        .file-link:hover {
            text-decoration: underline;
            color: #0056b3;
        }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        gap: 10px;
    }

        .pagination button {
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            color: #495057;
            padding: 8px 15px;
            border-radius: 5px;
            font-weight: 500;
            transition: all 0.2s ease;
            cursor: pointer;
        }

            .pagination button:hover:not(:disabled) {
                background-color: #e9ecef;
                border-color: #adb5bd;
            }

            .pagination button:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

        .pagination span {
            font-weight: 500;
            color: #495057;
            padding: 5px 10px;
            border-radius: 5px;
            background-color: #ffffff;
            border: 1px solid #e9ecef;
        }

    .leave-dashboard-enhanced {
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        max-width: 650px;
        margin: 0 auto;
        border-left: 4px solid #4285f4;
    }

        .leave-dashboard-enhanced:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.12);
        }

    .leave-enhanced-card {
        padding: 20px;
    }

        .leave-enhanced-card h6 {
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
            border-bottom: 1px solid #eaeaea;
            padding-bottom: 12px;
            font-size: 1.1rem;
            text-align: center;
        }

    .leave-data-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
    }

    .leave-enhanced-card p {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 12px;
        color: #555;
        flex: 1;
        padding: 0 15px;
        position: relative;
    }

        .leave-enhanced-card p:not(:last-child):after {
            content: "";
            position: absolute;
            right: 0;
            top: 10%;
            height: 80%;
            width: 1px;
            background-color: #eaeaea;
        }

    .leave-enhanced-card strong {
        font-weight: 600;
        color: #333;
        background-color: #f8f9fa;
        padding: 8px 16px;
        border-radius: 20px;
        min-width: 80px;
        text-align: center;
        margin-top: 10px;
        font-size: 1.1rem;
    }

    .leave-enhanced-card .so-ngay-con-lai {
        color: #4285f4;
        background-color: #e8f0fe;
    }

    .leave-enhanced-card .card-header {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

        .leave-enhanced-card .card-header i {
            background-color: #e8f0fe;
            color: #4285f4;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            margin-right: 10px;
        }

        .leave-enhanced-card .card-header h5 {
            margin: 0;
            color: #333;
            font-weight: 600;
        }

</style>

<div class="leave-dashboard-enhanced bg-white mt-4">
    <div class="leave-enhanced-card">
        <div class="card-header">
            <i class="fas fa-calendar-check"></i>
            <h5>Thông tin nghỉ phép</h5>
        </div>
        <h6>Nghỉ phép năm</h6>
        <div class="leave-data-row">
            <p>
                <span>Số ngày phép được cấp:</span>
                <strong class="so-ngay-phep-duoc-cap">Đang tải...</strong>
            </p>
            <p>
                <span>Số ngày đã sử dụng:</span>
                <strong class="so-ngay-da-su-dung">Đang tải...</strong>
            </p>
            <p>
                <span>Số ngày còn lại:</span>
                <strong class="so-ngay-con-lai">Đang tải...</strong>
            </p>
        </div>
    </div>
</div>


<div id="leaveSection" class="dashboard-card bg-white p-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-calendar-alt me-2"></i>Đăng ký nghỉ phép</h5>
    <form id="leaveForm">
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Loại nghỉ phép</label>
                <select id="leaveTypeSelect" class="form-select" name="leaveType" required>
                    <option value="">Chọn loại nghỉ</option>
                </select>
                <div id="leaveTypeError" class="text-danger mt-2"></div>
            </div>
            <div class="col-md-6">
                <label class="form-label">Chọn Ngày</label>
                <input type="text" id="datePicker" class="form-control" placeholder="Chọn ngày..." required>
            </div>
            <div class="col-md-6">
                <label class="form-label">Ngày đã chọn</label>
                <div id="selectedDates" class="form-control" style="height: auto; min-height: 38px;"></div>
            </div>
            <div class="col-12">
                <label class="form-label">Lý do</label>
                <textarea class="form-control" name="leaveReason" rows="3" placeholder="Nhập lý do..."></textarea>
            </div>
            <div class="col-12">
                <label class="form-label">File đính kèm</label>
                <input type="file" id="fileAttachments" class="form-control" name="files" multiple>
                <div class="small text-muted mt-1">Có thể tải lên một hoặc nhiều file</div>
                <div id="selectedFiles" class="mt-2"></div>
            </div>
            <div class="col-12">
                <button type="submit" id="submitButton" class="btn btn-success">
                    <i class="fas fa-paper-plane me-2"></i>Gửi yêu cầu
                </button>
            </div>
        </div>
    </form>
</div>


<div class="leave-history bg-white p-4 mt-4">
    <h5 class="mb-4 text-primary"><i class="fas fa-history me-2"></i>Lịch sử đăng ký nghỉ phép</h5>
    <ul class="nav nav-tabs mb-3" id="leaveHistoryTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pending" type="button" role="tab" aria-controls="pending" aria-selected="true">
                <i class="fas fa-clock me-2"></i>Đơn chờ duyệt
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="approved-tab" data-bs-toggle="tab" data-bs-target="#approved" type="button" role="tab" aria-controls="approved" aria-selected="false">
                <i class="fas fa-check-circle me-2"></i>Đơn đã duyệt
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="rejected-tab" data-bs-toggle="tab" data-bs-target="#rejected" type="button" role="tab" aria-controls="rejected" aria-selected="false">
                <i class="fas fa-times-circle me-2"></i>Đơn bị từ chối
            </button>
        </li>
    </ul>
    <div class="tab-content" id="leaveHistoryTabContent">
        <div class="tab-pane fade show active" id="pending" role="tabpanel" aria-labelledby="pending-tab">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>File đính kèm</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody id="pendingLeaveBody"></tbody>
            </table>
            <div class="pagination" id="pendingPagination">
                <button id="pendingPrevPage" class="btn btn-sm">
                    <i class="fas fa-chevron-left me-1"></i> Trước
                </button>
                <span id="pendingPageInfo" class="mx-3"></span>
                <button id="pendingNextPage" class="btn btn-sm">
                    Sau <i class="fas fa-chevron-right ms-1"></i>
                </button>
            </div>
        </div>
        <div class="tab-pane fade" id="approved" role="tabpanel" aria-labelledby="approved-tab">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>File đính kèm</th>
                        <th>Ngày duyệt</th>
                        <th>Ghi chú</th>
                        <th>Người duyệt</th>
                    </tr>
                </thead>
                <tbody id="approvedLeaveBody"></tbody>
            </table>
            <div class="pagination" id="approvedPagination">
                <button id="approvedPrevPage" class="btn btn-sm">
                    <i class="fas fa-chevron-left me-1"></i> Trước
                </button>
                <span id="approvedPageInfo" class="mx-3"></span>
                <button id="approvedNextPage" class="btn btn-sm">
                    Sau <i class="fas fa-chevron-right ms-1"></i>
                </button>
            </div>
        </div>
        <div class="tab-pane fade" id="rejected" role="tabpanel" aria-labelledby="rejected-tab">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Loại nghỉ</th>
                        <th>Ngày nghỉ</th>
                        <th>Lý do</th>
                        <th>Trạng thái</th>
                        <th>File đính kèm</th>
                        <th>Ngày duyệt</th>
                        <th>Ghi chú</th>
                        <th>Người duyệt</th>
                    </tr>
                </thead>
                <tbody id="rejectedLeaveBody"></tbody>
            </table>
            <div class="pagination" id="rejectedPagination">
                <button id="rejectedPrevPage" class="btn btn-sm">
                    <i class="fas fa-chevron-left me-1"></i> Trước
                </button>
                <span id="rejectedPageInfo" class="mx-3"></span>
                <button id="rejectedNextPage" class="btn btn-sm">
                    Sau <i class="fas fa-chevron-right ms-1"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://npmcdn.com/flatpickr/dist/l10n/vn.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>

<script>
    let selectedFilesArray = []; // Mảng lưu trữ file đã chọn

    // Function to fetch already registered dates
    async function fetchAlreadyRegisteredDates() {
        try {
            const response = await fetch('/api/Leave/GetAlreadyRegisteredDates', {
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }

            const result = await response.json();
            if (result.success) {
                return result.dates.map(dateStr => {
                    const date = new Date(dateStr);
                    return date.setHours(0, 0, 0, 0);
                });
            } else {
                console.error("API error:", result.message);
                return [];
            }
        } catch (error) {
            console.error("Error fetching registered dates:", error);
            return [];
        }
    }

    // Function to fetch holidays
    async function fetchHolidays() {
        try {
            const response = await fetch('/api/Leave/GetHolidays', {
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }

            const result = await response.json();
            if (result.success) {
                return result.holidays
                    .filter(holiday => holiday.trangThai === "Đã duyệt")
                    .map(holiday => ({
                        date: new Date(holiday.ngayLe).setHours(0, 0, 0, 0),
                        name: holiday.tenNgayLe,
                        days: holiday.soNgayNghi
                    }));
            } else {
                console.error("API error:", result.message);
                return [];
            }
        } catch (error) {
            console.error("Error fetching holidays:", error);
            return [];
        }
    }

    // Function to calculate holiday dates including compensation days
    function calculateHolidayDates(holidays) {
        const expandedHolidays = [];

        holidays.forEach(holiday => {
            const startDate = new Date(holiday.date);
            const days = holiday.days;

            for (let i = 0; i < days; i++) {
                const currentDate = new Date(startDate);
                currentDate.setDate(startDate.getDate() + i);
                const currentDateTime = currentDate.setHours(0, 0, 0, 0);

                expandedHolidays.push({
                    date: currentDateTime,
                    name: holiday.name
                });

                const dayOfWeek = currentDate.getDay();
                if (dayOfWeek === 0 || dayOfWeek === 6) {
                    let compensationDate = new Date(currentDate);
                    do {
                        compensationDate.setDate(compensationDate.getDate() + 1);
                    } while (compensationDate.getDay() === 0 || compensationDate.getDay() === 6);

                    expandedHolidays.push({
                        date: compensationDate.setHours(0, 0, 0, 0),
                        name: `${holiday.name} (Nghỉ bù)`
                    });
                }
            }
        });

        return expandedHolidays;
    }

    // Document Ready Event Handler
    document.addEventListener("DOMContentLoaded", async function () {
        console.log("DOM đã sẵn sàng, kiểm tra các phần tử...");

        const elements = [
            'pendingLeaveBody',
            'approvedLeaveBody',
            'rejectedLeaveBody',
            'pending-tab',
            'approved-tab',
            'rejected-tab'
        ];

        const missingElements = [];
        elements.forEach(id => {
            const element = document.getElementById(id);
            if (!element) {
                missingElements.push(id);
                console.error(`Không tìm thấy phần tử với ID: ${id}`);
            }
        });

        if (missingElements.length > 0) {
            console.error(`Thiếu ${missingElements.length} phần tử HTML cần thiết:`, missingElements);
        } else {
            console.log("Tất cả phần tử HTML cần thiết đều tồn tại.");
        }
        const registeredDates = await fetchAlreadyRegisteredDates();
        const holidays = await fetchHolidays();
        const expandedHolidays = calculateHolidayDates(holidays);

        console.log("Registered dates:", registeredDates);
        console.log("Holidays:", expandedHolidays);

        const getAuthToken = () => localStorage.getItem('jwtToken');

        const today = new Date().setHours(0, 0, 0, 0);
        const datePicker = flatpickr("#datePicker", {
            mode: "multiple",
            dateFormat: "Y-m-d",
            minDate: "today",
            locale: "vn",
            disable: [
                function (date) {
                    const isWeekend = (date.getDay() === 0 || date.getDay() === 6);
                    const dateTime = date.setHours(0, 0, 0, 0);
                    const isAlreadyRegistered = registeredDates.includes(dateTime);
                    const isHoliday = expandedHolidays.some(h => h.date === dateTime);
                    return isWeekend || isAlreadyRegistered || isHoliday;
                }
            ],
            onDayCreate: function (dObj, dStr, fp, dayElem) {
                const date = dayElem.dateObj;
                const dateTime = date.setHours(0, 0, 0, 0);

                // Xóa thuộc tính title để ngăn tooltip mặc định
                dayElem.removeAttribute('title');

                if (date.getDay() === 0 || date.getDay() === 6) {
                    dayElem.setAttribute("data-tooltip", "Không thể đăng ký nghỉ phép vào ngày cuối tuần");
                    dayElem.classList.add("weekend-day");
                }

                if (date < new Date().setHours(0, 0, 0, 0)) {
                    dayElem.setAttribute("data-tooltip", "Không thể đăng ký nghỉ phép vào ngày trong quá khứ");
                    dayElem.classList.add("past-day");
                }

                if (registeredDates.includes(dateTime)) {
                    dayElem.setAttribute("data-tooltip", "Bạn đã đăng ký nghỉ phép vào ngày này");
                    dayElem.classList.add("registered-day");
                }

                const holiday = expandedHolidays.find(h => h.date === dateTime);
                if (holiday) {
                    dayElem.setAttribute("data-tooltip", `Ngày lễ: ${holiday.name}`);
                    dayElem.classList.add("holiday");
                }
            },
            onClose: function (selectedDates) {
                const validDates = selectedDates.filter(date => {
                    const dateTime = date.setHours(0, 0, 0, 0);
                    const isHoliday = expandedHolidays.some(h => h.date === dateTime);
                    return date >= today && !registeredDates.includes(dateTime) && !isHoliday;
                });

                if (validDates.length !== selectedDates.length) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi chọn ngày',
                        text: 'Có ngày không hợp lệ trong lựa chọn của bạn!'
                    });
                    this.clear();
                }

                document.getElementById("selectedDates").textContent =
                    validDates.map(date => date.toLocaleDateString('vi-VN')).join(', ');

                // Check leave balance and update leave type dropdown
                updateLeaveTypeDropdown();
            }
        });

        document.getElementById("leaveForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = {
                leaveType: document.querySelector("[name='leaveType']").value,
                leaveReason: document.querySelector("[name='leaveReason']").value,
                selectedDates: datePicker.selectedDates.map(d => d.toLocaleDateString('sv-SE'))
            };

            if (!formData.selectedDates.length) {
                Swal.fire('Lỗi', 'Vui lòng chọn ít nhất 1 ngày nghỉ!', 'error');
                return;
            }

            if (availableLeaveBalance === 0 && formData.leaveType !== "2") { // Assuming "2" is the ID for "Nghỉ không lương"
                Swal.fire('Lỗi', 'Số dư phép năm đã hết! Chỉ có thể chọn Nghỉ không lương.', 'error');
                return;
            }

            try {
                const submitFormData = new FormData();
                const leaveRequestsData = formData.selectedDates.map(date => ({
                    NgayNghi: date,
                    LyDo: formData.leaveReason,
                    MaLoaiNgayNghi: parseInt(formData.leaveType)
                }));

                submitFormData.append('leaveRequestsJson', JSON.stringify(leaveRequestsData));
                selectedFilesArray.forEach(file => {
                    submitFormData.append('files', file);
                });

                const response = await fetch("/api/Leave/SubmitLeave", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${getAuthToken()}`
                    },
                    body: submitFormData
                });

                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Lỗi API');

                await Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: 'Đăng ký nghỉ phép thành công!'
                });

                const newRegisteredDates = await fetchAlreadyRegisteredDates();
                const newHolidays = await fetchHolidays();
                const newExpandedHolidays = calculateHolidayDates(newHolidays);

                registeredDates.length = 0;
                registeredDates.push(...newRegisteredDates);
                expandedHolidays.length = 0;
                expandedHolidays.push(...newExpandedHolidays);

                datePicker.destroy();
                flatpickr("#datePicker", {
                    mode: "multiple",
                    dateFormat: "Y-m-d",
                    minDate: "today",
                    locale: "vn",
                    disable: [
                        function (date) {
                            const isWeekend = (date.getDay() === 0 || date.getDay() === 6);
                            const dateTime = date.setHours(0, 0, 0, 0);
                            const isAlreadyRegistered = registeredDates.includes(dateTime);
                            const isHoliday = expandedHolidays.some(h => h.date === dateTime);
                            return isWeekend || isAlreadyRegistered || isHoliday;
                        }
                    ],
                    onDayCreate: function (dObj, dStr, fp, dayElem) {
                        const date = dayElem.dateObj;
                        const dateTime = date.setHours(0, 0, 0, 0);

                        // Xóa thuộc tính title để ngăn tooltip mặc định
                        dayElem.removeAttribute('title');

                        if (date.getDay() === 0 || date.getDay() === 6) {
                            dayElem.setAttribute("data-tooltip", "Không thể đăng ký nghỉ phép vào ngày cuối tuần");
                            dayElem.classList.add("weekend-day");
                        }

                        if (date < new Date().setHours(0, 0, 0, 0)) {
                            dayElem.setAttribute("data-tooltip", "Không thể đăng ký nghỉ phép vào ngày trong quá khứ");
                            dayElem.classList.add("past-day");
                        }

                        if (registeredDates.includes(dateTime)) {
                            dayElem.setAttribute("data-tooltip", "Bạn đã đăng ký nghỉ phép vào ngày này");
                            dayElem.classList.add("registered-day");
                        }

                        const holiday = expandedHolidays.find(h => h.date === dateTime);
                        if (holiday) {
                            dayElem.setAttribute("data-tooltip", `Ngày lễ: ${holiday.name}`);
                            dayElem.classList.add("holiday");
                        }
                    },
                    onClose: function (selectedDates) {
                        const validDates = selectedDates.filter(date => {
                            const dateTime = date.setHours(0, 0, 0, 0);
                            const isHoliday = expandedHolidays.some(h => h.date === dateTime);
                            return date >= today && !registeredDates.includes(dateTime) && !isHoliday;
                        });

                        if (validDates.length !== selectedDates.length) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Lỗi chọn ngày',
                                text: 'Có ngày không hợp lệ trong lựa chọn của bạn!'
                            });
                            this.clear();
                        }

                        document.getElementById("selectedDates").textContent =
                            validDates.map(date => date.toLocaleDateString('vi-VN')).join(', ');

                        // Update leave type dropdown after date selection
                        updateLeaveTypeDropdown();
                    }
                });

                fetchLeaveHistory();

            } catch (error) {
                console.error('Submit error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi hệ thống',
                    text: error.message || 'Vui lòng thử lại sau!'
                });
            }
        });

        document.getElementById('fileAttachments')?.addEventListener('change', function (e) {
            const newFiles = Array.from(this.files);
            selectedFilesArray = selectedFilesArray.concat(newFiles);
            updateSelectedFilesUI();
        });

        function updateSelectedFilesUI() {
            const fileList = document.getElementById('selectedFiles');
            fileList.innerHTML = '';

            if (selectedFilesArray.length > 0) {
                const fileCount = document.createElement('div');
                fileCount.className = 'mb-2';
                fileCount.innerHTML = `<strong>Đã chọn ${selectedFilesArray.length} file:</strong>`;
                fileList.appendChild(fileCount);

                const list = document.createElement('ul');
                list.className = 'list-group';

                selectedFilesArray.forEach(file => {
                    const item = document.createElement('li');
                    item.className = 'list-group-item d-flex justify-content-between align-items-center';

                    const fileInfo = document.createElement('div');
                    fileInfo.innerHTML = `
                                <i class="fas fa-file me-2"></i>
                                ${file.name}
                                <span class="badge bg-secondary rounded-pill">${formatFileSize(file.size)}</span>
                            `;

                    item.appendChild(fileInfo);
                    list.appendChild(item);
                });

                fileList.appendChild(list);
            }
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        if (typeof bootstrap === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js';
            script.onload = initializeTabs;
            document.head.appendChild(script);
        } else {
            initializeTabs();
        }

        function initializeTabs() {
            console.log("Khởi tạo tabs...");
            const tabElements = document.querySelectorAll('button[data-bs-toggle="tab"]');
            console.log(`Tìm thấy ${tabElements.length} tab elements`);

            if (tabElements.length === 0) {
                console.error("Không tìm thấy tab nào. Kiểm tra HTML của bạn.");
                return;
            }

            tabElements.forEach((tabElement, index) => {
                console.log(`Tab ${index + 1}: target = ${tabElement.getAttribute('data-bs-target')}`);

                tabElement.addEventListener('click', function (event) {
                    event.preventDefault();
                    const targetId = this.getAttribute('data-bs-target');
                    console.log(`Đã click vào tab với target: ${targetId}`);

                    tabElements.forEach(tab => {
                        tab.classList.remove('active');
                        const tabPaneId = tab.getAttribute('data-bs-target');
                        const tabPane = document.querySelector(tabPaneId);
                        if (tabPane) {
                            tabPane.classList.remove('show', 'active');
                        } else {
                            console.error(`Không tìm thấy tab pane với ID: ${tabPaneId}`);
                        }
                    });

                    this.classList.add('active');
                    const targetPane = document.querySelector(targetId);
                    if (targetPane) {
                        targetPane.classList.add('show', 'active');
                        console.log(`Đã kích hoạt tab pane: ${targetId}`);
                    } else {
                        console.error(`Không tìm thấy tab pane mục tiêu: ${targetId}`);
                    }

                    const tabId = targetId.substring(1);
                    renderTable(tabId);
                });
            });

            if (tabElements.length > 0) {
                const firstTab = tabElements[0];
                firstTab.classList.add('active');
                const firstTabPaneId = firstTab.getAttribute('data-bs-target');
                const firstTabPane = document.querySelector(firstTabPaneId);
                if (firstTabPane) {
                    firstTabPane.classList.add('show', 'active');
                    console.log(`Đã kích hoạt tab đầu tiên: ${firstTabPaneId}`);
                } else {
                    console.error(`Không tìm thấy tab pane đầu tiên: ${firstTabPaneId}`);
                }
            }
        }

        try {
            const response = await fetch("/api/Leave/GetLeaveTypes");
            const result = await response.json();

            if (result && result.success && Array.isArray(result.leaveTypes)) {
                const leaveTypeSelect = document.getElementById("leaveTypeSelect");
                leaveTypeSelect.innerHTML = '<option value="">Chọn loại nghỉ</option>';

                result.leaveTypes.forEach(leaveType => {
                    const option = document.createElement("option");
                    option.value = leaveType.maLoaiNgayNghi;
                    option.textContent = leaveType.tenLoai;
                    leaveTypeSelect.appendChild(option);
                });

                // Initialize leave type dropdown based on leave balance
                updateLeaveTypeDropdown();
            } else {
                console.error("Lỗi dữ liệu:", result);
                alert("Dữ liệu không hợp lệ.");
            }
        } catch (error) {
            console.error("Lỗi hệ thống:", error);
            alert("Lỗi hệ thống. Vui lòng thử lại sau.");
        }

        // Số ngày còn lại
        fetch('/api/Leave/SoNgayConLai')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Lỗi khi lấy dữ liệu');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    availableLeaveBalance = data.soNgayConLai;
                    const soNgayConLaiElement = document.querySelector('.leave-enhanced-card .so-ngay-con-lai');
                    const soNgayPhepDuocCapElement = document.querySelector('.leave-enhanced-card .so-ngay-phep-duoc-cap');
                    const soNgayDaSuDungElement = document.querySelector('.leave-enhanced-card .so-ngay-da-su-dung');
                    if (soNgayConLaiElement) {
                        soNgayConLaiElement.textContent = `${data.soNgayConLai} ngày`;
                    }
                    if (soNgayPhepDuocCapElement) {
                        soNgayPhepDuocCapElement.textContent = `${data.soNgayPhepDuocCap} ngày`;
                    }
                    if (soNgayDaSuDungElement) {
                        soNgayDaSuDungElement.textContent = `${data.soNgayDaSuDung} ngày`;
                    }
                    showLeaveBalanceWarnings();
                    updateLeaveTypeDropdown();
                } else {
                    console.error('Lỗi:', data.message);
                }
            })
            .catch(error =>
                console.error('Lỗi:', error)
            );
        fetchLeaveHistory();
    });

    let availableLeaveBalance = 0;
    let leaveHistory = [];
    const tabData = {
        pending: { currentPage: 1, itemsPerPage: 5, filteredData: [] },
        approved: { currentPage: 1, itemsPerPage: 5, filteredData: [] },
        rejected: { currentPage: 1, itemsPerPage: 5, filteredData: [] }
    };

    async function fetchLeaveHistory() {
        try {
            console.log("Đang gọi API lấy lịch sử nghỉ phép...");

            const token = localStorage.getItem('jwtToken');
            console.log("Token hiện tại:", token ? "Có token" : "Không có token");

            const response = await fetch('/api/Leave/GetLeaveHistory', {
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            });

            console.log("Kết quả API:", response.status, response.statusText);

            if (!response.ok) {
                if (response.status === 401) {
                    console.error("Lỗi xác thực. Đang chuyển hướng đến trang đăng nhập.");
                    window.location.href = '/login';
                    return;
                }
                throw new Error(`Lỗi HTTP: ${response.status} - ${response.statusText}`);
            }

            const result = await response.json();
            console.log("Dữ liệu API trả về:", JSON.stringify(result, null, 2));

            if (result?.success && Array.isArray(result.leaveHistory)) {
                console.log(`Nhận được ${result.leaveHistory.length} bản ghi từ API.`);

                // Kiểm tra chi tiết từng bản ghi
                result.leaveHistory.forEach((item, index) => {
                    console.log(`Bản ghi ${index + 1}:`, JSON.stringify(item, null, 2));
                });

                leaveHistory = result.leaveHistory;

                // Kiểm tra các trường dữ liệu quan trọng
                const sampleRecord = leaveHistory[0];
                if (sampleRecord) {
                    console.log("Kiểm tra trường dữ liệu quan trọng:");
                    console.log("- id:", sampleRecord.id);
                    console.log("- ngayNghi:", sampleRecord.ngayNghi);
                    console.log("- trangThai:", sampleRecord.trangThai);
                    console.log("- tenLoai:", sampleRecord.tenLoai);
                    console.log("- lyDo:", sampleRecord.lyDo);
                }

                tabData.pending.filteredData = leaveHistory.filter(item => item.trangThai === "Chờ duyệt");
                tabData.approved.filteredData = leaveHistory.filter(item => item.trangThai === "Đã duyệt");
                tabData.rejected.filteredData = leaveHistory.filter(item => item.trangThai === "Từ chối");

                console.log("Dữ liệu sau khi phân loại:", {
                    "Chờ duyệt": tabData.pending.filteredData.length,
                    "Đã duyệt": tabData.approved.filteredData.length,
                    "Từ chối": tabData.rejected.filteredData.length
                });

                renderTable('pending');
                renderTable('approved');
                renderTable('rejected');

                updateTabBadges();
                setupPaginationControls();
            } else {
                console.error("Lỗi định dạng dữ liệu:", result);
                displayError("Không có dữ liệu nghỉ phép hoặc định dạng không đúng", ['pendingLeaveBody', 'approvedLeaveBody', 'rejectedLeaveBody']);
            }
        } catch (error) {
            console.error("Lỗi khi gọi API:", error);
            displayError("Lỗi kết nối server: " + error.message, ['pendingLeaveBody', 'approvedLeaveBody', 'rejectedLeaveBody']);
        }
    }

    function updateTabBadges() {
        const pendingCount = tabData.pending.filteredData.length;
        const approvedCount = tabData.approved.filteredData.length;
        const rejectedCount = tabData.rejected.filteredData.length;

        updateBadge('pending-tab', pendingCount, 'pending-badge');
        updateBadge('approved-tab', approvedCount, 'approved-badge');
        updateBadge('rejected-tab', rejectedCount, 'rejected-badge');
    }

    function updateBadge(tabId, count, badgeClass) {
        const tabElement = document.getElementById(tabId);
        if (!tabElement) return;

        const existingBadge = tabElement.querySelector('.tab-badge');
        if (existingBadge) {
            existingBadge.remove();
        }

        const badge = document.createElement('span');
        badge.className = `tab-badge ${badgeClass}`;
        badge.textContent = count;
        tabElement.appendChild(badge);
    }

    function displayError(message, tableBodyIds) {
        tableBodyIds.forEach(id => {
            const tableBody = document.getElementById(id);
            if (tableBody) {
                tableBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">${message}</td></tr>`;
            }
        });
    }

    function renderTable(tabId) {
        console.log(`Đang render bảng cho tab: ${tabId}`);

        const tableBodyId = `${tabId}LeaveBody`;
        const tableBody = document.getElementById(tableBodyId);

        if (!tableBody) {
            console.error(`Không tìm thấy phần tử với ID: ${tableBodyId}`);
            return;
        }

        tableBody.innerHTML = "";
        console.log(`Đã xóa nội dung bảng ${tableBodyId}`);

        const { currentPage, itemsPerPage, filteredData } = tabData[tabId];
        console.log(`Dữ liệu ${tabId}: ${filteredData.length} mục, trang ${currentPage}, mỗi trang ${itemsPerPage} mục`);

        const paginatedData = paginateData(filteredData, currentPage, itemsPerPage);
        console.log(`Sau phân trang: ${paginatedData.length} mục để hiển thị`);

        if (paginatedData.length === 0) {
            let colspan = 6;
            if (tabId === 'approved' || tabId === 'rejected') colspan = 8;
            tableBody.innerHTML = `<tr><td colspan="${colspan}" class="text-center">Không có đơn nào trong danh sách này</td></tr>`;
            console.log(`Không có dữ liệu để hiển thị cho tab ${tabId}`);
        } else {
            console.log(`Hiển thị ${paginatedData.length} bản ghi cho tab ${tabId}`);
            paginatedData.forEach((item, index) => {
                try {
                    // Hỗ trợ các biến thể tên trường có thể có
                    const id = item.id || item.Id || item.maDon || item.MaDon || "";
                    const tenLoai = item.tenLoai || item.TenLoai || item.loaiNghi || item.LoaiNghi || "Không xác định";
                    const ngayNghi = item.ngayNghi || item.NgayNghi || item.ngay || item.Ngay || "Không xác định";
                    const lyDo = item.lyDo || item.LyDo || item.moTa || item.MoTa || "Không có lý do";
                    const trangThai = item.trangThai || item.TrangThai || "Không xác định";
                    const fileDinhKem = item.fileDinhKem || item.FileDinhKem || item.files || item.Files || "";
                    const ngayDuyet = item.ngayDuyet || item.NgayDuyet || "";
                    const ghiChu = item.ghiChu || item.GhiChu || item.noiDungPhanHoi || item.NoiDungPhanHoi || "Không có ghi chú";
                    const nguoiDuyetHoTen = item.nguoiDuyetHoTen || item.NguoiDuyetHoTen || item.nguoiDuyet || item.NguoiDuyet || "Chưa có";

                    console.log(`Dữ liệu dòng ${index + 1} của tab ${tabId}:`, {
                        id, tenLoai, ngayNghi, lyDo, trangThai, fileDinhKem, ngayDuyet, ghiChu, nguoiDuyetHoTen
                    });

                    const fileDisplayHtml = generateFileDisplayHtml(fileDinhKem);
                    const ngayDuyetFormatted = ngayDuyet ? formatDate(ngayDuyet) : "Chưa duyệt";

                    const row = document.createElement("tr");
                    if (tabId === 'pending') {
                        const cancelButton = `<button class="btn-cancel" data-id="${id}">
                                            <i class="fas fa-times-circle"></i>
                                            <span>Hủy đơn</span>
                                        </button>`;
                        row.innerHTML = `
                            <td>${tenLoai}</td>
                            <td>${formatDate(ngayNghi)}</td>
                            <td>${lyDo}</td>
                            <td><span class="status ${getStatusClass(trangThai)}">${trangThai}</span></td>
                            <td>${fileDisplayHtml}</td>
                            <td>${cancelButton}</td>
                        `;
                    } else {
                        row.innerHTML = `
                            <td>${tenLoai}</td>
                            <td>${formatDate(ngayNghi)}</td>
                            <td>${lyDo}</td>
                            <td><span class="status ${getStatusClass(trangThai)}">${trangThai}</span></td>
                            <td>${fileDisplayHtml}</td>
                            <td>${ngayDuyetFormatted}</td>
                            <td>${ghiChu}</td>
                            <td>${nguoiDuyetHoTen}</td>
                        `;
                    }
                    tableBody.appendChild(row);
                } catch (error) {
                    console.error(`Lỗi khi tạo dòng ${index} cho tab ${tabId}:`, error, item);
                }
            });
        }

        try {
            document.querySelectorAll(`#${tableBodyId} .btn-cancel`).forEach(btn => {
                btn.addEventListener('click', function () {
                    const leaveId = this.getAttribute('data-id');
                    cancelLeaveRequest(leaveId);
                });
            });

            document.querySelectorAll(`#${tableBodyId} .file-link`).forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const filePath = this.getAttribute('data-path');
                    viewFile(filePath);
                });
            });

            initializeDropdowns();
            updatePaginationControls(tabId);
            console.log(`Hoàn thành render tab ${tabId}`);
        } catch (error) {
            console.error(`Lỗi khi thiết lập sự kiện cho tab ${tabId}:`, error);
        }
    }

    function generateFileDisplayHtml(fileDinhKem) {
        if (!fileDinhKem) {
            return '<span class="text-muted">Không có</span>';
        }

        const files = fileDinhKem.split('-');
        if (files.length === 0 || (files.length === 1 && !files[0].trim())) {
            return '<span class="text-muted">Không có</span>';
        }

        if (files.length === 1) {
            return `<a href="#" class="file-link" data-path="/Uploads/${files[0]}">
                                <i class="fas fa-file me-1"></i>${truncateFileName(files[0])}
                            </a>`;
        } else {
            const uniqueId = `dropdown-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
            let fileListHtml = `<div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button"
                                                id="${uniqueId}" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="fas fa-paperclip me-1"></i>${files.length} files
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="${uniqueId}">`;
            files.forEach(file => {
                fileListHtml += `<li>
                                          <a class="dropdown-item file-link" href="#" data-path="/Uploads/${file}">
                                            <i class="fas fa-file me-1"></i>${truncateFileName(file)}
                                          </a>
                                        </li>`;
            });
            fileListHtml += `</ul></div>`;
            return fileListHtml;
        }
    }

    function initializeDropdowns() {
        if (typeof bootstrap !== 'undefined') {
            const dropdownElements = document.querySelectorAll('.dropdown-toggle');
            dropdownElements.forEach(dropdownToggleEl => {
                if (!dropdownToggleEl._dropdown) {
                    new bootstrap.Dropdown(dropdownToggleEl);
                }
            });
        } else {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js';
            script.onload = initializeDropdowns;
            document.head.appendChild(script);
        }
    }

    function truncateFileName(fileName) {
        const maxLength = 15;
        if (fileName.length <= maxLength) {
            return fileName;
        }

        const extension = fileName.split('.').pop();
        const nameWithoutExt = fileName.substring(0, fileName.length - extension.length - 1);

        if (nameWithoutExt.length <= maxLength - 5) {
            return fileName;
        }

        return `${nameWithoutExt.substring(0, maxLength - 5)}...${extension}`;
    }

    function viewFile(filePath) {
        const extension = filePath.split('.').pop().toLowerCase();
        const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg'];

        if (imageExtensions.includes(extension)) {
            Swal.fire({
                title: 'Xem file',
                html: `<img src="${filePath}" class="img-fluid" alt="Preview">`,
                width: 800,
                showCloseButton: true,
                showConfirmButton: false
            });
        } else {
            window.open(filePath, '_blank');
        }
    }

    async function cancelLeaveRequest(leaveId) {
        try {
            const result = await Swal.fire({
                title: 'Xác nhận hủy đơn',
                text: "Bạn có chắc chắn muốn hủy đơn nghỉ phép này?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Đồng ý hủy',
                cancelButtonText: 'Không'
            });

            if (result.isConfirmed) {
                const response = await fetch(`/api/Leave/CancelLeave/${leaveId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire(
                        'Đã hủy!',
                        'Đơn nghỉ phép đã được hủy thành công.',
                        'success'
                    );
                    fetchLeaveHistory();
                } else {
                    Swal.fire(
                        'Lỗi!',
                        data.message || 'Không thể hủy đơn nghỉ phép.',
                        'error'
                    );
                }
            }
        } catch (error) {
            console.error('Lỗi khi hủy đơn:', error);
            Swal.fire(
                'Lỗi hệ thống',
                'Đã xảy ra lỗi, vui lòng thử lại sau.',
                'error'
            );
        }
    }

    function formatDate(dateString) {
        if (!dateString) return '';
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        } catch (error) {
            console.error('Error formatting date:', error);
            return dateString;
        }
    }

    function getStatusClass(status) {
        switch (status) {
            case 'Chờ duyệt':
                return 'bg-warning-subtle';
            case 'Đã duyệt':
                return 'bg-success-subtle';
            case 'Từ chối':
                return 'bg-danger-subtle';
            default:
                return '';
        }
    }

    function showLeaveBalanceWarnings() {
        const leaveSection = document.getElementById("leaveSection");
        const leaveForm = document.getElementById("leaveForm");
        const existingAlert = document.getElementById("leaveBalanceAlert");

        // Remove existing alert if any
        if (existingAlert) {
            existingAlert.remove();
        }

        if (availableLeaveBalance === 0) {
            const alertMessage = document.createElement("div");
            alertMessage.id = "leaveBalanceAlert";
            alertMessage.className = "alert alert-danger mt-3";
            alertMessage.innerHTML = `
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>Thông báo:</strong> Số dư phép năm của bạn đã hết. Chỉ có thể đăng ký Nghỉ không lương.
            `;
            leaveSection.insertBefore(alertMessage, leaveForm.nextSibling);
        } else if (availableLeaveBalance < 5) {
            const alertMessage = document.createElement("div");
            alertMessage.id = "leaveBalanceAlert";
            alertMessage.className = "alert alert-warning mt-3";
            alertMessage.innerHTML = `
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>Cảnh báo:</strong> Số dư phép năm của bạn chỉ còn ${availableLeaveBalance} ngày.
            `;
            leaveSection.insertBefore(alertMessage, leaveForm.nextSibling);
        }
    }

    function updateLeaveTypeDropdown() {
        const leaveTypeSelect = document.getElementById("leaveTypeSelect");
        if (!leaveTypeSelect) return;

        if (availableLeaveBalance === 0) {
            // Assuming "Nghỉ không lương" has maLoaiNgayNghi = "2"
            Array.from(leaveTypeSelect.options).forEach(option => {
                if (option.value && option.value !== "2") {
                    option.disabled = true;
                    option.style.opacity = "0.5";
                } else {
                    option.disabled = false;
                    option.style.opacity = "1";
                }
            });
            leaveTypeSelect.value = "2"; // Auto-select "Nghỉ không lương"
        } else {
            Array.from(leaveTypeSelect.options).forEach(option => {
                option.disabled = false;
                option.style.opacity = "1";
            });
            if (leaveTypeSelect.value === "") {
                leaveTypeSelect.value = ""; // Keep default selection if no value selected
            }
        }
    }

    function setupPaginationControls() {
        ['pending', 'approved', 'rejected'].forEach(tabId => {
            setupPaginationForTab(tabId);
        });
    }

    function setupPaginationForTab(tabId) {
        const prevButton = document.getElementById(`${tabId}PrevPage`);
        const nextButton = document.getElementById(`${tabId}NextPage`);

        if (!prevButton || !nextButton) {
            console.error(`Pagination buttons not found for ${tabId}`);
            return;
        }

        prevButton.replaceWith(prevButton.cloneNode(true));
        nextButton.replaceWith(nextButton.cloneNode(true));

        const newPrevButton = document.getElementById(`${tabId}PrevPage`);
        const newNextButton = document.getElementById(`${tabId}NextPage`);

        newPrevButton.addEventListener('click', function () {
            if (tabData[tabId].currentPage > 1) {
                tabData[tabId].currentPage--;
                renderTable(tabId);
            }
        });

        newNextButton.addEventListener('click', function () {
            const totalPages = Math.ceil(tabData[tabId].filteredData.length / tabData[tabId].itemsPerPage);
            if (tabData[tabId].currentPage < totalPages) {
                tabData[tabId].currentPage++;
                renderTable(tabId);
            }
        });
    }

    function updatePaginationControls(tabId) {
        const { currentPage, itemsPerPage, filteredData } = tabData[tabId];
        const totalPages = Math.ceil(filteredData.length / itemsPerPage);

        const pageInfoElement = document.getElementById(`${tabId}PageInfo`);
        if (pageInfoElement) {
            pageInfoElement.textContent = `Trang ${currentPage} / ${Math.max(totalPages, 1)}`;
        }

        const prevButton = document.getElementById(`${tabId}PrevPage`);
        if (prevButton) {
            prevButton.disabled = currentPage <= 1;
        }

        const nextButton = document.getElementById(`${tabId}NextPage`);
        if (nextButton) {
            nextButton.disabled = currentPage >= totalPages || totalPages === 0;
        }
    }

    function paginateData(data, page, itemsPerPage) {
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        return data.slice(startIndex, endIndex);
    }
</script>