@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <title>Quản Lý Nghỉ Phép</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
        }

        .title {
            font-size: 28px;
            font-weight: bold;
            margin: 25px 0;
            text-align: center;
            color: #1e88e5;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }

        .tabs {
            display: flex;
            background-color: #ffffff;
            border-bottom: 2px solid #e3e6f0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            margin-bottom: 20px;
        }

        .tab {
            padding: 15px 25px;
            cursor: pointer;
            font-weight: 500;
            color: #495057;
            transition: all 0.3s ease;
            position: relative;
        }

            .tab.active {
                background-color: #ffffff;
                color: #1e88e5;
                font-weight: 600;
            }

                .tab.active::after {
                    content: '';
                    position: absolute;
                    bottom: -2px;
                    left: 0;
                    width: 100%;
                    height: 3px;
                    background-color: #1e88e5;
                }

        .search-bar {
            display: flex;
            padding: 20px;
            background-color: #ffffff;
            align-items: center;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            margin-bottom: 20px;
        }

        .search-input {
            flex-grow: 1;
            padding: 12px 15px;
            border: 1px solid #e3e6f0;
            border-radius: 6px;
            margin-right: 15px;
            font-size: 0.95rem;
            transition: all 0.3s ease;
        }

            .search-input:focus {
                border-color: #1e88e5;
                box-shadow: 0 0 0 3px rgba(30,136,229,0.1);
                outline: none;
            }

        .filter-container {
            display: flex;
            gap: 15px;
        }

        .filter-select {
            padding: 12px 15px;
            border: 1px solid #e3e6f0;
            border-radius: 6px;
            font-size: 0.95rem;
            color: #495057;
            background-color: #ffffff;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .filter-select:focus {
                border-color: #1e88e5;
                box-shadow: 0 0 0 3px rgba(30,136,229,0.1);
                outline: none;
            }

        .statistics {
            display: flex;
            gap: 20px;
            margin-bottom: 25px;
        }

        .stat-card {
            flex: 1;
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }

            .stat-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            }

            .stat-card h3 {
                margin: 0 0 15px 0;
                color: #495057;
                font-size: 1rem;
                font-weight: 500;
            }

        .stat-number {
            font-size: 28px;
            font-weight: bold;
            color: #1e88e5;
        }

        .leave-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            background-color: #ffffff;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

            .leave-table th {
                background-color: #f8f9fa;
                text-align: center;
                vertical-align: middle;
                padding: 15px;
                border-bottom: 2px solid #e3e6f0;
                color: #495057;
                font-weight: 600;
            }

            .leave-table td {
                padding: 15px;
                border-bottom: 1px solid #e3e6f0;
                text-align: center;
                vertical-align: middle;
                color: #2c3e50;
            }

            .leave-table tr:hover {
                background-color: #f8f9fa;
            }

        .leave-status {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 0.95rem;
            text-align: center;
            min-width: 120px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .leave-status-pending {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeeba;
        }

        .leave-status-approved {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .leave-status-rejected {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .leave-status-canceled {
            background-color: #e9ecef;
            color: #6c757d;
            border: 1px solid #dee2e6;
        }

        /* Thêm style cho trạng thái không hưởng lương */
        .leave-status-no-salary {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        /* Style cho dòng chứa trạng thái không hưởng lương */
        tr[data-status="NN5"] {
            background-color: #ffe5e5 !important;
        }

        tr[data-status="NN5"]:hover {
            background-color: #ffe5e5 !important;
        }

        .btn {
            padding: 10px 20px;
            border-radius: 6px;
            font-weight: 500;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
        }

        .btn-approve {
            background-color: #1e88e5;
            color: white;
        }

            .btn-approve:hover {
                background-color: #1976d2;
                transform: translateY(-1px);
                box-shadow: 0 4px 8px rgba(30,136,229,0.2);
            }

        .btn-reject {
            background-color: #dc3545;
            color: white;
        }

            .btn-reject:hover {
                background-color: #c82333;
                transform: translateY(-1px);
                box-shadow: 0 4px 8px rgba(220,53,69,0.2);
            }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }

            .btn-secondary:hover {
                background-color: #5a6268;
                transform: translateY(-1px);
                box-shadow: 0 4px 8px rgba(108,117,125,0.2);
            }

        .action-buttons {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 12px;
        }

        .action-icon {
            font-size: 18px;
            cursor: pointer;
            transition: all 0.3s ease;
            padding: 8px;
            border-radius: 6px;
        }

            .action-icon.approve {
                color: #1e88e5;
            }

            .action-icon.reject {
                color: #dc3545;
            }

            .action-icon.details {
                color: #6c757d;
            }

            .action-icon:hover {
                transform: translateY(-2px);
                background-color: #f8f9fa;
            }

        .pagination {
            display: flex;
            justify-content: center;
            gap: 8px;
            margin: 25px auto;
            padding: 15px;
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            width: fit-content;
        }

            .pagination button {
                min-width: 40px;
                padding: 8px 12px;
                border: 1px solid #e3e6f0;
                background: white;
                color: #495057;
                transition: all 0.3s ease;
                border-radius: 6px;
                font-weight: 500;
            }

                .pagination button.active {
                    background: #1e88e5;
                    color: white;
                    border-color: #1e88e5;
                }

                .pagination button:hover:not(:disabled) {
                    background: #f8f9fa;
                    transform: translateY(-1px);
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            width: 600px;
            max-width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e9ecef;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
            padding-top: 10px;
            border-top: 1px solid #e9ecef;
        }

        .close {
            cursor: pointer;
            font-size: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: 500;
            }

        .form-control {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .detail-label {
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .detail-value {
            margin-bottom: 15px;
            color: #555;
            word-break: break-word;
        }

        .dropdown-menu {
            max-height: 200px;
            overflow-y: auto;
        }

        #detailsModal.modal.fade {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.65);
            z-index: 1050;
            overflow: hidden;
            backdrop-filter: blur(5px);
        }

            #detailsModal.modal.fade.show {
                display: flex;
                align-items: center;
                justify-content: center;
                animation: fadeIn 0.3s ease forwards;
            }

        #detailsModal .modal-dialog {
            margin: 0 auto;
            max-width: 800px;
            width: 90%;
            margin-top: 50px;
        }

        #detailsModal .modal-content {
            background-color: #ffffff;
            border-radius: 16px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            border: none;
            overflow: hidden;
        }

        #detailsModal .modal-header {
            background-color: #1e88e5;
            border-bottom: none;
            padding: 20px 25px;
        }

        #detailsModal .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #ffffff;
            margin: 0;
        }

        #detailsModal .modal-body {
            padding: 25px;
            max-height: 70vh;
            overflow-y: auto;
            background-color: #f8f9fa;
        }

        #detailsModal .detail-section {
            margin-bottom: 25px;
            padding: 20px;
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            border: 1px solid #e3e6f0;
        }

        #detailsModal .detail-section-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #1e88e5;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e3e6f0;
        }

        #detailsModal .detail-row {
            display: flex;
            margin-bottom: 15px;
            align-items: flex-start;
        }

        #detailsModal .detail-label {
            flex: 0 0 200px;
            font-weight: 500;
            color: #2c3e50;
            padding-right: 20px;
        }

        #detailsModal .detail-value {
            flex: 1;
            color: #2c3e50;
            line-height: 1.5;
        }

            #detailsModal .detail-value.status {
                display: flex;
                align-items: center;
                justify-content: center;
                min-width: 180px;
                max-width: 100%;
                padding: 8px 32px;
                border-radius: 8px;
                font-weight: 600;
                font-size: 0.95rem;
                text-align: center;
                background-clip: padding-box;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                word-break: break-word;
                white-space: normal;
            }

            #detailsModal .detail-value.status-pending {
                background-color: #fff3cd;
                color: #856404;
                border: 1px solid #ffeeba;
            }

            #detailsModal .detail-value.status-approved {
                background-color: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }

            #detailsModal .detail-value.status-rejected {
                background-color: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }

            #detailsModal .detail-value.status-canceled {
                background-color: #e9ecef;
                color: #6c757d;
                border: 1px solid #dee2e6;
            }

            #detailsModal .detail-value.status:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.15);
                transition: all 0.2s ease;
            }

            #detailsModal .detail-value.status::before {
                font-family: "Font Awesome 5 Free";
                font-weight: 900;
                margin-right: 8px;
            }

            #detailsModal .detail-value.status-pending::before {
                content: "\f017";
            }

            #detailsModal .detail-value.status-approved::before {
                content: "\f00c";
            }

            #detailsModal .detail-value.status-rejected::before {
                content: "\f00d";
            }

            #detailsModal .detail-value.status-canceled::before {
                content: "\f05e";
            }

        #detailsModal .modal-footer {
            padding: 20px 25px;
            background-color: #ffffff;
            border-top: 1px solid #e3e6f0;
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        #detailsModal .btn {
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 500;
            font-size: 0.95rem;
            transition: all 0.2s ease;
        }

        #detailsModal .btn-close {
            background: transparent;
            border: none;
            font-size: 1.5rem;
            color: #ffffff;
            opacity: 0.8;
            transition: opacity 0.2s ease;
        }

            #detailsModal .btn-close:hover {
                opacity: 1;
            }

        #detailsModal .attachment-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }

        #detailsModal .attachment-item {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            background: #f8f9fa;
            border: 1px solid #e3e6f0;
            border-radius: 6px;
            font-size: 0.9rem;
            color: #2c3e50;
            text-decoration: none;
            transition: all 0.2s ease;
        }

            #detailsModal .attachment-item:hover {
                background: #e3e6f0;
                border-color: #1e88e5;
            }

            #detailsModal .attachment-item i {
                margin-right: 8px;
                color: #1e88e5;
            }

        #detailsModal .detail-value.rejection-reason {
            color: #dc3545;
            font-weight: 500;
            padding: 10px;
            background-color: #fff5f5;
            border-left: 4px solid #dc3545;
            border-radius: 4px;
        }

        #detailsModal .btn-approve {
            background-color: #1e88e5;
            color: white;
            border: none;
        }

            #detailsModal .btn-approve:hover {
                background-color: #1976d2;
            }

        #detailsModal .btn-reject {
            background-color: #dc3545;
            color: white;
            border: none;
        }

            #detailsModal .btn-reject:hover {
                background-color: #c82333;
            }

        #detailsModal .btn-secondary {
            background-color: #6c757d;
            color: white;
            border: none;
        }

            #detailsModal .btn-secondary:hover {
                background-color: #5a6268;
            }

        /* Add these styles for the dropdown */
        .leave-dates-dropdown {
            position: relative;
            display: inline-block;
        }

        .leave-dates-dropdown .dropdown-toggle {
            background-color: #f8f9fa;
            border: 1px solid #e3e6f0;
            border-radius: 6px;
            padding: 8px 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .leave-dates-dropdown .dropdown-toggle:hover {
            background-color: #e9ecef;
        }

        .leave-dates-dropdown .dropdown-menu {
            position: absolute;
            top: 100%;
            left: 0;
            z-index: 1000;
            min-width: 200px;
            padding: 8px 0;
            margin: 4px 0 0;
            background-color: #fff;
            border: 1px solid rgba(0,0,0,.15);
            border-radius: 6px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            display: none;
        }

        .leave-dates-dropdown .dropdown-menu.show {
            display: block;
        }

        .leave-dates-dropdown .dropdown-item {
            padding: 8px 16px;
            color: #2c3e50;
            text-decoration: none;
            display: block;
            transition: background-color 0.2s ease;
        }

        .leave-dates-dropdown .dropdown-item:hover {
            background-color: #f8f9fa;
        }

        .leave-dates-dropdown .badge {
            background-color: #1e88e5;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
        }
    </style>
</head>
<body>
    <h2 class="title">Quản lý nghỉ phép</h2>

    <div class="tabs">
        <div class="tab active">Đang chờ duyệt</div>
        <div class="tab">Đã duyệt</div>
        <div class="tab">Tất cả đơn nghỉ phép</div>
        <div class="tab">Đơn bị hủy</div>
    </div>

    <div class="search-bar">
        <input type="text" class="search-input" placeholder="Tìm kiếm theo ngày làm đơn, tên...">
        <div class="filter-container">
            <select class="filter-select">
                <option>Trạng thái</option>
                <option>Chờ duyệt</option>
                <option>Đã duyệt</option>
                <option>Từ chối</option>
                <option>Đã hủy</option>
            </select>
            <select class="filter-select"></select>
        </div>
        <div class="batch-actions" style="margin-left: 10px;">
            <button class="btn btn-approve" id="batchApprove" disabled>Duyệt hàng loạt</button>
            <button class="btn btn-reject" id="batchReject" disabled data-bs-toggle="modal" data-bs-target="#batchRejectReasonModal">Từ chối hàng loạt</button>
        </div>
    </div>

    <div class="statistics">
        <div class="stat-card">
            <h3>Đơn chờ duyệt</h3>
            <div class="stat-number" id="pending-count">--</div>
        </div>
        <div class="stat-card">
            <h3>Đơn đã duyệt hôm nay</h3>
            <div class="stat-number" id="approved-today-count">--</div>
        </div>
        <div class="stat-card">
            <h3>Tổng đơn tháng <span id="current-month-year">--</span></h3>
            <div class="stat-number" id="current-month-count">--</div>
        </div>
    </div>

    <table class="leave-table">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAll"></th>
                <th>Mã Ngày Nghỉ</th>
                <th>Ngày Làm Đơn</th>
                <th>Tên Nhân Viên</th>
                <th>Ngày Nghỉ</th>
                <th>Lý Do</th>
                <th>File đính kèm</th>
                <th>Trạng Thái</th>
                <th>Số Dư Ngày Phép</th>
                <th>Thao Tác</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <!-- Modal lý do từ chối đơn lẻ -->
    <div class="modal fade" id="rejectReasonModal" tabindex="-1" aria-labelledby="rejectReasonModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="rejectReasonModalLabel">Lý do từ chối</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="rejectReason">Vui lòng nhập lý do từ chối:</label>
                        <textarea class="form-control" id="rejectReason" rows="4" placeholder="Nhập lý do từ chối..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="button" class="btn btn-danger" id="confirmReject">Xác nhận từ chối</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal lý do từ chối hàng loạt -->
    <div class="modal fade" id="batchRejectReasonModal" tabindex="-1" aria-labelledby="batchRejectReasonModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="batchRejectReasonModalLabel">Lý do từ chối hàng loạt</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="batchRejectReason">Vui lòng nhập lý do từ chối:</label>
                        <textarea class="form-control" id="batchRejectReason" rows="4" placeholder="Nhập lý do từ chối..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="button" class="btn btn-danger" id="confirmBatchReject">Xác nhận từ chối</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal chi tiết đơn nghỉ phép -->
    <div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detailsModalLabel">Chi tiết đơn nghỉ phép</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="detail-section">
                        <div class="detail-section-title">Thông tin cơ bản</div>
                        <div class="detail-row">
                            <div class="detail-label">Mã Đơn</div>
                            <div class="detail-value" id="detail-maDon">--</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Ngày Làm Đơn</div>
                            <div class="detail-value" id="detail-ngayCapNhat">--</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Tên Nhân Viên</div>
                            <div class="detail-value" id="detail-hoTen">--</div>
                        </div>
                    </div>

                    <div class="detail-section">
                        <div class="detail-section-title">Thông tin nghỉ phép</div>
                        <div class="detail-row">
                            <div class="detail-label">Danh Sách Ngày Nghỉ</div>
                            <div class="detail-value" id="detail-ngayNghiList">
                                <ul class="list-unstyled mb-0">
                                    <!-- Sẽ được điền bằng JavaScript -->
                                </ul>
                            </div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Tổng Số Ngày Nghỉ</div>
                            <div class="detail-value" id="detail-tongSoNgay">--</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Lý Do</div>
                            <div class="detail-value" id="detail-lyDo">--</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Số Dư Ngày Phép</div>
                            <div class="detail-value" id="detail-soNgayConLai">--</div>
                        </div>
                    </div>

                    <div class="detail-section">
                        <div class="detail-section-title">Trạng thái và tài liệu</div>
                        <div class="detail-row">
                            <div class="detail-label">Trạng Thái</div>
                            <div class="detail-value status" id="detail-trangThai">--</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">File Đính Kèm</div>
                            <div class="detail-value" id="detail-fileDinhKem">--</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Lý Do Hủy</div>
                            <div class="detail-value rejection-reason" id="detail-lyDoTuChoi">--</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Người Xử Lý</div>
                            <div class="detail-value" id="detail-ghiChu">--</div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-approve" id="modal-approve" style="display: none;">Duyệt</button>
                    <button type="button" class="btn btn-reject" id="modal-reject" style="display: none;" data-bs-toggle="modal" data-bs-target="#rejectReasonModal" data-ma-don="">Từ chối</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function updateStatus(maNgayNghi, trangThai, lyDo = null) {
            return fetch('/LeaveManager/UpdateStatus', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    maNgayNghi: maNgayNghi,
                    trangThai: trangThai,
                    ngayCapNhat: new Date(),
                    lyDo: lyDo
                })
            })
            .then(res => {
                if (!res.ok) {
                    return res.json().then(err => {
                        throw new Error(err.message || "Lỗi kết nối: " + res.statusText);
                    });
                }
                return res.json();
            });
        }

        document.addEventListener("DOMContentLoaded", function () {
            const tabs = document.querySelectorAll(".tab");
            const leaveTableBody = document.querySelector(".leave-table tbody");
            const searchInput = document.querySelector(".search-input");
            const statusFilter = document.querySelectorAll(".filter-select")[0];
            const monthFilter = document.querySelectorAll(".filter-select")[1];
            const selectAllCheckbox = document.getElementById("selectAll");
            const batchApproveButton = document.getElementById("batchApprove");
            const batchRejectButton = document.getElementById("batchReject");

            let currentPage = 1;
            const itemsPerPage = 10;
            let dataList = [];
            let originalData = [];

            const currentDate = new Date();
            const monthNames = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
            const currentMonthYear = `${monthNames[currentDate.getMonth()]}/${currentDate.getFullYear()}`;
            const monthYearElement = document.getElementById('current-month-year');
            if (monthYearElement) {
                monthYearElement.textContent = currentMonthYear;
            }

            fetchLeaveStatistics();
            setInterval(fetchLeaveStatistics, 300000);
            populateMonthFilter();

            const rejectReasonModal = document.getElementById('rejectReasonModal');
            if (rejectReasonModal) {
                rejectReasonModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    const maNgayNghi = button.getAttribute('data-ma-don');
                    this.setAttribute('data-ma-don', maNgayNghi);
                    document.getElementById('rejectReason').value = '';
                });

                document.getElementById('confirmReject').addEventListener('click', function () {
                    const modal = document.getElementById('rejectReasonModal');
                    const maNgayNghi = parseInt(modal.getAttribute('data-ma-don'));
                    const lyDo = document.getElementById('rejectReason').value.trim();

                    if (!lyDo) {
                        Swal.fire({
                            title: 'Thông báo',
                            text: 'Vui lòng nhập lý do từ chối',
                            icon: 'warning',
                            confirmButtonText: 'OK'
                        });
                        return;
                    }

                    Swal.fire({
                        title: 'Xác nhận từ chối',
                        text: 'Bạn có chắc chắn muốn từ chối đơn nghỉ phép này?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Xác nhận',
                        cancelButtonText: 'Hủy'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            updateStatus(maNgayNghi, 'Từ chối', lyDo)
                                .then(res => {
                                    if (res.success) {
                                        Swal.fire({
                                            title: 'Thành công',
                                            text: res.message,
                                            icon: 'success',
                                            confirmButtonText: 'OK'
                                        }).then(() => {
                                            location.reload();
                                        });
                                    } else {
                                        Swal.fire({
                                            title: 'Lỗi',
                                            text: "Lỗi: " + res.message,
                                            icon: 'error',
                                            confirmButtonText: 'OK'
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error("Lỗi khi gửi yêu cầu:", error);
                                    Swal.fire({
                                        title: 'Lỗi',
                                        text: 'Có lỗi xảy ra khi gửi yêu cầu.',
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    });
                                });
                        }
                    });

                    const modalInstance = bootstrap.Modal.getInstance(modal);
                    modalInstance.hide();
                });
            }

            const batchRejectReasonModal = document.getElementById('batchRejectReasonModal');
            if (batchRejectReasonModal) {
                batchRejectReasonModal.addEventListener('show.bs.modal', function () {
                    document.getElementById('batchRejectReason').value = '';
                });

                document.getElementById('confirmBatchReject').addEventListener('click', function () {
                    const lyDo = document.getElementById('batchRejectReason').value.trim();
                    if (!lyDo) {
                        Swal.fire({
                            title: 'Thông báo',
                            text: 'Vui lòng nhập lý do từ chối',
                            icon: 'warning',
                            confirmButtonText: 'OK'
                        });
                        return;
                    }

                    const selectedItems = document.querySelectorAll(".select-item:checked");
                    const maNgayNghiList = Array.from(selectedItems).map(item => parseInt(item.value));

                    if (maNgayNghiList.length === 0) {
                        Swal.fire({
                            title: 'Thông báo',
                            text: 'Vui lòng chọn ít nhất một đơn để từ chối',
                            icon: 'warning',
                            confirmButtonText: 'OK'
                        });
                        return;
                    }

                    Swal.fire({
                        title: 'Xác nhận từ chối hàng loạt',
                        text: `Bạn có chắc chắn muốn từ chối ${maNgayNghiList.length} đơn nghỉ phép đã chọn?`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Xác nhận',
                        cancelButtonText: 'Hủy'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch('/LeaveManager/BatchUpdateStatus', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    maNgayNghiList: maNgayNghiList,
                                    trangThai: 'Từ chối',
                                    lyDo: lyDo
                                })
                            })
                                .then(res => res.json())
                                .then(res => {
                                    if (res.success) {
                                        Swal.fire({
                                            title: 'Thành công',
                                            text: res.message,
                                            icon: 'success',
                                            confirmButtonText: 'OK'
                                        }).then(() => {
                                            location.reload();
                                        });
                                    } else {
                                        Swal.fire({
                                            title: 'Lỗi',
                                            text: res.message,
                                            icon: 'error',
                                            confirmButtonText: 'OK'
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    Swal.fire({
                                        title: 'Lỗi',
                                        text: 'Có lỗi xảy ra khi xử lý yêu cầu.',
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    });
                                });
                        }
                    });

                    const modalInstance = bootstrap.Modal.getInstance(batchRejectReasonModal);
                    modalInstance.hide();
                });
            }

            const detailsModal = document.getElementById('detailsModal');
            if (detailsModal) {
                detailsModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    const maNgayNghi = button.getAttribute('data-ma-don');
                    const item = dataList.find(d => d.maNgayNghi == maNgayNghi);

                    if (item) {
                        document.getElementById('detail-maDon').textContent = item.maNgayNghi ?? '--';
                        document.getElementById('detail-ngayCapNhat').textContent = item.ngayCapNhat ?? '--';
                        document.getElementById('detail-hoTen').textContent = item.hoTen ?? '--';
                        document.getElementById('detail-lyDo').textContent = item.lyDo ?? 'Không xác định';
                        document.getElementById('detail-trangThai').textContent = item.trangThai ?? '--';
                        document.getElementById('detail-soNgayConLai').textContent = item.soNgayConLai != null ? item.soNgayConLai : '--';
                        document.getElementById('detail-lyDoTuChoi').textContent = item.trangThai === 'Đã hủy' ? (item.lyDoHuy ?? '--') : (item.lyDoTuChoi ?? '--');
                        document.getElementById('detail-ghiChu').textContent = item.ghiChu ?? '--';
                        document.getElementById('detail-tongSoNgay').textContent = item.tongSoNgay ?? '--';

                        // Hiển thị danh sách ngày nghỉ
                        const ngayNghiList = document.getElementById('detail-ngayNghiList').querySelector('ul');
                        ngayNghiList.innerHTML = item.ngayNghiList.map(date => `
                            <li class="mb-2">
                                <i class="fas fa-calendar-alt text-primary me-2"></i>
                                ${date}
                            </li>
                        `).join('');

                        const fileDinhKemElement = document.getElementById('detail-fileDinhKem');
                        if (item.fileDinhKem && Array.isArray(item.fileDinhKem) && item.fileDinhKem.length > 0) {
                            const fileCount = item.fileDinhKem.length;
                            let fileList = '';
                            let modalContent = '';

                            item.fileDinhKem.forEach((file, index) => {
                                const isImage = isImageFile(file.fileName);
                                const fileIcon = isImage ? 'fa-file-image' : 'fa-file-alt';
                                const uniqueId = `detail-file-${item.maNgayNghi}-${index}`;

                                if (isImage) {
                                    fileList += `
                                        <li>
                                            <a class="dropdown-item" href="javascript:void(0)" data-bs-toggle="modal" data-bs-target="#imageModal-${uniqueId}">
                                                <i class="fas ${fileIcon}"></i> ${truncateFileName(file.fileName, 15)}
                                            </a>
                                        </li>`;
                                    modalContent += `
                                        <div class="modal fade" id="imageModal-${uniqueId}" tabindex="-1" aria-labelledby="imageModalLabel-${uniqueId}" aria-hidden="true">
                                            <div class="modal-dialog modal-dialog-centered modal-lg">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h5 class="modal-title" id="imageModalLabel-${uniqueId}">${file.fileName}</h5>
                                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                    </div>
                                                    <div class="modal-body text-center">
                                                        <img src="${file.filePath}" alt="${file.fileName}" class="img-fluid" style="max-width: 100%;">
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>`;
                                } else {
                                    fileList += `
                                        <li>
                                            <a class="dropdown-item" href="${file.filePath}" target="_blank">
                                                <i class="fas ${fileIcon}"></i> ${truncateFileName(file.fileName, 15)}
                                            </a>
                                        </li>`;
                                }
                            });

                            const attachmentContent = `
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" id="dropdownBtn-${item.maNgayNghi}" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-paperclip"></i> ${fileCount} file đính kèm
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownBtn-${item.maNgayNghi}">
                                        ${fileList}
                                    </ul>
                                </div>
                                ${modalContent}`;
                            fileDinhKemElement.innerHTML = attachmentContent;
                        } else {
                            fileDinhKemElement.textContent = 'Không có';
                        }

                        const isProcessed = item.trangThai === "Đã duyệt" || item.trangThai === "Đã duyệt (Không hưởng lương)" || item.trangThai === "Từ chối" || item.trangThai === "Đã hủy";
                        document.getElementById('modal-approve').style.display = isProcessed ? 'none' : 'block';
                        document.getElementById('modal-reject').style.display = isProcessed ? 'none' : 'block';
                        document.getElementById('modal-reject').setAttribute('data-ma-don', item.maNgayNghi);
                        detailsModal.setAttribute('data-ma-don', item.maNgayNghi);

                        const statusElement = document.getElementById('detail-trangThai');
                        statusElement.textContent = item.trangThai;
                        statusElement.className = 'detail-value status';

                        // Thêm class tương ứng với trạng thái
                        switch (item.trangThai) {
                            case 'Chờ duyệt':
                                statusElement.classList.add('status-pending');
                                break;
                            case 'Đã duyệt':
                                statusElement.classList.add('status-approved');
                                break;
                            case 'Từ chối':
                                statusElement.classList.add('status-rejected');
                                break;
                            case 'Đã hủy':
                                statusElement.classList.add('status-canceled');
                                break;
                        }
                    }
                });
            }

            function updateBatchButtonState() {
                const selectedItems = document.querySelectorAll(".select-item:checked");
                batchApproveButton.disabled = selectedItems.length === 0;
                batchRejectButton.disabled = selectedItems.length === 0;
            }

            selectAllCheckbox.addEventListener("change", function () {
                const checkboxes = document.querySelectorAll(".select-item");
                checkboxes.forEach(checkbox => {
                    if (!checkbox.disabled) {
                        checkbox.checked = this.checked;
                    }
                });
                updateBatchButtonState();
            });

            leaveTableBody.addEventListener("change", function (event) {
                if (event.target.classList.contains("select-item")) {
                    const allCheckboxes = document.querySelectorAll(".select-item");
                    const allChecked = Array.from(allCheckboxes).every(checkbox => checkbox.checked || checkbox.disabled);
                    selectAllCheckbox.checked = allChecked;
                    updateBatchButtonState();
                }
            });

            batchApproveButton.addEventListener("click", function () {
                const selectedItems = document.querySelectorAll(".select-item:checked");
                const maNgayNghiList = Array.from(selectedItems).map(item => parseInt(item.value));

                if (maNgayNghiList.length === 0) {
                    Swal.fire({
                        title: 'Thông báo',
                        text: 'Vui lòng chọn ít nhất một đơn để duyệt',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                    });
                    return;
                }

                Swal.fire({
                    title: 'Xác nhận duyệt hàng loạt',
                    text: `Bạn có chắc chắn muốn duyệt ${maNgayNghiList.length} đơn nghỉ phép đã chọn?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Xác nhận',
                    cancelButtonText: 'Hủy'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/LeaveManager/BatchUpdateStatus', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                maNgayNghiList: maNgayNghiList,
                                trangThai: 'Đã duyệt'
                            })
                        })
                        .then(res => {
                            if (!res.ok) {
                                return res.json().then(err => {
                                    throw new Error(err.message || "Lỗi kết nối");
                                });
                            }
                            return res.json();
                        })
                        .then(res => {
                            if (res.success) {
                                Swal.fire({
                                    title: 'Thành công',
                                    text: res.message,
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire({
                                    title: 'Lỗi',
                                    text: res.message,
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            }
                        })
                        .catch(error => {
                            Swal.fire({
                                title: 'Cảnh báo',
                                text: error.message,
                                icon: 'warning',
                                confirmButtonText: 'OK'
                            });
                        });
                    }
                });
            });

            function fetchLeaveStatistics() {
                fetch('/LeaveManager/GetSummary')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            document.getElementById('pending-count').textContent = data.data.pendingCount;
                            document.getElementById('approved-today-count').textContent = data.data.approvedTodayCount;
                            document.getElementById('current-month-count').textContent = data.data.currentMonthCount;
                        } else {
                            console.error('API returned success=false');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching leave statistics:', error);
                    });
            }

            function populateMonthFilter() {
                while (monthFilter.options.length > 1) {
                    monthFilter.remove(1);
                }

                const currentMonth = currentDate.getMonth();
                const currentYear = currentDate.getFullYear();
                const monthLabels = ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"];

                for (let i = 0; i < 6; i++) {
                    let month = currentMonth - i;
                    let year = currentYear;
                    if (month < 0) {
                        month = 12 + month;
                        year -= 1;
                    }
                    const option = document.createElement("option");
                    option.value = `${month + 1}/${year}`;
                    option.textContent = `${monthLabels[month]} ${year}`;
                    monthFilter.appendChild(option);
                }
            }

            function parseVietnameseDate(dateStr) {
                if (!dateStr) return null;
                const parts = dateStr.split('/');
                if (parts.length !== 3) return null;
                return new Date(parts[2], parts[1] - 1, parts[0]);
            }

            function sortByCreationDate(data, activeTab) {
                if (activeTab === "Chờ duyệt" || activeTab === null) {
                    return data.sort((a, b) => {
                        const ngayNghiA = parseVietnameseDate(a.ngayNghi);
                        const ngayNghiB = parseVietnameseDate(b.ngayNghi);

                        const currentDate = new Date();
                        currentDate.setHours(0, 0, 0, 0);

                        if (ngayNghiA && ngayNghiB) {
                            const aIsFuture = ngayNghiA >= currentDate;
                            const bIsFuture = ngayNghiB >= currentDate;

                            if (aIsFuture && !bIsFuture) return 1;
                            else if (!aIsFuture && bIsFuture) return -1;
                            else {
                                if (aIsFuture) return ngayNghiA - ngayNghiB;
                                else return ngayNghiB - ngayNghiA;
                            }
                        }

                        const dateA = parseVietnameseDate(a.ngayCapNhat);
                        const dateB = parseVietnameseDate(b.ngayCapNhat);

                        if (!dateA || !dateB) return 0;
                        return dateA - dateB;
                    });
                }
                return data;
            }

            function fetchData(statusFilter = null) {
                fetch("/LeaveManager/GetAll")
                    .then(res => res.json())
                    .then(res => {
                        if (res.success) {
                            originalData = res.data;
                            dataList = [...originalData];

                            const statusMap = {
                                "Chờ duyệt": "NN1",
                                "Đã duyệt": "NN2",
                                "Từ chối": "NN3",
                                "Đã hủy": "NN4"
                            };

                            if (statusFilter) {
                                const maTrangThai = statusMap[statusFilter];
                                if (maTrangThai) {
                                    dataList = dataList.filter(item => item.maTrangThai === maTrangThai);
                                } else {
                                    dataList = dataList.filter(item => item.trangThai === statusFilter);
                                }
                            }

                            dataList = sortByCreationDate(dataList, statusFilter);

                            document.querySelector(".search-input").value = "";
                            document.querySelectorAll(".filter-select")[0].selectedIndex = 0;
                            document.querySelectorAll(".filter-select")[1].selectedIndex = 0;
                            currentPage = 1;
                            renderTable(currentPage);
                            renderPagination();
                            updateBatchButtonState();
                        }
                    })
                    .catch(error => {
                        console.error("Error fetching data:", error);
                    });
            }

            function filterData() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                const selectedStatus = statusFilter.value === "Trạng thái" ? null : statusFilter.value;
                const selectedMonth = monthFilter.value === "Tháng" ? null : monthFilter.value;

                dataList = [...originalData];

                if (searchTerm) {
                    dataList = dataList.filter(item => {
                        // Tìm kiếm theo nhiều trường
                        return (
                            // Tìm theo tên nhân viên
                            (item.hoTen && item.hoTen.toLowerCase().includes(searchTerm)) ||
                            // Tìm theo mã ngày nghỉ
                            (item.maNgayNghi && item.maNgayNghi.toString().includes(searchTerm)) ||
                            // Tìm theo ngày làm đơn
                            (item.ngayCapNhat && item.ngayCapNhat.toLowerCase().includes(searchTerm)) ||
                            // Tìm theo lý do
                            (item.lyDo && item.lyDo.toLowerCase().includes(searchTerm)) ||
                            // Tìm theo trạng thái
                            (item.trangThai && item.trangThai.toLowerCase().includes(searchTerm)) ||
                            // Tìm theo danh sách ngày nghỉ
                            (item.ngayNghiList && item.ngayNghiList.some(date => date.toLowerCase().includes(searchTerm)))
                        );
                    });
                }

                if (selectedStatus) {
                    dataList = dataList.filter(item => item.trangThai === selectedStatus);
                }

                if (selectedMonth) {
                    const [month, year] = selectedMonth.split('/');
                    dataList = dataList.filter(item => {
                        // Kiểm tra tất cả các ngày nghỉ trong danh sách
                        return item.ngayNghiList.some(dateStr => {
                            const parts = dateStr.split('/');
                            if (parts.length !== 3) return false;
                            const itemDate = new Date(parts[2], parts[1] - 1, parts[0]);
                            return (itemDate.getMonth() + 1 == parseInt(month) && itemDate.getFullYear() == parseInt(year));
                        });
                    });
                }

                dataList = sortByCreationDate(dataList, selectedStatus);

                currentPage = 1;
                renderTable(currentPage);
                renderPagination();
                updateBatchButtonState();
            }

            searchInput.addEventListener("input", filterData);
            statusFilter.addEventListener("change", filterData);
            monthFilter.addEventListener("change", filterData);

            function truncateReason(text, maxLength) {
                if (!text || text === 'Không xác định') return text;
                return text.length > maxLength ? text.substring(0, maxLength - 3) + '...' : text;
            }

            function renderTable(page) {
                const start = (page - 1) * itemsPerPage;
                const end = start + itemsPerPage;
                leaveTableBody.innerHTML = "";

                if (dataList.length === 0) {
                    const row = `
                        <tr>
                            <td colspan="10" style="text-align: center; padding: 20px;">Không tìm thấy dữ liệu</td>
                        </tr>`;
                    leaveTableBody.innerHTML = row;
                    return;
                }

                dataList.slice(start, end).forEach(item => {
                    const isProcessed = item.trangThai === "Đã duyệt" || item.trangThai === "Đã duyệt (Không lương)" || item.trangThai === "Từ chối" || item.trangThai === "Đã hủy";
                    const actionContent = `
                        <div class="action-buttons">
                            ${isProcessed ? 'Đã xử lý' : `
                                <i class="fas fa-check-circle action-icon approve" data-bs-toggle="tooltip" data-bs-placement="top" title="Duyệt" onclick="Swal.fire({
                                    title: 'Xác nhận duyệt',
                                    text: 'Bạn có chắc chắn muốn duyệt đơn nghỉ phép này?',
                                    icon: 'question',
                                    showCancelButton: true,
                                    confirmButtonText: 'Xác nhận',
                                    cancelButtonText: 'Hủy'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        updateStatus(${item.maNgayNghi}, 'Đã duyệt').then(res => {
                                            if (res.success) {
                                                Swal.fire({ 
                                                    title: 'Thành công', 
                                                    text: res.message, 
                                                    icon: 'success', 
                                                    confirmButtonText: 'OK' 
                                                }).then(() => location.reload());
                                            } else {
                                                Swal.fire({ 
                                                    title: 'Lỗi', 
                                                    text: res.message, 
                                                    icon: 'error', 
                                                    confirmButtonText: 'OK' 
                                                });
                                            }
                                        }).catch(err => {
                                            Swal.fire({ 
                                                title: 'Cảnh báo', 
                                                text: err.message, 
                                                icon: 'warning',
                                                confirmButtonText: 'OK'
                                            });
                                        });
                                    }
                                });"></i>
                                <button class="btn action-icon reject" data-bs-toggle="modal" data-bs-target="#rejectReasonModal" data-bs-placement="top" title="Từ chối" data-ma-don="${item.maNgayNghi}" style="background: none; border: none; padding: 0;">
                                    <i class="fas fa-times-circle"></i>
                                </button>
                            `}
                            <i class="fas fa-eye action-icon details" data-bs-toggle="modal" data-bs-target="#detailsModal" data-bs-placement="top" title="Chi tiết" data-ma-don="${item.maNgayNghi}"></i>
                        </div>`;

                    let attachmentContent;
                    if (item.fileDinhKem && Array.isArray(item.fileDinhKem) && item.fileDinhKem.length > 0) {
                        const fileCount = item.fileDinhKem.length;
                        let fileList = '';
                        let modalContent = '';

                        item.fileDinhKem.forEach((file, index) => {
                            const isImage = isImageFile(file.fileName);
                            const fileIcon = isImage ? 'fa-file-image' : 'fa-file-alt';
                            const uniqueId = `detail-file-${item.maNgayNghi}-${index}`;

                            if (isImage) {
                                fileList += `
                                    <li>
                                        <a class="dropdown-item" href="javascript:void(0)" data-bs-toggle="modal" data-bs-target="#imageModal-${uniqueId}">
                                            <i class="fas ${fileIcon}"></i> ${truncateFileName(file.fileName, 15)}
                                        </a>
                                    </li>`;
                                modalContent += `
                                    <div class="modal fade" id="imageModal-${uniqueId}" tabindex="-1" aria-labelledby="imageModalLabel-${uniqueId}" aria-hidden="true">
                                        <div class="modal-dialog modal-dialog-centered modal-lg">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="imageModalLabel-${uniqueId}">${file.fileName}</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body text-center">
                                                    <img src="${file.filePath}" alt="${file.fileName}" class="img-fluid" style="max-width: 100%;">
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>`;
                            } else {
                                fileList += `
                                    <li>
                                        <a class="dropdown-item" href="${file.filePath}" target="_blank">
                                            <i class="fas ${fileIcon}"></i> ${truncateFileName(file.fileName, 15)}
                                        </a>
                                    </li>`;
                            }
                        });

                        attachmentContent = `
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" id="dropdownBtn-${item.maNgayNghi}" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-paperclip"></i> ${fileCount} file đính kèm
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dropdownBtn-${item.maNgayNghi}">
                                    ${fileList}
                                </ul>
                            </div>
                            ${modalContent}`;
                    } else {
                        attachmentContent = 'Không có';
                    }

                    const checkboxContent = isProcessed
                        ? '<input type="checkbox" disabled>'
                        : `<input type="checkbox" class="select-item" value="${item.maNgayNghi}">`;

                    const reasonText = item.lyDo || 'Không xác định';
                    const truncatedReason = truncateReason(reasonText, 30);
                    const reasonContent = reasonText.length > 30
                        ? `<span class="reason-cell" data-bs-toggle="tooltip" data-bs-placement="top" title="${reasonText}">${truncatedReason}</span>`
                        : reasonText;

                    // Tạo dropdown cho ngày nghỉ
                    const leaveDatesContent = `
                        <div class="leave-dates-dropdown">
                            <button class="dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <span>${item.tongSoNgay} ngày nghỉ</span>
                                <span class="badge">${item.tongSoNgay}</span>
                                <i class="fas fa-chevron-down"></i>
                            </button>
                            <ul class="dropdown-menu">
                                ${item.ngayNghiList.map(date => `
                                    <li><a class="dropdown-item" href="#">${date}</a></li>
                                `).join('')}
                            </ul>
                        </div>`;

                    const row = `
                        <tr data-status="${item.maTrangThai}">
                            <td>${checkboxContent}</td>
                            <td>${item.maNgayNghi}</td>
                            <td>${item.ngayCapNhat}</td>
                            <td>${item.hoTen}</td>
                            <td>${leaveDatesContent}</td>
                            <td>${reasonContent}</td>
                            <td>${attachmentContent}</td>
                            <td><span class="leave-status leave-status-${getStatusClass(item.trangThai)}">${item.trangThai}</span></td>
                            <td>${item.soNgayConLai != null ? item.soNgayConLai : '--'}</td>
                            <td>${actionContent}</td>
                        </tr>`;
                    leaveTableBody.innerHTML += row;
                });

                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                    new bootstrap.Tooltip(tooltipTriggerEl);
                });

                initializeModals();
            }

            function initializeModals() {
                const imageModals = document.querySelectorAll('.modal[id*="imageModal-"]');
                imageModals.forEach(modal => {
                    modal.addEventListener('shown.bs.modal', function () {
                        console.log('Image modal opened:', modal.id);
                        const image = modal.querySelector('img');
                        if (image) {
                            console.log('Image src:', image.src);
                            console.log('Image loaded:', !image.complete || image.naturalWidth !== 0);
                        }
                    });

                    const img = modal.querySelector('img');
                    if (img) {
                        img.onerror = function () {
                            console.error('Failed to load image:', this.src);
                            this.src = 'path/to/fallback-image.png';
                            this.alt = 'Image not available';
                        };
                    }
                });
            }

            function isImageFile(fileName) {
                if (!fileName) return false;
                const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
                return imageExtensions.some(ext => fileName.toLowerCase().endsWith(ext));
            }

            function truncateFileName(fileName, maxLength) {
                if (!fileName) return '';
                if (fileName.length <= maxLength) return fileName;
                const lastDotIndex = fileName.lastIndexOf('.');
                if (lastDotIndex === -1) {
                    return fileName.substring(0, maxLength - 3) + '...';
                }
                const name = fileName.substring(0, lastDotIndex);
                const extension = fileName.substring(lastDotIndex);
                const maxNameLength = maxLength - extension.length - 3;
                return name.substring(0, maxNameLength) + '...' + extension;
            }

            function renderPagination() {
                const totalPages = Math.ceil(dataList.length / itemsPerPage);
                let paginationContainer = document.getElementById('pagination-container');

                if (!paginationContainer) {
                    paginationContainer = document.createElement('div');
                    paginationContainer.id = 'pagination-container';
                    paginationContainer.className = 'pagination';
                    document.querySelector('.leave-table').parentNode.appendChild(paginationContainer);
                } else {
                    paginationContainer.innerHTML = '';
                }

                if (totalPages <= 1) return;

                const prevButton = document.createElement('button');
                prevButton.textContent = 'Trước';
                prevButton.disabled = currentPage === 1;
                prevButton.addEventListener('click', () => {
                    if (currentPage > 1) {
                        currentPage--;
                        renderTable(currentPage);
                        renderPagination();
                    }
                });

                for (let i = 1; i <= totalPages; i++) {
                    const pageButton = document.createElement('button');
                    pageButton.textContent = i;
                    pageButton.className = currentPage === i ? 'active' : '';
                    pageButton.addEventListener('click', () => {
                        currentPage = i;
                        renderTable(currentPage);
                        renderPagination();
                    });
                    paginationContainer.appendChild(pageButton);
                }

                const nextButton = document.createElement('button');
                nextButton.textContent = 'Sau';
                nextButton.disabled = currentPage === totalPages;
                nextButton.addEventListener('click', () => {
                    if (currentPage < totalPages) {
                        currentPage++;
                        renderTable(currentPage);
                        renderPagination();
                    }
                });

                paginationContainer.prepend(prevButton);
                paginationContainer.appendChild(nextButton);
            }

            function getStatusClass(status) {
                switch (status) {
                    case 'Đã duyệt': return 'approved';
                    case 'Đã duyệt (Không hưởng lương)': return 'no-salary';
                    case 'Từ chối': return 'rejected';
                    case 'Đã hủy': return 'canceled';
                    default: return 'pending';
                }
            }

            tabs.forEach(tab => {
                tab.addEventListener("click", function () {
                    tabs.forEach(t => t.classList.remove("active"));
                    this.classList.add("active");
                    const tabText = this.textContent.trim();
                    let statusFilter = null;
                    if (tabText === "Đang chờ duyệt") {
                        statusFilter = "Chờ duyệt";
                    } else if (tabText === "Đã duyệt") {
                        // Lấy cả trạng thái NN2 và NN5
                        dataList = originalData.filter(item => 
                            item.maTrangThai === "NN2" || 
                            item.maTrangThai === "NN5" || 
                            item.trangThai === "Đã duyệt" || 
                            item.trangThai === "Đã duyệt (Không hưởng lương)"
                        );
                        renderTable(currentPage);
                        renderPagination();
                        return;
                    } else if (tabText === "Tất cả đơn nghỉ phép") {
                        statusFilter = null;
                    } else if (tabText === "Đơn bị hủy") {
                        statusFilter = "Đã hủy";
                    }
                    fetchData(statusFilter);
                });
            });

            fetchData("Chờ duyệt");
        });
    </script>
</body>
</html>