@using DocumentFormat.OpenXml.Office2010.PowerPoint
@{
    Layout = "~/Views/Shared/_ThemeLayout.cshtml";
    ViewData["Title"] = "Phân tích lương";
}

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap4.min.js"></script>
    <script>
        $(document).ready(function () {
            // Chart instances
            let departmentChart = null;
            let monthChart = null;
            let positionChart = null;

            // User role flags
            const isDirector = @User.IsInRole("DIRECTOR").ToString().ToLower();
            const isPayrollAuditor = @User.IsInRole("PAYROLL_AUDITOR").ToString().ToLower();
            const isLineManager = @User.IsInRole("LINE_MANAGER").ToString().ToLower();

            // Hiển thị toast
            function showToast(message, type = 'danger') {
                const toast = $(`
                    <div class="toast bg-${type} text-white" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 1050;">
                        <div class="toast-header">
                            <strong class="mr-auto"><i class="fa fa-${type === 'danger' ? 'exclamation-circle' : 'check-circle'}"></i> Thông báo</strong>
                            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast">&times;</button>
                        </div>
                        <div class="toast-body">${message}</div>
                    </div>
                `);
                $('#toastContainer').append(toast);
                toast.toast({ delay: 5000 }).toast('show');
            }

            // Hiển thị/hide loading
            function showLoading() { $('#loading').show(); }
            function hideLoading() { $('#loading').hide(); }

            // Retry logic cho API
            async function fetchWithRetry(url, options, retries = 3) {
                for (let i = 0; i < retries; i++) {
                    try {
                        console.log(`Attempt ${i + 1}: Fetching ${url}`);
                        const response = await $.ajax({
                            url: url,
                            ...options,
                            headers: {
                                'Accept': 'application/json',
                                ...options.headers
                            }
                        });
                        console.log('Response:', response);
                        return response;
                    } catch (error) {
                        console.error(`Attempt ${i + 1} failed:`, error);
                        if (i === retries - 1) throw error;
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                }
            }

            // Lấy danh sách phòng ban
            fetchWithRetry('/api/PhongBanApi', { method: 'GET' })
                .then(data => {
                    $('#phongBan').append('<option value="">Tất cả</option>');
                    data.forEach(pb => {
                        $('#phongBan').append(`<option value="${pb.maPhongBan}">${pb.tenPhongBan}</option>`);
                    });
                })
                .catch(error => {
                    console.error('Error loading departments:', error);
                    showToast('Không thể tải danh sách phòng ban.');
                });

            // Lấy danh sách chức vụ
            fetchWithRetry('/api/ChucVuApi', { method: 'GET' })
                .then(data => {
                    $('#chucVu').append('<option value="">Tất cả</option>');
                    data.forEach(cv => {
                        $('#chucVu').append(`<option value="${cv.maChucVu}">${cv.tenChucVu}</option>`);
                    });
                })
                .catch(error => {
                    console.error('Error loading positions:', error);
                    showToast('Không thể tải danh sách chức vụ.');
                });

            // Tạo danh sách năm
            const currentYear = new Date().getFullYear();
            for (let year = currentYear; year >= currentYear - 5; year--) {
                $('#year').append(`<option value="${year}">${year}</option>`);
            }

            // Khởi tạo DataTable với cấu hình tiếng Việt
            const table = $('#employeeTable').DataTable({
                pageLength: 10,
                columns: [
                    { data: 'maLuong' },
                    { data: 'maNv' },
                    { data: 'hoTen' },
                    { data: 'tenPhongBan', defaultContent: 'N/A' },
                    { data: 'chucVu', defaultContent: 'N/A' },
                    { 
                        data: 'thucNhan',
                        render: function(data) {
                            return data ? data.toLocaleString('vi-VN') + ' VNĐ' : 'N/A';
                        }
                    },
                    { 
                        data: 'trangThai',
                        render: function(data, type, row) {
                            const statusClass = data === 'BL5' ? 'success' : 
                                             data === 'BL1R' ? 'danger' : 'warning';
                            return `<span class="badge badge-${statusClass}">${row.tenTrangThai || data}</span>`;
                        }
                    },
                    {
                        data: 'maLuong',
                        render: function(data) {
                            return `<button class="btn btn-primary btn-sm view-detail" data-ma-luong="${data}"><i class="fa fa-eye"></i> Xem</button>`;
                        }
                    }
                ],
                language: {
                    "sProcessing": "Đang xử lý...",
                    "sLengthMenu": "Xem _MENU_ mục",
                    "sZeroRecords": "Không tìm thấy dòng nào phù hợp",
                    "sInfo": "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                    "sInfoEmpty": "Đang xem 0 đến 0 trong tổng số 0 mục",
                    "sInfoFiltered": "(được lọc từ _MAX_ mục)",
                    "sInfoPostFix": "",
                    "sSearch": "Tìm:",
                    "sUrl": "",
                    "oPaginate": {
                        "sFirst": "Đầu",
                        "sPrevious": "Trước",
                        "sNext": "Tiếp",
                        "sLast": "Cuối"
                    }
                }
            });

            // Xử lý lọc báo cáo
            $('#filterForm').submit(function (e) {
                e.preventDefault();
                loadAnalytics();
            });

            // Xuất Excel
            $('#exportExcel').click(function () {
                const wb = XLSX.utils.table_to_book(document.getElementById('employeeTable'), { sheet: "Payroll" });
                XLSX.writeFile(wb, `Payroll_Analytics_${new Date().toISOString().slice(0, 10)}.xlsx`);
            });

            // Hàm lấy và hợp nhất dữ liệu
            async function fetchAndMergeData(year, month) {
                try {
                    let apiUrl = '/api/PayrollApi/GetPayrollStatus';
                    if (isDirector) {
                        apiUrl = `/api/PayrollDirectorApi/GetPayrolls?year=${year}&month=${month}`;
                    } else if (isPayrollAuditor) {
                        apiUrl = `/api/PayrollAccountantApi/GetPayrolls?year=${year}&month=${month}`;
                    } else if (isLineManager) {
                        apiUrl = `/api/PayrollManagerApi/GetDepartmentPayrolls?year=${year}&month=${month}`;
                    }

                    console.log('Fetching data from:', apiUrl);
                    const response = await fetchWithRetry(apiUrl, { method: 'GET' });

                    if (!response || response.length === 0) {
                        console.warn('No data received from API');
                        showToast('Không có dữ liệu báo cáo', 'warning');
                        return [];
                    }

                    console.log('Raw API response:', response);

                    // Lấy thông tin phòng ban và chức vụ
                    const [deptResponse, posResponse] = await Promise.all([
                        fetchWithRetry('/api/PhongBanApi', { method: 'GET' }),
                        fetchWithRetry('/api/ChucVuApi', { method: 'GET' })
                    ]);

                    // Tạo map cho phòng ban và chức vụ
                    const deptMap = {};
                    const posMap = {};
                    deptResponse.forEach(dept => {
                        deptMap[dept.maPhongBan] = dept.tenPhongBan;
                    });
                    posResponse.forEach(pos => {
                        posMap[pos.maChucVu] = pos.tenChucVu;
                    });

                    // Nếu là API GetPayrollStatus, cần làm phẳng dữ liệu
                    if (apiUrl.includes('GetPayrollStatus')) {
                        const flattenedData = response.flatMap(group => {
                            console.log('Processing group:', group);
                            if (!group.nhanViens || !Array.isArray(group.nhanViens)) {
                                console.warn('Invalid group data:', group);
                                return [];
                            }
                            return group.nhanViens.map(nv => {
                                console.log('Processing employee:', nv);
                                return {
                                    ...nv,
                                    tenPhongBan: group.tenPhongBan || deptMap[nv.maPhongBan] || 'Không xác định',
                                    tenChucVu: posMap[nv.maChucVu] || 'Không xác định',
                                    month: month,
                                    year: year
                                };
                            });
                        });
                        console.log('Flattened data:', flattenedData);
                        return flattenedData;
                    }

                    // Nếu là các API khác, thêm thông tin phòng ban và chức vụ
                    const enrichedData = response.map(item => ({
                        ...item,
                        tenPhongBan: deptMap[item.maPhongBan] || 'Không xác định',
                        tenChucVu: posMap[item.maChucVu] || 'Không xác định',
                        month: month,
                        year: year
                    }));

                    console.log('Enriched data:', enrichedData);
                    return enrichedData;
                } catch (error) {
                    console.error('Error fetching data:', error);
                    showToast('Không thể tải dữ liệu báo cáo', 'danger');
                    return [];
                }
            }

            // Hàm tải phân tích
            async function loadAnalytics() {
                showLoading();
                try {
                    const year = $('#year').val();
                    const month = $('#month').val();
                    const phongBan = $('#phongBan').val();
                    const chucVu = $('#chucVu').val();
                    const compareMonths = $('#compareMonths').val() || [];

                    if (!year || !month) {
                        showToast('Vui lòng chọn năm và tháng', 'warning');
                        return;
                    }

                    const data = await fetchAndMergeData(year, month);
                    console.log('Received data:', data);

                    if (data.length === 0) {
                        showToast('Không có dữ liệu báo cáo', 'warning');
                        return;
                    }

                    // Xóa các biểu đồ cũ
                    if (departmentChart) {
                        departmentChart.destroy();
                        departmentChart = null;
                    }
                    if (monthChart) {
                        monthChart.destroy();
                        monthChart = null;
                    }
                    if (positionChart) {
                        positionChart.destroy();
                        positionChart = null;
                    }

                    // Render các biểu đồ mới
                    renderDepartmentChart(data);
                    renderMonthComparisonChart(data);
                    renderPositionChart(data);

                    // Cập nhật bảng
                    table.clear().rows.add(data).draw();
                    $('#rowCount').html(`<i class="fa fa-list"></i> Tổng số bảng lương: ${data.length}`);

                    if (compareMonths.length > 0) {
                        const monthResponse = await fetchWithRetry(`/api/PayrollApi/GetPayrollStatus?year=${year}&months=${compareMonths.join(',')}`, { 
                            method: 'GET' 
                        });
                        if (monthResponse && monthResponse.length) {
                            if (monthChart) {
                                monthChart.destroy();
                                monthChart = null;
                            }
                            renderMonthComparisonChart(monthResponse);
                        }
                    }
                } catch (error) {
                    console.error('Error loading analytics:', error);
                    showToast('Không thể tải dữ liệu báo cáo', 'danger');
                } finally {
                    hideLoading();
                }
            }

            // Biểu đồ tổng lương theo phòng ban (Pie)
            function renderDepartmentChart(data) {
                try {
                    console.log('Rendering department chart with data:', data);
                    const departments = {};
                    
                    data.forEach(item => {
                        console.log('Processing item for department chart:', item);
                        if (item && item.tenPhongBan && typeof item.thucNhan === 'number') {
                            departments[item.tenPhongBan] = (departments[item.tenPhongBan] || 0) + item.thucNhan;
                        } else {
                            console.warn('Invalid item data:', item);
                        }
                    });

                    console.log('Processed departments data:', departments);

                    if (Object.keys(departments).length === 0) {
                        console.warn('No valid department data found');
                        showToast('Không có dữ liệu để hiển thị biểu đồ phòng ban', 'warning');
                        return;
                    }

                    const options = {
                        series: Object.values(departments),
                        chart: {
                            type: 'pie',
                            height: 350
                        },
                        labels: Object.keys(departments),
                        colors: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],
                        responsive: [{
                            breakpoint: 480,
                            options: {
                                chart: {
                                    width: 200
                                },
                                legend: {
                                    position: 'bottom'
                                }
                            }
                        }],
                        tooltip: {
                            y: {
                                formatter: function(value) {
                                    return value.toLocaleString('vi-VN') + ' VNĐ';
                                }
                            }
                        }
                    };

                    departmentChart = new ApexCharts(document.querySelector("#departmentChart"), options);
                    departmentChart.render();
                } catch (error) {
                    console.error('Error rendering department chart:', error);
                    showToast('Lỗi khi hiển thị biểu đồ phòng ban', 'danger');
                }
            }

            // Biểu đồ so sánh lương theo tháng (Line)
            function renderMonthComparisonChart(data) {
                try {
                    console.log('Rendering month comparison chart with data:', data);
                    const months = {};
                    
                    data.forEach(item => {
                        console.log('Processing item for month chart:', item);
                        if (item && typeof item.thucNhan === 'number') {
                            const monthKey = `${item.month}/${item.year}`;
                            months[monthKey] = (months[monthKey] || 0) + item.thucNhan;
                        } else {
                            console.warn('Invalid month data:', item);
                        }
                    });

                    console.log('Processed months data:', months);

                    if (Object.keys(months).length === 0) {
                        console.warn('No valid month data found');
                        showToast('Không có dữ liệu để hiển thị biểu đồ tháng', 'warning');
                        return;
                    }

                    const options = {
                        series: [{
                            name: 'Tổng lương',
                            data: Object.values(months)
                        }],
                        chart: {
                            type: 'line',
                            height: 350,
                            animations: {
                                enabled: true,
                                easing: 'easeinout',
                                speed: 800
                            }
                        },
                        xaxis: {
                            categories: Object.keys(months)
                        },
                        yaxis: {
                            labels: {
                                formatter: function(value) {
                                    return value.toLocaleString('vi-VN') + ' VNĐ';
                                }
                            }
                        },
                        tooltip: {
                            y: {
                                formatter: function(value) {
                                    return value.toLocaleString('vi-VN') + ' VNĐ';
                                }
                            }
                        }
                    };

                    monthChart = new ApexCharts(document.querySelector("#monthChart"), options);
                    monthChart.render();
                } catch (error) {
                    console.error('Error rendering month comparison chart:', error);
                    showToast('Lỗi khi hiển thị biểu đồ tháng', 'danger');
                }
            }

            // Biểu đồ tổng lương theo chức vụ (Bar)
            function renderPositionChart(data) {
                try {
                    console.log('Rendering position chart with data:', data);
                    const positions = {};
                    
                    data.forEach(item => {
                        console.log('Processing item for position chart:', item);
                        if (item && item.tenChucVu && typeof item.thucNhan === 'number') {
                            positions[item.tenChucVu] = (positions[item.tenChucVu] || 0) + item.thucNhan;
                        } else {
                            console.warn('Invalid position data:', item);
                        }
                    });

                    console.log('Processed positions data:', positions);

                    if (Object.keys(positions).length === 0) {
                        console.warn('No valid position data found');
                        showToast('Không có dữ liệu để hiển thị biểu đồ chức vụ', 'warning');
                        return;
                    }

                    const options = {
                        series: [{
                            name: 'Tổng lương',
                            data: Object.values(positions)
                        }],
                        chart: {
                            type: 'bar',
                            height: 350,
                            animations: {
                                enabled: true,
                                easing: 'easeinout',
                                speed: 800
                            }
                        },
                        xaxis: {
                            categories: Object.keys(positions)
                        },
                        yaxis: {
                            labels: {
                                formatter: function(value) {
                                    return value.toLocaleString('vi-VN') + ' VNĐ';
                                }
                            }
                        },
                        tooltip: {
                            y: {
                                formatter: function(value) {
                                    return value.toLocaleString('vi-VN') + ' VNĐ';
                                }
                            }
                        }
                    };

                    positionChart = new ApexCharts(document.querySelector("#positionChart"), options);
                    positionChart.render();
                } catch (error) {
                    console.error('Error rendering position chart:', error);
                    showToast('Lỗi khi hiển thị biểu đồ chức vụ', 'danger');
                }
            }

            // Xử lý xem chi tiết bảng lương
            $(document).on('click', '.view-detail', async function () {
                const maLuong = $(this).data('ma-luong');
                showLoading();
                try {
                    const data = await fetchWithRetry(`/api/PayrollApi/GetPayrollDetail/${maLuong}`, { method: 'GET' });
                    if (!data) {
                        showToast('Không tìm thấy thông tin chi tiết bảng lương', 'warning');
                        return;
                    }

                    $('#detailModal .modal-body').html(`
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                <h5><i class="fa fa-user"></i> Thông tin nhân viên</h5>
                            </div>
                            <div class="card-body">
                                <p><strong>Mã NV:</strong> ${data.maNv}</p>
                                <p><strong>Họ tên:</strong> ${data.hoTen}</p>
                                <p><strong>Giới tính:</strong> ${data.gioiTinh}</p>
                                <p><strong>Phòng ban:</strong> ${data.phongBan}</p>
                                <p><strong>Chức vụ:</strong> ${data.chucVu}</p>
                                <p><strong>Loại hợp đồng:</strong> ${data.loaiHopDong}</p>
                                <p><strong>Tháng năm:</strong> ${new Date(data.thangNam).toLocaleDateString('vi-VN')}</p>
                            </div>
                        </div>
                        <div class="card mt-3">
                            <div class="card-header bg-success text-white">
                                <h5><i class="fa fa-money"></i> Thu nhập</h5>
                            </div>
                            <div class="card-body">
                                <p><strong>Lương cơ bản:</strong> ${data.thuNhap.luongCoBan.toLocaleString('vi-VN')} VNĐ</p>
                                <p><strong>Phụ cấp cố định:</strong> ${data.thuNhap.phuCapCoDinh.toLocaleString('vi-VN')} VNĐ</p>
                                <p><strong>Thưởng cố định:</strong> ${data.thuNhap.thuongCoDinh.toLocaleString('vi-VN')} VNĐ</p>
                                <p><strong>Phụ cấp thêm:</strong> ${data.thuNhap.phuCapThem.toLocaleString('vi-VN')} VNĐ</p>
                                <p><strong>Lương thêm:</strong> ${data.thuNhap.luongThem.toLocaleString('vi-VN')} VNĐ</p>
                                <p><strong>Lương tăng ca:</strong> ${data.thuNhap.luongTangCa.toLocaleString('vi-VN')} VNĐ</p>
                                <p><strong>Tổng lương:</strong> ${data.thuNhap.tongLuong.toLocaleString('vi-VN')} VNĐ</p>
                            </div>
                        </div>
                        <div class="card mt-3">
                            <div class="card-header bg-warning text-white">
                                <h5><i class="fa fa-minus-circle"></i> Khấu trừ</h5>
                            </div>
                            <div class="card-body">
                                <p><strong>BHXH:</strong> ${data.khauTru.bhxh.toLocaleString('vi-VN')} VNĐ</p>
                                <p><strong>BHYT:</strong> ${data.khauTru.bhyt.toLocaleString('vi-VN')} VNĐ</p>
                                <p><strong>BHTN:</strong> ${data.khauTru.bhtn.toLocaleString('vi-VN')} VNĐ</p>
                                <p><strong>Thuế TNCN:</strong> ${data.khauTru.thueTNCN.toLocaleString('vi-VN')} VNĐ</p>
                            </div>
                        </div>
                        <div class="card mt-3">
                            <div class="card-header bg-info text-white">
                                <h5><i class="fa fa-hand-holding-usd"></i> Thực nhận</h5>
                            </div>
                            <div class="card-body">
                                <p><strong>Thực nhận:</strong> ${data.thucNhan.toLocaleString('vi-VN')} VNĐ</p>
                            </div>
                        </div>
                        <div class="card mt-3">
                            <div class="card-header bg-secondary text-white">
                                <h5><i class="fa fa-university"></i> Thông tin tài khoản</h5>
                            </div>
                            <div class="card-body">
                                ${data.taiKhoanNganHang ? `
                                    <p><strong>Ngân hàng:</strong> ${data.taiKhoanNganHang.tenNganHang}</p>
                                    <p><strong>Chi nhánh:</strong> ${data.taiKhoanNganHang.chiNhanh}</p>
                                    <p><strong>Số tài khoản:</strong> ${data.taiKhoanNganHang.soTaiKhoan}</p>
                                ` : '<p>Chưa có thông tin tài khoản</p>'}
                            </div>
                        </div>
                        <div class="card mt-3">
                            <div class="card-header bg-dark text-white">
                                <h5><i class="fa fa-sticky-note"></i> Ghi chú</h5>
                            </div>
                            <div class="card-body">
                                <p>${data.ghiChu || 'Không có'}</p>
                            </div>
                        </div>
                        <div class="card mt-3">
                            <div class="card-header bg-primary text-white">
                                <h5><i class="fa fa-info-circle"></i> Trạng thái</h5>
                            </div>
                            <div class="card-body">
                                <p><strong>Trạng thái:</strong> ${data.tenTrangThai}</p>
                            </div>
                        </div>
                    `);
                    $('#detailModal').modal('show');
                } catch (error) {
                    console.error('Error loading payroll detail:', error);
                    showToast('Không thể tải chi tiết bảng lương.', 'danger');
                } finally {
                    hideLoading();
                }
            });

            // Tải phân tích mặc định
            loadAnalytics();
        });
    </script>
}

<link href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap4.min.css" rel="stylesheet">

<style>
    .card {
        transition: transform 0.2s;
        border-radius: 10px;
    }
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }
    .badge-success { background-color: #28a745; }
    .badge-warning { background-color: #ffc107; }
    .badge-danger { background-color: #dc3545; }
    #loading {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
    }
    .chart-container {
        height: 400px;
        width: 100%;
    }
</style>

<div class="container mt-4">
    <h2><i class="fa fa-chart-bar"></i> Phân tích lương</h2>

    <!-- Toast container -->
    <div id="toastContainer"></div>

    <!-- Loading spinner -->
    <div id="loading">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Đang tải...</span>
        </div>
    </div>

    <!-- Form lọc -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5><i class="fa fa-filter"></i> Lọc báo cáo</h5>
        </div>
        <div class="card-body">
            <form id="filterForm">
                <div class="row">
                    <div class="col-md-3 col-sm-6 mb-3">
                        <label for="year"><i class="fa fa-calendar"></i> Năm</label>
                        <select id="year" class="form-control">
                            <!-- Được điền động bằng JS -->
                        </select>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <label for="month"><i class="fa fa-calendar-alt"></i> Tháng</label>
                        <select id="month" class="form-control">
                            <option value="1">Tháng 1</option>
                            <option value="2">Tháng 2</option>
                            <option value="3">Tháng 3</option>
                            <option value="4">Tháng 4</option>
                            <option value="5">Tháng 5</option>
                            <option value="6">Tháng 6</option>
                            <option value="7">Tháng 7</option>
                            <option value="8">Tháng 8</option>
                            <option value="9">Tháng 9</option>
                            <option value="10">Tháng 10</option>
                            <option value="11">Tháng 11</option>
                            <option value="12">Tháng 12</option>
                        </select>
                    </div>
                    @if (User.IsInRole("DIRECTOR") || User.IsInRole("EMPLOYEE_MANAGER") || User.IsInRole("PAYROLL_AUDITOR"))
                    {
                        <div class="col-md-3 col-sm-6 mb-3">
                            <label for="phongBan"><i class="fa fa-building"></i> Phòng ban</label>
                            <select id="phongBan" class="form-control">
                                <!-- Được điền động bằng JS -->
                            </select>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-3">
                            <label for="chucVu"><i class="fa fa-user-tie"></i> Chức vụ</label>
                            <select id="chucVu" class="form-control">
                                <!-- Được điền động bằng JS -->
                            </select>
                        </div>
                    }
                    <div class="col-md-3 col-sm-6 mb-3">
                        <label for="compareMonths"><i class="fa fa-calendar-check"></i> So sánh tháng</label>
                        <select id="compareMonths" class="form-control" multiple>
                            <option value="1">Tháng 1</option>
                            <option value="2">Tháng 2</option>
                            <option value="3">Tháng 3</option>
                            <option value="4">Tháng 4</option>
                            <option value="5">Tháng 5</option>
                            <option value="6">Tháng 6</option>
                            <option value="7">Tháng 7</option>
                            <option value="8">Tháng 8</option>
                            <option value="9">Tháng 9</option>
                            <option value="10">Tháng 10</option>
                            <option value="11">Tháng 11</option>
                            <option value="12">Tháng 12</option>
                        </select>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3 align-self-end">
                        <button type="submit" class="btn btn-primary btn-block"><i class="fa fa-search"></i> Lọc</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Biểu đồ -->
    <div class="row mb-4">
        <div class="col-md-4 col-sm-12">
            <div class="card chart-container">
                <div class="card-header bg-info text-white">
                    <h5><i class="fa fa-pie-chart"></i> Tổng lương theo phòng ban</h5>
                </div>
                <div class="card-body">
                    <canvas id="departmentChart" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-sm-12">
            <div class="card chart-container">
                <div class="card-header bg-success text-white">
                    <h5><i class="fa fa-line-chart"></i> So sánh lương theo tháng</h5>
                </div>
                <div class="card-body">
                    <canvas id="monthChart" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-sm-12">
            <div class="card chart-container">
                <div class="card-header bg-warning text-white">
                    <h5><i class="fa fa-bar-chart"></i> Tổng lương theo chức vụ</h5>
                </div>
                <div class="card-body">
                    <canvas id="positionChart" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Bảng phân tích -->
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h5><i class="fa fa-table"></i> Phân tích chi tiết</h5>
        </div>
        <div class="card-body">
            <button id="exportExcel" class="btn btn-success mb-3"><i class="fa fa-file-excel-o"></i> Xuất Excel</button>
            <table id="employeeTable" class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>Mã bảng lương</th>
                        <th>Mã NV</th>
                        <th>Họ tên</th>
                        <th>Phòng ban</th>
                        <th>Chức vụ</th>
                        <th>Thực nhận</th>
                        <th>Trạng thái</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Được điền động bằng JS -->
                </tbody>
            </table>
            <p id="rowCount"><i class="fa fa-list"></i> Tổng số bảng lương: 0</p>
        </div>
    </div>

    <!-- Modal chi tiết -->
    <div class="modal fade" id="detailModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title"><i class="fa fa-info-circle"></i> Chi tiết bảng lương</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Được điền động bằng JS -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"><i class="fa fa-times"></i> Đóng</button>
                </div>
            </div>
        </div>
    </div>
</div>